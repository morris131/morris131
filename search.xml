<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>中缀表达式</title>
      <link href="/post/30154597.html"/>
      <url>/post/30154597.html</url>
      
        <content type="html"><![CDATA[<h1 id="中缀表达式"><a href="#中缀表达式" class="headerlink" title="中缀表达式"></a>中缀表达式</h1><p>中缀表达式是一个通用的算术或逻辑公式表示方法， 操作符是以中缀形式处于操作数的中间（例：3 + 4），中缀表达式是人们常用的算术表示方法。</p><a id="more"></a><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>编程实现”30+2*6-8”字符串的计算结果。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.data.struct.stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiddleExpressionDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String expression = <span class="string">"30+2*6-8"</span>;</span><br><span class="line"></span><br><span class="line">        ArrayStackDemo.ArrayStack numStack = <span class="keyword">new</span> ArrayStackDemo.ArrayStack(<span class="number">10</span>);</span><br><span class="line">        ArrayStackDemo.ArrayStack operateStack = <span class="keyword">new</span> ArrayStackDemo.ArrayStack(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> operate = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ch = <span class="number">0</span>;</span><br><span class="line">        String chStr = <span class="string">""</span>; <span class="comment">// 处理多位数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            ch = expression.charAt(index);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(isOperate(ch)) &#123;</span><br><span class="line">                <span class="comment">// 符号</span></span><br><span class="line">                <span class="keyword">if</span>(!operateStack.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(getPriority(ch) &lt;= getPriority(operateStack.peek())) &#123;</span><br><span class="line">                        <span class="comment">// 后面的符号比前面的符号优先级低</span></span><br><span class="line">                        <span class="comment">// 从数据栈中取出两个数据，从符号栈取出一个符号进行计算</span></span><br><span class="line">                        num1 = numStack.pop();</span><br><span class="line">                        num2 = numStack.pop();</span><br><span class="line">                        operate = operateStack.pop();</span><br><span class="line"></span><br><span class="line">                        res = calc(num1, num2, operate); <span class="comment">// 计算结果</span></span><br><span class="line">                        numStack.push(res);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                operateStack.push(ch);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 数字</span></span><br><span class="line">                chStr += ch - <span class="number">48</span>; <span class="comment">// 这里ch是个整型的数字，存的是对应的asscii码，需转换</span></span><br><span class="line">                <span class="keyword">if</span> (index == expression.length() - <span class="number">1</span> || isOperate(expression.charAt(index + <span class="number">1</span>))) &#123;</span><br><span class="line">                    <span class="comment">// 下一位还是数字存起来，注意判断是否最后一位数</span></span><br><span class="line">                    numStack.push(Integer.valueOf(chStr));</span><br><span class="line">                    chStr = <span class="string">""</span>; <span class="comment">// 记得清空</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">if</span>(index == expression.length()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!operateStack.isEmpty()) &#123;</span><br><span class="line">            num1 = numStack.pop();</span><br><span class="line">            num2 = numStack.pop();</span><br><span class="line">            operate = operateStack.pop();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> calcResult = calc(num1, num2, operate); <span class="comment">// 计算结果</span></span><br><span class="line">            numStack.push(calcResult);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(numStack.pop());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否符号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isOperate</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">'*'</span> || c == <span class="string">'/'</span> || c == <span class="string">'+'</span> || c == <span class="string">'-'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取符号优先级，返回数字越大优先级越高</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getPriority</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">'*'</span> || c == <span class="string">'/'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'+'</span> || c == <span class="string">'-'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据操作符计算两个数的结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2, <span class="keyword">int</span> operate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (operate) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">                res = num1 + num2;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                res = num2 - num1; <span class="comment">// 注意顺序</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">                res = num1 * num2;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">                res = num2 / num1; <span class="comment">// 注意顺序</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> datastruct </category>
          
      </categories>
      
      
        <tags>
            
            <tag> datastruct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈</title>
      <link href="/post/1f4ac2fb.html"/>
      <url>/post/1f4ac2fb.html</url>
      
        <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>栈是一种只能在一端进行插入和删除操作的特殊线性表。</p><p>它按照先进后出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。</p><a id="more"></a><h2 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h2><p><img src="https://gitee.com/morris131/morris-book/raw/master/back/datastruct/images/1575011778246.png" alt="![](https://gitee.com/morris131/morris-book/raw/master/back/datastruct/images/1575011784037.png)"></p><h2 id="用数组实现栈"><a href="#用数组实现栈" class="headerlink" title="用数组实现栈"></a>用数组实现栈</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.data.<span class="keyword">struct</span>.stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ArrayStackDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        ArrayStack arrayStack = <span class="keyword">new</span> ArrayStack(<span class="number">10</span>);</span><br><span class="line">        arrayStack.push(<span class="number">1</span>);</span><br><span class="line">        arrayStack.push(<span class="number">2</span>);</span><br><span class="line">        arrayStack.push(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        arrayStack.show();</span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println(arrayStack.peek());</span><br><span class="line">        System.<span class="keyword">out</span>.println(arrayStack.pop());</span><br><span class="line">        System.<span class="keyword">out</span>.println(arrayStack.pop());</span><br><span class="line">        System.<span class="keyword">out</span>.println(arrayStack.pop());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ArrayStack</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span>[] data;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> top = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span>(<span class="params"><span class="keyword">int</span> maxSize</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">            <span class="keyword">this</span>.data = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 判断栈是否为空</span></span><br><span class="line"><span class="comment">         * @return</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> boolean <span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> top == <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 判断栈是否已满</span></span><br><span class="line"><span class="comment">         * @return</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> boolean <span class="title">isFull</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> top == maxSize - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 入栈</span></span><br><span class="line"><span class="comment">         * @param item</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span>(<span class="params"><span class="keyword">int</span> item</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(isFull()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"栈已满"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            data[++top] = item;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 出栈</span></span><br><span class="line"><span class="comment">         * @return</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"栈已空"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> <span class="keyword">value</span> = data[top];</span><br><span class="line">            top--;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 查看栈顶元素</span></span><br><span class="line"><span class="comment">         * @return</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"栈已空"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> data[top];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 打印栈中的元素</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = top; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                System.<span class="keyword">out</span>.printf(<span class="string">"stack[%d]=%d \n"</span>, i, data[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用链表实现栈"><a href="#用链表实现栈" class="headerlink" title="用链表实现栈"></a>用链表实现栈</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.data.<span class="keyword">struct</span>.stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LinkedStackDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        LinkedStack linkedStack = <span class="keyword">new</span> LinkedStack();</span><br><span class="line">        linkedStack.push(<span class="number">1</span>);</span><br><span class="line">        linkedStack.push(<span class="number">2</span>);</span><br><span class="line">        linkedStack.push(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        linkedStack.show();</span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println(linkedStack.peek());</span><br><span class="line">        System.<span class="keyword">out</span>.println(linkedStack.pop());</span><br><span class="line">        System.<span class="keyword">out</span>.println(linkedStack.pop());</span><br><span class="line">        System.<span class="keyword">out</span>.println(linkedStack.pop());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">LinkedStack</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Node first = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 判断栈是否为空</span></span><br><span class="line"><span class="comment">         * @return</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> boolean <span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span> == first;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 判断栈是否已满</span></span><br><span class="line"><span class="comment">         * @return</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> boolean <span class="title">isFull</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 入栈(将新节点放在链表的最前面)</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @param item</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span>(<span class="params"><span class="keyword">int</span> item</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(isFull()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"栈已满"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Node newNode = <span class="keyword">new</span> Node(item);</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span> == first) &#123;</span><br><span class="line">                first = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newNode.setNext(first);</span><br><span class="line">                first = newNode;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 出栈(移除链表最前面的节点)</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @return</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"栈已空"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> <span class="keyword">value</span> = first.getItem();</span><br><span class="line">            first = first.next;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 查看栈顶元素</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @return</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"栈已空"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> first.getItem();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 打印栈中的元素</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            Node temp = first;</span><br><span class="line">            <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"栈已空"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.<span class="keyword">out</span>.println(temp.getItem());</span><br><span class="line">            <span class="keyword">while</span> (temp.hasNext()) &#123;</span><br><span class="line">                temp = temp.getNext();</span><br><span class="line">                System.<span class="keyword">out</span>.println(temp.getItem());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Node</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> item;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span>(<span class="params"><span class="keyword">int</span> item</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.item = item;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> boolean <span class="title">hasNext</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span> != next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItem</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItem</span>(<span class="params"><span class="keyword">int</span> item</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.item = item;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Node <span class="title">getNext</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span>(<span class="params">Node next</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> datastruct </category>
          
      </categories>
      
      
        <tags>
            
            <tag> datastruct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jgit的使用</title>
      <link href="/post/6e7911c4.html"/>
      <url>/post/6e7911c4.html</url>
      
        <content type="html"><![CDATA[<h1 id="jgit的使用"><a href="#jgit的使用" class="headerlink" title="jgit的使用"></a>jgit的使用</h1><p>要使用jgit，先引入jgit的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jgit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.eclipse.jgit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.2.201906051522-r<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h2><p>从github上clone一个项目</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Git</span>.</span></span>clone<span class="constructor">Repository()</span>.set<span class="constructor">URI(<span class="params">url</span>)</span>.set<span class="constructor">Directory(<span class="params">workSpace</span>)</span>.call<span class="literal">()</span>;</span><br></pre></td></tr></table></figure><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><p>提交代码到暂存区，注意这里只会提交新增和修改的文件，如果文件被删除，用下面的rm</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git git = <span class="module-access"><span class="module"><span class="identifier">Git</span>.</span></span><span class="keyword">open</span>(workSpace);</span><br><span class="line">git.add<span class="literal">()</span>.add<span class="constructor">Filepattern(<span class="string">"."</span>)</span>.call<span class="literal">()</span>;</span><br></pre></td></tr></table></figure><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Git git = Git.open(workSpace);</span><br><span class="line"><span class="built_in">Set</span>&lt;String&gt; removed = git.status().<span class="built_in">call</span>().getMissing();</span><br><span class="line">removed.<span class="keyword">forEach</span>(t-&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        git.rm().addFilepattern(t).<span class="built_in">call</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (GitAPIException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git git = <span class="module-access"><span class="module"><span class="identifier">Git</span>.</span></span><span class="keyword">open</span>(workSpace);</span><br><span class="line">git.commit<span class="literal">()</span>.set<span class="constructor">Message(<span class="string">"add test"</span>)</span>.call<span class="literal">()</span>;</span><br></pre></td></tr></table></figure><h2 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">gitpull</span><span class="params">()</span> <span class="keyword">throws</span> GitAPIException, IOException </span>&#123;</span><br><span class="line">    Git git = Git.open(workSpace);</span><br><span class="line">    PullCommand pullCommand = git.pull();</span><br><span class="line"></span><br><span class="line">    setSshSessionFactory(pullCommand);</span><br><span class="line"></span><br><span class="line">    pullCommand.call();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function">SshSessionFactory <span class="title">createSshSessionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JschConfigSessionFactory() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="function">JSch <span class="title">createDefaultJSch</span><span class="params">(FS fs )</span> <span class="keyword">throws</span> JSchException </span>&#123;</span><br><span class="line">            JSch defaultJSch = <span class="keyword">super</span>.createDefaultJSch(fs);</span><br><span class="line">            defaultJSch.addIdentity( <span class="string">"~"</span> + File.separator + <span class="string">".ssh"</span> + File.separator + <span class="string">"id_rsa"</span> );</span><br><span class="line">            <span class="keyword">return</span> defaultJSch;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">configure</span><span class="params">(OpenSshConfig.Host host, Session session )</span> </span>&#123;</span><br><span class="line">            session.setConfig(<span class="string">"StrictHostKeyChecking"</span>,<span class="string">"no"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">setSshSessionFactory</span><span class="params">(TransportCommand transportCommand)</span> </span>&#123;</span><br><span class="line">    transportCommand.setTransportConfigCallback( (transport)-&gt; &#123;</span><br><span class="line">                SshTransport sshTransport = (SshTransport) transport;</span><br><span class="line">                sshTransport.setSshSessionFactory(createSshSessionFactory());</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">gitpush</span><span class="params">()</span> <span class="keyword">throws</span> GitAPIException, IOException </span>&#123;</span><br><span class="line">    Git git = Git.open(workSpace);</span><br><span class="line">    PushCommand pushCommand = git.push();</span><br><span class="line"></span><br><span class="line">    setSshSessionFactory(pushCommand);</span><br><span class="line"></span><br><span class="line">    pushCommand.call();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jgit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jgit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>slf4j的使用</title>
      <link href="/post/97b50ad5.html"/>
      <url>/post/97b50ad5.html</url>
      
        <content type="html"><![CDATA[<h1 id="slf4j的使用"><a href="#slf4j的使用" class="headerlink" title="slf4j的使用"></a>slf4j的使用</h1><h2 id="slf4j的简单使用"><a href="#slf4j的简单使用" class="headerlink" title="slf4j的简单使用"></a>slf4j的简单使用</h2><p>要想使用slf4j，需引入slf4j的api。</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>slf4j的测试类如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.spring.<span class="built_in">log</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Slf4jTest</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Logger logger = LoggerFactory.getLogger(Slf4jTest.class);</span><br><span class="line">        logger.info(<span class="string">"slf4j log"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：<br><img src="https://gitee.com/morris131/morris-book/raw/master/back/java/spring/images/1574738438033.png" alt></p><p>从运行结果发现并没有打印日志，而是打印出一个警告`Failed to load class “org.slf4j.impl.StaticLoggerBinder”</p><p>slf4j只是一个日志标准，并不是日志系统的具体实现。要打印日志，还得引入一个具体实现。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意<code>slf4j-simple</code>的版本与<code>slf4j-api</code>的版本保持一致。<br>运行结果如下：<br><img src="https://gitee.com/morris131/morris-book/raw/master/back/java/spring/images/1574738704671.png" alt></p><h2 id="slf4j绑定log4j"><a href="#slf4j绑定log4j" class="headerlink" title="slf4j绑定log4j"></a>slf4j绑定log4j</h2><p>我们的代码中是面向抽象（slf4j）编程，而打印日志需要一个具体的实现（如log4j）,那么slf4j和log4j之间怎么关联起来呢，这就需要一个绑定器（slf4j-log4j12）。</p><p>每一种具体的日志框架都有与之对应的绑定器。一般来说绑定器（slf4j-log4j12）中依赖了具体的实现（log4j）,所有项目中不需要显性的引入具体的实现。<br><code>将上面例子中</code>slf4j-simple`的依赖去除，加入log4j对应的绑定器(slf4j-log4j12)。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意绑定器的版本与slf4j-api的版本需保持一致。<br>运行结果如下：<br><img src="https://gitee.com/morris131/morris-book/raw/master/back/java/spring/images/1574739482297.png" alt></p><p>从运行结果可看出，确实使用了log4j打印了日志（如果还不确定可以设置log4g.properties中的日志级别为error，看是不是会生效）。</p><p>如果此时我想将日志框架换成jul,那么只需将绑定器换成slf4j-jdk14即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-jdk14<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样jcl有与之对应的绑定器，如果想将项目的日志框架换了，只需将项目中的绑定换成与之对应的绑定器即可。</p><p>logback直接实现了slf4j,只需将依赖引入即可，无需绑定器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="slf4j的源码分析"><a href="#slf4j的源码分析" class="headerlink" title="slf4j的源码分析"></a>slf4j的源码分析</h2><p>从<code>Logger logger = LoggerFactory.getLogger(Slf4jTest.class)</code>开始进入找：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">public static Logger get<span class="constructor">Logger(Class <span class="params">clazz</span>)</span> &#123;</span><br><span class="line">    return get<span class="constructor">Logger(<span class="params">clazz</span>.<span class="params">getName</span>()</span>); <span class="comment">// 调用下面的重载方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static Logger get<span class="constructor">Logger(String <span class="params">name</span>)</span> &#123;</span><br><span class="line">    ILoggerFactory iLoggerFactory = get<span class="constructor">ILoggerFactory()</span>; <span class="comment">// 调用下面的getILoggerFactory()</span></span><br><span class="line">    return iLoggerFactory.get<span class="constructor">Logger(<span class="params">name</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static ILoggerFactory get<span class="constructor">ILoggerFactory()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (INITIALIZATION_STATE<span class="operator"> == </span><span class="number">0</span>) &#123;</span><br><span class="line">        INITIALIZATION_STATE = <span class="number">1</span>;</span><br><span class="line">        perform<span class="constructor">Initialization()</span>; <span class="comment">// 调用下面的performInitialization()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    switch(INITIALIZATION_STATE) &#123;</span><br><span class="line">    case <span class="number">1</span>:</span><br><span class="line">        return TEMP_FACTORY;</span><br><span class="line">    case <span class="number">2</span>:</span><br><span class="line">        throw <span class="keyword">new</span> <span class="constructor">IllegalStateException(<span class="string">"org.slf4j.LoggerFactory could not be successfully initialized. See also http://www.slf4j.org/codes.html#unsuccessfulInit"</span>)</span>;</span><br><span class="line">    case <span class="number">3</span>:</span><br><span class="line">        return <span class="module-access"><span class="module"><span class="identifier">StaticLoggerBinder</span>.</span></span>get<span class="constructor">Singleton()</span>.get<span class="constructor">LoggerFactory()</span>;</span><br><span class="line">    case <span class="number">4</span>:</span><br><span class="line">        return NOP_FALLBACK_FACTORY;</span><br><span class="line">    default:</span><br><span class="line">        throw <span class="keyword">new</span> <span class="constructor">IllegalStateException(<span class="string">"Unreachable code"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> static final void perform<span class="constructor">Initialization()</span> &#123;</span><br><span class="line">    bind<span class="literal">()</span>; <span class="comment">// 调用下面的bind()</span></span><br><span class="line">    <span class="keyword">if</span> (INITIALIZATION_STATE<span class="operator"> == </span><span class="number">3</span>) &#123;</span><br><span class="line">        version<span class="constructor">SanityCheck()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> static final void bind<span class="literal">()</span> &#123;</span><br><span class="line">    String msg;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Set staticLoggerBinderPathSet = find<span class="constructor">PossibleStaticLoggerBinderPathSet()</span>; <span class="comment">// 调用下面的findPossibleStaticLoggerBinderPathSet</span></span><br><span class="line">        report<span class="constructor">MultipleBindingAmbiguity(<span class="params">staticLoggerBinderPathSet</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">StaticLoggerBinder</span>.</span></span>get<span class="constructor">Singleton()</span>;</span><br><span class="line">        INITIALIZATION_STATE = <span class="number">3</span>;</span><br><span class="line">        report<span class="constructor">ActualBinding(<span class="params">staticLoggerBinderPathSet</span>)</span>;</span><br><span class="line">        emit<span class="constructor">SubstituteLoggerWarning()</span>;</span><br><span class="line">    &#125; catch (NoClassDefFoundError var2) &#123;</span><br><span class="line">        msg = var2.get<span class="constructor">Message()</span>;</span><br><span class="line">        <span class="keyword">if</span> (!message<span class="constructor">ContainsOrgSlf4jImplStaticLoggerBinder(<span class="params">msg</span>)</span>) &#123;</span><br><span class="line">            failed<span class="constructor">Binding(<span class="params">var2</span>)</span>;</span><br><span class="line">            throw var2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        INITIALIZATION_STATE = <span class="number">4</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Util</span>.</span></span>report(<span class="string">"Failed to load class \"org.slf4j.impl.StaticLoggerBinder\"."</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Util</span>.</span></span>report(<span class="string">"Defaulting to no-operation (NOP) logger implementation"</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Util</span>.</span></span>report(<span class="string">"See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details."</span>);</span><br><span class="line">    &#125; catch (NoSuchMethodError var3) &#123;</span><br><span class="line">        msg = var3.get<span class="constructor">Message()</span>;</span><br><span class="line">        <span class="keyword">if</span> (msg != null<span class="operator"> &amp;&amp; </span>msg.index<span class="constructor">Of(<span class="string">"org.slf4j.impl.StaticLoggerBinder.getSingleton()"</span>)</span> != -<span class="number">1</span>) &#123;</span><br><span class="line">            INITIALIZATION_STATE = <span class="number">2</span>;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Util</span>.</span></span>report(<span class="string">"slf4j-api 1.6.x (or later) is incompatible with this binding."</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Util</span>.</span></span>report(<span class="string">"Your binding is version 1.5.5 or earlier."</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Util</span>.</span></span>report(<span class="string">"Upgrade your binding to version 1.6.x."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        throw var3;</span><br><span class="line">    &#125; catch (Exception var4) &#123;</span><br><span class="line">        failed<span class="constructor">Binding(<span class="params">var4</span>)</span>;</span><br><span class="line">        throw <span class="keyword">new</span> <span class="constructor">IllegalStateException(<span class="string">"Unexpected initialization failure"</span>, <span class="params">var4</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> static Set find<span class="constructor">PossibleStaticLoggerBinderPathSet()</span> &#123;</span><br><span class="line">    LinkedHashSet staticLoggerBinderPathSet = <span class="keyword">new</span> <span class="constructor">LinkedHashSet()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ClassLoader loggerFactoryClassLoader = <span class="module-access"><span class="module"><span class="identifier">LoggerFactory</span>.</span></span><span class="keyword">class</span>.get<span class="constructor">ClassLoader()</span>;</span><br><span class="line">        Enumeration paths;</span><br><span class="line">        <span class="keyword">if</span> (loggerFactoryClassLoader<span class="operator"> == </span>null) &#123;</span><br><span class="line">            paths = <span class="module-access"><span class="module"><span class="identifier">ClassLoader</span>.</span></span>get<span class="constructor">SystemResources(STATIC_LOGGER_BINDER_PATH)</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// STATIC_LOGGER_BINDER_PATH 为org/slf4j/impl/StaticLoggerBinder.class</span></span><br><span class="line">            paths = loggerFactoryClassLoader.get<span class="constructor">Resources(STATIC_LOGGER_BINDER_PATH)</span>; <span class="comment">// 重点在这</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(paths.has<span class="constructor">MoreElements()</span>) &#123;</span><br><span class="line">            URL path = (URL)paths.next<span class="constructor">Element()</span>;</span><br><span class="line">            staticLoggerBinderPathSet.add(path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (IOException var4) &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Util</span>.</span></span>report(<span class="string">"Error getting resources from path"</span>, var4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return staticLoggerBinderPathSet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码中可以看出slf4j会去查找类路径下所有的StaticLoggerBinder类，而我们添加的绑定器中就有这个类<br><img src="https://gitee.com/morris131/morris-book/raw/master/back/java/spring/images/1574749136969.png" alt><br>log4j对应的绑定器（slf4j-log4j12）中包含了一个StaticLoggerBinder类，</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ILoggerFactory loggerFactory = <span class="keyword">new</span> Log4jLoggerFactory();</span><br></pre></td></tr></table></figure><p>Log4jLoggerFactory中使用了log4j</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.slf4j.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.ILoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log4jLoggerFactory</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">ILoggerFactory</span></span> </span>&#123;</span><br><span class="line">    ConcurrentMap&lt;<span class="keyword">String</span>, Logger&gt; loggerMap = <span class="keyword">new</span> <span class="type">ConcurrentHashMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Log4jLoggerFactory() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Logger getLogger(<span class="keyword">String</span> name) &#123;</span><br><span class="line">        Logger slf4jLogger = (Logger)<span class="built_in">this</span>.loggerMap.<span class="keyword">get</span>(name);</span><br><span class="line">        <span class="keyword">if</span> (slf4jLogger != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> slf4jLogger;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            org.apache.log4j.Logger log4jLogger;</span><br><span class="line">            <span class="keyword">if</span> (name.equalsIgnoreCase(<span class="string">"ROOT"</span>)) &#123;</span><br><span class="line">                log4jLogger = LogManager.getRootLogger();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log4jLogger = LogManager.getLogger(name);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Logger <span class="keyword">new</span><span class="type">Instance</span> = <span class="keyword">new</span> <span class="type">Log4jLoggerAdapter</span>(log4jLogger);</span><br><span class="line">            Logger oldInstance = (Logger)<span class="built_in">this</span>.loggerMap.putIfAbsent(name, <span class="keyword">new</span><span class="type">Instance</span>);</span><br><span class="line">            <span class="keyword">return</span> (Logger)(oldInstance == <span class="literal">null</span> ? <span class="keyword">new</span><span class="type">Instance</span> : <span class="type">oldInstance</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring中的日志</title>
      <link href="/post/6daf6af4.html"/>
      <url>/post/6daf6af4.html</url>
      
        <content type="html"><![CDATA[<h1 id="spring中的日志"><a href="#spring中的日志" class="headerlink" title="spring中的日志"></a>spring中的日志</h1><h2 id="spring4中的日志"><a href="#spring4中的日志" class="headerlink" title="spring4中的日志"></a>spring4中的日志</h2><p>引入spring4的依赖</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.25.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类SpringLogTest</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.spring.<span class="built_in">log</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringLogTest</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringLogTest.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://gitee.com/morris131/morris-book/raw/master/back/java/spring/images/1574762054547.png" alt></p><p>发现日志格式长得跟jul打印的日志格式差不多。</p><p>引入log4j的依赖和log4j.properties</p><p>运行结果如下：</p><p><img src="https://gitee.com/morris131/morris-book/raw/master/back/java/spring/images/1574762156266.png" alt><br>从运行结果可得知确实使用了log4j来记录日志，可以猜测底层是使用了jcl来记录日志。</p><p>看一下spring4的依赖存在jcl:</p><p><img src="https://gitee.com/morris131/morris-book/raw/master/back/java/spring/images/1574762332215.png" alt></p><h2 id="spring5中的日志"><a href="#spring5中的日志" class="headerlink" title="spring5中的日志"></a>spring5中的日志</h2>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>slf4j的桥接器</title>
      <link href="/post/376ac22c.html"/>
      <url>/post/376ac22c.html</url>
      
        <content type="html"><![CDATA[<h1 id="slf4j的桥接器"><a href="#slf4j的桥接器" class="headerlink" title="slf4j的桥接器"></a>slf4j的桥接器</h1><p>之前项目中的日志框架统一采用slf4j,具体实现框架为logback,现在我们需要引入一个第三方依赖xxx.jar，而这个依赖底层使用的日志框架为log4j,那么怎么让项目统一用logback来记录日志呢？</p><a id="more"></a><h2 id="桥接器"><a href="#桥接器" class="headerlink" title="桥接器"></a>桥接器</h2><p><img src="https://gitee.com/morris131/morris-book/raw/master/back/java/spring/images/1574752325781.png" alt></p><p>slf4j提供了一个叫桥接器的东西，可以将log4j桥接到slf4j，slf4j再去使用logback记录日志。</p><p>项目中的依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这时我们再去调用Log4jTest，打印的是logback记录的日志。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.spring.<span class="built_in">log</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log4jTest</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Logger logger = Logger.getLogger(Log4jTest.class);</span><br><span class="line">        logger.info(<span class="string">"log4j log"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不相信可以删除项目中的log4j.properties，不会有警告。</p><h2 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h2><p>项目中的依赖如下（idea中需要将log4j-over-slf4j放在slf4j-log4j12前面才能出现效果）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这时我们再去调用Slf4jTest：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.spring.<span class="built_in">log</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Slf4jTest</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Logger logger = LoggerFactory.getLogger(Slf4jTest.class);</span><br><span class="line">        logger.info(<span class="string">"slf4j log"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SLF4J: Detected both log4j-over-slf4j<span class="selector-class">.jar</span> AND slf4j-log4j12<span class="selector-class">.jar</span> on the class path, preempting StackOverflowError. </span><br><span class="line">SLF4J: See also http:<span class="comment">//www.slf4j.org/codes.html#log4jDelegationLoop for more details.</span></span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java<span class="selector-class">.lang</span><span class="selector-class">.ExceptionInInitializerError</span></span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.Logger</span><span class="selector-class">.getLogger</span>(Logger<span class="selector-class">.java</span>:<span class="number">40</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.Logger</span><span class="selector-class">.getLogger</span>(Logger<span class="selector-class">.java</span>:<span class="number">48</span>)</span><br><span class="line">at com<span class="selector-class">.morris</span><span class="selector-class">.spring</span><span class="selector-class">.log</span><span class="selector-class">.Log4jTest</span><span class="selector-class">.main</span>(Log4jTest<span class="selector-class">.java</span>:<span class="number">9</span>)</span><br><span class="line">Caused by: java<span class="selector-class">.lang</span><span class="selector-class">.IllegalStateException</span>: Detected both log4j-over-slf4j<span class="selector-class">.jar</span> AND slf4j-log4j12<span class="selector-class">.jar</span> on the class path, preempting StackOverflowError. See also http:<span class="comment">//www.slf4j.org/codes.html#log4jDelegationLoop for more details.</span></span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.log4j</span><span class="selector-class">.Log4jLoggerFactory</span>.&lt;clinit&gt;(Log4jLoggerFactory<span class="selector-class">.java</span>:<span class="number">51</span>)</span><br><span class="line">... <span class="number">3</span> more</span><br></pre></td></tr></table></figure><p>系统会抛出一个StackOverflowError异常。</p><p>当同时引用了log4j-over-slf4j.jar和slf4j-log4j12.jar这两个依赖的时候,会出现这样的错误。究其本质的原因是: log4j将日志扔给slf4j –&gt; slf4j又将日志扔回去给log4j,所以循环于此,所以会报错。</p><h2 id="桥接器的工作原理"><a href="#桥接器的工作原理" class="headerlink" title="桥接器的工作原理"></a>桥接器的工作原理</h2><p>以log4j-over-slf4j.jar为例，如果使用了log4j-over-slf4j.jar，那么项目中就不在需要log4j.jar。</p><p>log4j对外提供了接口org.apache.log4j.Logger，那么log4j-over-slf4j也提供一个org.apache.log4j.Logger接口，全限定名保持一致，这样编译就不会报错了。</p><p>下面跟踪源码，探寻log4j-over-slf4j的org.apache.log4j.Logger接口底层是怎么桥接到slf4j。</p><p>从Log4jTest开始找：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Logger logger = <span class="module-access"><span class="module"><span class="identifier">Logger</span>.</span></span>get<span class="constructor">Logger(Log4jTest.<span class="params">class</span>)</span>;</span><br><span class="line">logger.info(<span class="string">"log4j log"</span>); <span class="comment">// 进入info</span></span><br></pre></td></tr></table></figure><blockquote><p>org.apache.log4j.Category#info(java.lang.Object)，注意这个info方法是父类Category的</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> info(Object message) &#123;</span><br><span class="line">        <span class="keyword">this</span>.differentiatedLog((Marker)<span class="literal">null</span>, CATEGORY_FQCN, <span class="number">20</span>, message, (Throwable)<span class="literal">null</span>); <span class="comment">// 进入differentiatedLog</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>differentiatedLog是父类org.apache.log4j.Category的。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">void</span> differentiatedLog(Marker marker, String fqcn, <span class="built_in">int</span> level, Object message, Throwable t) &#123;</span><br><span class="line">        String m = <span class="keyword">this</span>.convertToString(message);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.locationAwareLogger != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.locationAwareLogger.log(marker, fqcn, level, m, (Object[])<span class="literal">null</span>, t);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span>(level) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">this</span>.slf4jLogger.trace(marker, m);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                <span class="keyword">this</span>.slf4jLogger.debug(marker, m);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">                <span class="keyword">this</span>.slf4jLogger.info(marker, m); <span class="comment">// 发现实际调用了slf4jLogger.info</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">30</span>:</span><br><span class="line">                <span class="keyword">this</span>.slf4jLogger.warn(marker, m);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">                <span class="keyword">this</span>.slf4jLogger.error(marker, m);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>从上面的代码发现实际调用了slf4jLogger.info()，那么slf4jLogger是什么呢，查看他的类型得知<code>org.slf4j.Logger</code>,这样就完成了log4j桥接到slf4j。</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jul、jcl、log4j的使用</title>
      <link href="/post/78b5e7e4.html"/>
      <url>/post/78b5e7e4.html</url>
      
        <content type="html"><![CDATA[<h1 id="jul、jcl、log4j的使用"><a href="#jul、jcl、log4j的使用" class="headerlink" title="jul、jcl、log4j的使用"></a>jul、jcl、log4j的使用</h1><p>java中存在各种各样的与日志有关的框架，如：</p><a id="more"></a><ul><li>jul：java util logging</li><li>jcl: Jakarta Commons Logging，也可称为”Apache Commons Logging”。</li><li>log4j</li><li>log4j2</li><li>logback</li><li>slf4j</li></ul><h2 id="jul的使用"><a href="#jul的使用" class="headerlink" title="jul的使用"></a>jul的使用</h2><p>jul是jdk自带的无需引入第三方的jar。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.spring.<span class="built_in">log</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JULTest</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Logger logger = Logger.getLogger(JULTest.class.getName());</span><br><span class="line">        logger.info(<span class="string">"jul log"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：<br><img src="https://gitee.com/morris131/morris-book/raw/master/back/java/spring/images/1574675594906.png" alt="![](https://gitee.com/morris131/morris-book/raw/master/back/java/spring/images/1574675600332.png)"></p><h2 id="log4j的使用"><a href="#log4j的使用" class="headerlink" title="log4j的使用"></a>log4j的使用</h2><p>使用log4j需引用log4j的jar。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还需要在<code>resources</code>目录下添加<code>log4j.properties</code>，内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Root logger option</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=INFO, stdout</span><br><span class="line"></span><br><span class="line"><span class="comment"># Direct log messages to stdout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout</span>=org.apache.log4j.ConsoleAppender</span><br><span class="line"><span class="attr">log4j.appender.stdout.Target</span>=System.out</span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span>=org.apache.log4j.PatternLayout</span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span>=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-<span class="number">5</span>p %c&#123;<span class="number">1</span>&#125;:%L - %m%n</span><br></pre></td></tr></table></figure><p>log4j的使用如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.spring.<span class="built_in">log</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log4jTest</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Logger logger = Logger.getLogger(Log4jTest.class);</span><br><span class="line">        logger.info(<span class="string">"log4j log"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：<br><img src="https://gitee.com/morris131/morris-book/raw/master/back/java/spring/images/1574675637915.png" alt></p><h2 id="jcl的使用"><a href="#jcl的使用" class="headerlink" title="jcl的使用"></a>jcl的使用</h2><p>使用jcl需要引入jcl的jar。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jcl的使用如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.spring.<span class="keyword">log</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.<span class="keyword">Log</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> JCLTest &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="keyword">Log</span> <span class="keyword">log</span> = LogFactory.getLog(JCLTest.<span class="keyword">class</span>);</span><br><span class="line">        <span class="keyword">log</span>.<span class="keyword">info</span>("jcl log");</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：<br><img src="https://gitee.com/morris131/morris-book/raw/master/back/java/spring/images/1574675815420.png" alt><br>从运行结果可以发现，jcl的运行结果与log4j的运行结果一致，可以大胆猜测jcl的底层是使用了log4j。</p><p>然后我们将log4j的依赖去除，运行结果如下：<br><img src="https://gitee.com/morris131/morris-book/raw/master/back/java/spring/images/1574675927963.png" alt><br>从运行结果可以发现，去除log4j依赖后，jcl的运行结果与jul的运行结果一致，可以大胆猜测jcl的底层是使用了jul。</p><p>那么jcl到底何时使用log4j，何时使用jul，还会不会使用其他日志框架呢？答案从源码中可以分析出。</p><h2 id="jcl的源码分析"><a href="#jcl的源码分析" class="headerlink" title="jcl的源码分析"></a>jcl的源码分析</h2><p>通过查看源代码可以发现，执行”LogFactory.getLog(JCLTest.class);”语句的时候，最终是执行LogFactoryImp类中的discoverLogImplementation方法，在该方法中有如下代码语句：</p><blockquote><p>org.apache.commons.logging.impl.LogFactoryImpl#discoverLogImplementation</p></blockquote><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(int <span class="built_in">i</span>=<span class="number">0</span>; <span class="built_in">i</span>&lt;classesToDiscover.<span class="built_in">length</span> &amp;&amp; result == null; ++<span class="built_in">i</span>) &#123;</span><br><span class="line">    result = createLogFromClass(classesToDiscover[<span class="built_in">i</span>], logCategory, <span class="built_in">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而其中的classesToDiscover是一个静态常量，值为：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> LOGGING_IMPL_LOG4J_LOGGER = <span class="string">"org.apache.commons.logging.impl.Log4JLogger"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span>[] classesToDiscover = &#123;</span><br><span class="line">        LOGGING_IMPL_LOG4J_LOGGER,</span><br><span class="line">        <span class="string">"org.apache.commons.logging.impl.Jdk14Logger"</span>,</span><br><span class="line">        <span class="string">"org.apache.commons.logging.impl.Jdk13LumberjackLogger"</span>,</span><br><span class="line">        <span class="string">"org.apache.commons.logging.impl.SimpleLog"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>jcl会根据静态常量定义的顺序循环查找这些常量所表示的类是否存在，直到找到存在的为止，jcl首先会查找log4j是否存在，找到就会使用log4j打印日志，没找到就会查找jul是否存在，jul为jdk自带的，一般都会存在，所以最后会使用jul打印日志，后面的常量所表示的类不会执行。</p><p>在Log4JLogger类中，包含有”org.apache.log4j.Logger”类，即Log4J中的Logger类，因而对Log4JLogger类中的日志操作方法的调用会被委托给”org.apache.log4j.Logger”类运行。</p><p>在Jdk14Logger类中，包含有”java.util.logging.Logger”类，即Java Logging API中的Logger类，因而对Jdk14Logger类中的日志操作方法的调用会被委托给”java.util.logging.Logger”类运行。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>在项目中使用JCL的好处是降低与具体日志框架的耦合，可以灵活改变使用的具体日志框架</li><li>经典的日志框架组合为：JCL+Log4J</li><li>Spring项目中就选用了JCL框架</li></ul>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Autowire和Resource的区别</title>
      <link href="/post/c052ada6.html"/>
      <url>/post/c052ada6.html</url>
      
        <content type="html"><![CDATA[<h1 id="Autowire和-Resource的区别"><a href="#Autowire和-Resource的区别" class="headerlink" title="@Autowire和@Resource的区别"></a>@Autowire和@Resource的区别</h1><p>@Resource和@Autowired都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入。</p><a id="more"></a><p>spring不但支持自己定义的@Autowired注解，还支持几个由JSR-250规范定义的注解，它们分别是@Resource、@PostConstruct以及@PreDestroy。</p><h2 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h2><p>两者都可以写在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法。</p><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p>@Autowired为Spring提供的注解，需要导入包org.springframework.beans.factory.annotation.Autowired;只按照byType注入。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">com</span><span class="selector-class">.morris</span><span class="selector-class">.spring</span><span class="selector-class">.annotation</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.beans</span><span class="selector-class">.factory</span><span class="selector-class">.annotation</span><span class="selector-class">.Autowired</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.stereotype</span><span class="selector-class">.Service</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">Service</span></span><br><span class="line"><span class="keyword">public</span> class UserService &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">Autowired</span></span><br><span class="line">    private UserDao userDao;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Autowired注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果我们想使用按照名称（byName）来装配，可以结合@Qualifier注解一起使用。如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">com</span><span class="selector-class">.morris</span><span class="selector-class">.spring</span><span class="selector-class">.annotation</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.beans</span><span class="selector-class">.factory</span><span class="selector-class">.annotation</span><span class="selector-class">.Autowired</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.beans</span><span class="selector-class">.factory</span><span class="selector-class">.annotation</span><span class="selector-class">.Qualifier</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.stereotype</span><span class="selector-class">.Service</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">Service</span></span><br><span class="line"><span class="keyword">public</span> class UserService &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">Autowired</span></span><br><span class="line">    @Qualifier(<span class="string">"userDao"</span>)</span><br><span class="line">    private UserDao userDao;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有设置bean的qualifier属性的name，那么qualifier属性的name默认为bean的name。</p><h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h3><p>@Resource默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。@Resource有两个重要的属性：name和type，而Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">com</span><span class="selector-class">.morris</span><span class="selector-class">.spring</span><span class="selector-class">.annotation</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.stereotype</span><span class="selector-class">.Service</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">javax</span><span class="selector-class">.annotation</span><span class="selector-class">.Resource</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">Service</span></span><br><span class="line"><span class="keyword">public</span> class UserService &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">Resource</span></span><br><span class="line">    private UserDao userDao;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Resource装配顺序：</p><ol><li>如果同时指定了name和type，则从Spring上下文中找到name和type都匹配的bean进行装配，找不到则抛出异常。</li><li>如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常。</li><li>如果指定了type，则从上下文中找到类似匹配的唯一bean进行装配，找不到或是找到多个，都会抛出异常。</li><li>如果既没有指定name，又没有指定type，则自动按照byName（当注解写在字段上时，反射去除字段名，如果注解写在setter方法上，反射取出方法名按驼峰规则再算出字段名）方式进行装配；如果没有匹配，则按类型（注解在字段上，按字段的类型，注解在方法上，按方法参数的类型）进行匹配，如果匹配则自动装配。</li></ol>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP</title>
      <link href="/post/92933cdb.html"/>
      <url>/post/92933cdb.html</url>
      
        <content type="html"><![CDATA[<p>AOP(Aspect Oriented Programming)，即面向切面编程。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。</p><a id="more"></a><p>AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事物。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。</p><h3 id="AOP-术语"><a href="#AOP-术语" class="headerlink" title="AOP 术语"></a>AOP 术语</h3><ul><li>Join point（连接点）：目标对象中的方法，我们要关注和增强的方法，也就是我们要作用的点</li><li>Pointcut（切点）：连接点的集合，常用正则表达式定义所匹配的类和方法名称来指定这些切点。</li><li>Advice(通知)：通知定义了切面的位置，应用在某个方法被调用之前？之后？还是抛出异常时？等等。</li><li>Aspect(切面):切面是通知和切点的结合，在spring bean通常是个类，xml中是个label。</li><li>Target object（目标对象）：原始对象</li><li>AOP proxy（代理对象）：AOP框架创建的对象，包含了原始对象的代码和增加后的代码的对象。</li><li>Weaving（织入）：把代理逻辑加入到目标对象上的过程</li><li>Introduction（引入）：向现有的类添加新方法或属性，从而无需修改这些现有类的情况下，让他们具有新的行为和状态。织入是对方法的增强，引入是对类的增强</li></ul><h3 id="通知的类型"><a href="#通知的类型" class="headerlink" title="通知的类型"></a>通知的类型</h3><ul><li>前置通知: 在一个方法执行之前，执行通知。</li><li>后置通知: 在一个方法执行之后，不考虑其结果，执行通知。</li><li>返回后通知:    在一个方法执行之后，只有在方法成功完成时，才能执行通知。</li><li>抛出异常后通知:在一个方法执行之后，只有在方法退出抛出异常时，才能执行通知。</li><li>环绕通知:在方法调用之前和之后，执行通知。</li></ul><h3 id="注解式AOP"><a href="#注解式AOP" class="headerlink" title="注解式AOP"></a>注解式AOP</h3><h4 id="启用-AspectJ"><a href="#启用-AspectJ" class="headerlink" title="启用@AspectJ"></a>启用@AspectJ</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">com</span><span class="selector-class">.morris</span><span class="selector-class">.spring</span><span class="selector-class">.aop</span><span class="selector-class">.annotation</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.annotation</span><span class="selector-class">.ComponentScan</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.annotation</span><span class="selector-class">.Configuration</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.annotation</span><span class="selector-class">.EnableAspectJAutoProxy</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">Configuration</span></span><br><span class="line">@<span class="keyword">EnableAspectJAutoProxy</span></span><br><span class="line">@<span class="keyword">ComponentScan</span>(<span class="keyword">basePackages</span> = <span class="string">"com.morris.spring.aop.annotation"</span>)</span><br><span class="line">public class AppConfig &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="声明一个切面"><a href="#声明一个切面" class="headerlink" title="声明一个切面"></a>声明一个切面</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(<span class="meta-string">"execution(* com.morris.spring.aop.annotation..*.*(..))"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void beforePointcut() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(<span class="meta-string">"beforePointcut()"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void before() &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"before"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以简写如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Before;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知+切点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(<span class="meta-string">"execution(* com.morris.spring.aop.annotation..*.*(..))"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void before() &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"before"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="各个切点表达式的意义"><a href="#各个切点表达式的意义" class="headerlink" title="各个切点表达式的意义"></a>各个切点表达式的意义</h5><h6 id="execution"><a href="#execution" class="headerlink" title="execution"></a>execution</h6><p>用于匹配方法执行 join points连接点，最小粒度方法，在aop中主要使用。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(modifiers-<span class="built_in">pattern</span>? ret-type-<span class="built_in">pattern</span> declaring-type-<span class="built_in">pattern</span>?name-<span class="built_in">pattern</span>(param-<span class="built_in">pattern</span>) throws-<span class="built_in">pattern</span>?)</span><br></pre></td></tr></table></figure><p>这里问号表示当前项可以有也可以没有，其中各项的语义如下</p><ul><li>modifiers-pattern：方法的可见性，如public，protected；</li><li>ret-type-pattern：方法的返回值类型，如int，void等；</li><li>declaring-type-pattern：方法所在类的全路径名，如com.spring.Aspect；</li><li>name-pattern：方法名类型，如buisinessService()；</li><li>param-pattern：方法的参数类型，如java.lang.String；</li><li>throws-pattern：方法抛出的异常类型，如java.lang.Exception；</li></ul><p>例子:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Pointcut</span>(<span class="string">"execution(* com.chenss.dao.*.*(..))"</span>)<span class="comment">//匹配com.chenss.dao包下的任意接口和类的任意方法</span></span><br><span class="line"><span class="variable">@Pointcut</span>(<span class="string">"execution(public * com.chenss.dao.*.*(..))"</span>)<span class="comment">//匹配com.chenss.dao包下的任意接口和类的public方法</span></span><br><span class="line"><span class="variable">@Pointcut</span>(<span class="string">"execution(public * com.chenss.dao.*.*())"</span>)<span class="comment">//匹配com.chenss.dao包下的任意接口和类的public 无方法参数的方法</span></span><br><span class="line"><span class="variable">@Pointcut</span>(<span class="string">"execution(* com.chenss.dao.*.*(java.lang.String, ..))"</span>)<span class="comment">//匹配com.chenss.dao包下的任意接口和类的第一个参数为String类型的方法</span></span><br><span class="line"><span class="variable">@Pointcut</span>(<span class="string">"execution(* com.chenss.dao.*.*(java.lang.String))"</span>)<span class="comment">//匹配com.chenss.dao包下的任意接口和类的只有一个参数，且参数为String类型的方法</span></span><br><span class="line"><span class="variable">@Pointcut</span>(<span class="string">"execution(* com.chenss.dao.*.*(java.lang.String))"</span>)<span class="comment">//匹配com.chenss.dao包下的任意接口和类的只有一个参数，且参数为String类型的方法</span></span><br><span class="line"><span class="variable">@Pointcut</span>(<span class="string">"execution(public * *(..))"</span>)<span class="comment">//匹配任意的public方法</span></span><br><span class="line"><span class="variable">@Pointcut</span>(<span class="string">"execution(* te*(..))"</span>)<span class="comment">//匹配任意的以te开头的方法</span></span><br><span class="line"><span class="variable">@Pointcut</span>(<span class="string">"execution(* com.chenss.dao.IndexDao.*(..))"</span>)<span class="comment">//匹配com.chenss.dao.IndexDao接口中任意的方法</span></span><br><span class="line"><span class="variable">@Pointcut</span>(<span class="string">"execution(* com.chenss.dao..*.*(..))"</span>)<span class="comment">//匹配com.chenss.dao包及其子包中任意的方法</span></span><br></pre></td></tr></table></figure><h6 id="within"><a href="#within" class="headerlink" title="within"></a>within</h6><p>表达式的最小粒度为包</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Pointcut</span>(<span class="string">"within(com.chenss.dao.*)"</span>)<span class="comment">//匹配com.chenss.dao包中的任意方法</span></span><br><span class="line"><span class="variable">@Pointcut</span>(<span class="string">"within(com.chenss.dao..*)"</span>)<span class="comment">//匹配com.chenss.dao包及其子包中的任意方法</span></span><br></pre></td></tr></table></figure><h6 id="args"><a href="#args" class="headerlink" title="args"></a>args</h6><p>匹配指定参数类型和指定参数数量的方法,与包名和类名无关<br>args同execution不同的地方在于：args匹配的是运行时传递给方法的参数类型execution匹配的是方法在声明时指定的方法参数类型。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Pointcut</span>("<span class="keyword">args</span>(<span class="keyword">java</span>.<span class="keyword">io</span>.<span class="keyword">Serializable</span>)")//匹配运行时传递的参数类型为指定类型的、且参数个数和顺序匹配</span><br></pre></td></tr></table></figure><h6 id="this"><a href="#this" class="headerlink" title="this"></a>this</h6><p>this表示代理对象。<br>JDK代理时，this指向接口和代理类proxy，cglib代理时，this指向接口和子类(不使用proxy)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Before</span>("<span class="keyword">this</span>(<span class="keyword">com</span>.<span class="keyword">morris</span>.<span class="keyword">spring</span>.<span class="keyword">aop</span>.<span class="keyword">annotation</span>.<span class="keyword">thiss</span>.<span class="keyword">IUserService</span>)")</span><br></pre></td></tr></table></figure><p>当proxyTargetClass=false，使用JDK代理，this指向接口及代理类proxy。<br>当proxyTargetClass=true，使用CGLIB代理，this指向接口及目标类子类。</p><h6 id="target"><a href="#target" class="headerlink" title="target"></a>target</h6><p>target代表目标对象。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Before</span>("<span class="keyword">target</span>(<span class="keyword">com</span>.<span class="keyword">morris</span>.<span class="keyword">spring</span>.<span class="keyword">aop</span>.<span class="keyword">annotation</span>.<span class="keyword">target</span>.<span class="keyword">UserServiceImpl</span>)")</span><br></pre></td></tr></table></figure><h6 id="target-1"><a href="#target-1" class="headerlink" title="@target"></a>@target</h6><p>任何目标对象持有Secure注解的类方法</p><h6 id="args-1"><a href="#args-1" class="headerlink" title="@args"></a>@args</h6><p>使用“@args(注解列表)”匹配当前执行的方法传入的参数持有指定注解的执行；注解类型也必须是全限定类型名；</p><h6 id="within-1"><a href="#within-1" class="headerlink" title="@within"></a>@within</h6><p>任何目标对象对应的类型持有Secure注解的类方法</p><h6 id="annotation"><a href="#annotation" class="headerlink" title="@annotation"></a>@annotation</h6><p>使用“@annotation(注解类型)”匹配当前执行方法持有指定注解的方法；注解类型也必须是全限定类型名；</p><h6 id="bean"><a href="#bean" class="headerlink" title="bean"></a>bean</h6><p>使用“bean(Bean id或名字通配符)”匹配特定名称的Bean对象的执行方法；Spring AOP扩展的，在AspectJ中无相应概念</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP参数</title>
      <link href="/post/a4df881f.html"/>
      <url>/post/a4df881f.html</url>
      
        <content type="html"><![CDATA[<h1 id="AOP参数"><a href="#AOP参数" class="headerlink" title="AOP参数"></a>AOP参数</h1><h2 id="使用JoinPoint"><a href="#使用JoinPoint" class="headerlink" title="使用JoinPoint"></a>使用JoinPoint</h2><p>每一个通知都有可以是org.aspectj.lang.JoinPoint类型的参数作为方法的第一个参数，可以通过这个参数来查看链接点的信息。</p><a id="more"></a><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getArgs</span><span class="params">()</span></span>: 获取方法的参数.</span><br><span class="line"><span class="function"><span class="title">getThis</span><span class="params">()</span></span>: 获取代理对象.</span><br><span class="line"><span class="function"><span class="title">getTarget</span><span class="params">()</span></span>: 获取目标对象.</span><br><span class="line"><span class="function"><span class="title">getSignature</span><span class="params">()</span></span>: 获取方法签名.</span><br><span class="line"><span class="function"><span class="title">toString</span><span class="params">()</span></span>: 获取方法描述.</span><br></pre></td></tr></table></figure><p>目标类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.joinpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String hello(String name) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面类</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.spring.aop.annotation.joinpoint;</span><br><span class="line"></span><br><span class="line">import org.aspectj.lang.JoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">import org.aspectj.lang.annotation.Before;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">public <span class="keyword">class</span> MyAspect &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @<span class="constructor">Before(<span class="string">"execution(* com.morris.spring.aop.annotation.joinpoint..*.*(..))"</span>)</span></span><br><span class="line">    public void before(JoinPoint joinPoint) &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"getArgs:"</span> + <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">as</span><span class="constructor">List(<span class="params">joinPoint</span>.<span class="params">getArgs</span>()</span>).stream<span class="literal">()</span>.map(Object::toString).collect(<span class="module-access"><span class="module"><span class="identifier">Collectors</span>.</span></span>joining(<span class="string">","</span>)));</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"getThis:"</span> + joinPoint.get<span class="constructor">This()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"getTarget:"</span> + joinPoint.get<span class="constructor">Target()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"getSignature:"</span> + joinPoint.get<span class="constructor">Signature()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"toString:"</span> + joinPoint.<span class="keyword">to</span><span class="constructor">String()</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.joinpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = <span class="meta-string">"com.morris.spring.aop.annotation.joinpoint"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line">        AnnotationConfigApplicationContext annotationConfigApplicationContext = new AnnotationConfigApplicationContext(AspectTest.<span class="keyword">class</span>);</span><br><span class="line">        UserService userService = (UserService)annotationConfigApplicationContext.getBean(<span class="string">"userService"</span>);</span><br><span class="line"></span><br><span class="line">        userService.hello(<span class="string">"morris"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getArgs:morris</span><br><span class="line">getThis:com<span class="selector-class">.morris</span><span class="selector-class">.spring</span><span class="selector-class">.aop</span><span class="selector-class">.annotation</span><span class="selector-class">.joinpoint</span><span class="selector-class">.UserService</span>@<span class="number">1</span>dac5ef</span><br><span class="line">getTarget:com<span class="selector-class">.morris</span><span class="selector-class">.spring</span><span class="selector-class">.aop</span><span class="selector-class">.annotation</span><span class="selector-class">.joinpoint</span><span class="selector-class">.UserService</span>@<span class="number">1</span>dac5ef</span><br><span class="line">getSignature:String com<span class="selector-class">.morris</span><span class="selector-class">.spring</span><span class="selector-class">.aop</span><span class="selector-class">.annotation</span><span class="selector-class">.joinpoint</span><span class="selector-class">.UserService</span><span class="selector-class">.hello</span>(String)</span><br><span class="line">toString:execution(String com<span class="selector-class">.morris</span><span class="selector-class">.spring</span><span class="selector-class">.aop</span><span class="selector-class">.annotation</span><span class="selector-class">.joinpoint</span><span class="selector-class">.UserService</span><span class="selector-class">.hello</span>(String))</span><br></pre></td></tr></table></figure><p>环绕通知可以使用JoinPoint的子类ProceedingJoinPoint获取更多的方法。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Object</span> proceed() <span class="keyword">throws</span> Throwable; <span class="comment">// 执行目标方法</span></span><br><span class="line"><span class="keyword">Object</span> proceed(<span class="keyword">Object</span>[] var1) <span class="keyword">throws</span> Throwable; <span class="comment">// 设置目标方法的参数后执行目标方法</span></span><br></pre></td></tr></table></figure><h2 id="将目标方法参数传递给通知"><a href="#将目标方法参数传递给通知" class="headerlink" title="将目标方法参数传递给通知"></a>将目标方法参数传递给通知</h2><p>目标类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.parameter.pass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String hello(String name) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.parameter.pass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(<span class="meta-string">"execution(* com.morris.spring.aop.annotation.parameter.pass..*.*(..)) &amp;&amp; args(name)"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void before(String name) &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"before"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"args:"</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面类也可以使用如下的写法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.parameter.pass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(<span class="meta-string">"execution(* com.morris.spring.aop.annotation.parameter.pass..*.*(..)) &amp;&amp; args(name)"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void beforePointCut(String name) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(<span class="meta-string">"beforePointCut(name)"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void before(String name) &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"before"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"args:"</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.parameter.pass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = <span class="meta-string">"com.morris.spring.aop.annotation.parameter.pass"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line">        AnnotationConfigApplicationContext annotationConfigApplicationContext = new AnnotationConfigApplicationContext(AspectTest.<span class="keyword">class</span>);</span><br><span class="line">        UserService userService = (UserService)annotationConfigApplicationContext.getBean(<span class="string">"userService"</span>);</span><br><span class="line"></span><br><span class="line">        userService.hello(<span class="string">"morris"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">before</span></span><br><span class="line">args:morris</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP实例化模型</title>
      <link href="/post/dadae491.html"/>
      <url>/post/dadae491.html</url>
      
        <content type="html"><![CDATA[<h1 id="AOP实例化模型"><a href="#AOP实例化模型" class="headerlink" title="AOP实例化模型"></a>AOP实例化模型</h1><p>在Spring AOP中，切面类的实例只有一个，假设我们使用的切面类需要具有某种状态，以适用某些特殊情况的使用，比如多线程环境，此时单例的切面类就不符合我们的要求了。在Spring AOP中，切面类默认都是单例的，但其还支持另外两种多例的切面实例的切面，即perthis和pertarget，需要注意的是perthis和pertarget都是使用在切面类的@Aspect注解中的。这里perthis和pertarget表达式中都是指定一个切面表达式，其语义与前面讲解的this和target非常的相似。</p><a id="more"></a><p>perthis表示如果某个类的代理类符合其指定的切面表达式，那么就会为每个符合条件的目标类都声明一个切面实例；</p><p>pertarget表示如果某个目标类符合其指定的切面表达式，那么就会为每个符合条件的类声明一个切面实例。</p><p>如下是perthis和pertarget的使用语法：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">perthis</span><span class="params">(pointcut-expression)</span></span></span><br><span class="line"><span class="function"><span class="title">pertarget</span><span class="params">(pointcut-expression)</span></span></span><br></pre></td></tr></table></figure><h2 id="目标对象"><a href="#目标对象" class="headerlink" title="目标对象"></a>目标对象</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">com</span><span class="selector-class">.morris</span><span class="selector-class">.spring</span><span class="selector-class">.aop</span><span class="selector-class">.annotation</span><span class="selector-class">.perthis</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.annotation</span><span class="selector-class">.Scope</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.stereotype</span><span class="selector-class">.Service</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">Service</span></span><br><span class="line">@<span class="keyword">Scope</span>("<span class="keyword">prototype</span>")</span><br><span class="line"><span class="keyword">public</span> class UserService &#123;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">hello</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="切面类"><a href="#切面类" class="headerlink" title="切面类"></a>切面类</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.perthis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Scope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//@Aspect("pertarget(com.morris.spring.aop.annotation.perthis.UserService.hello())")</span></span><br><span class="line"><span class="comment">//@Aspect("perthis(com.morris.spring.aop.annotation.perthis.MyAspect.beforePointCut())")</span></span><br><span class="line"><span class="comment">//@Aspect("perthis(this(com.morris.spring.aop.annotation.perthis.UserService))")</span></span><br><span class="line"><span class="meta">@Aspect(<span class="meta-string">"pertarget(this(com.morris.spring.aop.annotation.perthis.UserService))"</span>)</span></span><br><span class="line"><span class="meta">@Scope(<span class="meta-string">"prototype"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(<span class="meta-string">"execution(* com.morris.spring.aop.annotation.perthis..*.*(..))"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void beforePointCut() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(<span class="meta-string">"beforePointCut()"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void before() &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="keyword">this</span>.hashCode());</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"before"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.perthis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = <span class="meta-string">"com.morris.spring.aop.annotation.perthis"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line">        AnnotationConfigApplicationContext annotationConfigApplicationContext = new AnnotationConfigApplicationContext(AspectTest.<span class="keyword">class</span>);</span><br><span class="line">        UserService userService = (UserService)annotationConfigApplicationContext.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        userService.hello();</span><br><span class="line"></span><br><span class="line">        UserService userService2 = (UserService)annotationConfigApplicationContext.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        userService2.hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1995619265</span></span><br><span class="line">before</span><br><span class="line"><span class="number">225344427</span></span><br><span class="line">before</span><br></pre></td></tr></table></figure><p>因为UserService没有实现任何接口，无法使用JDK动态代理，spring自动切换CGLIB，此时，代理对象this指向目标对象UserService的子类，目标对象target指向目标对象UserService本身。</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP引入</title>
      <link href="/post/aac96d8c.html"/>
      <url>/post/aac96d8c.html</url>
      
        <content type="html"><![CDATA[<h1 id="AOP引入"><a href="#AOP引入" class="headerlink" title="AOP引入"></a>AOP引入</h1><p>通知是对目标对象方法的增强。</p><p>引入是动态为目标对象实现新的接口，对类的增强。</p><a id="more"></a><h2 id="目标类"><a href="#目标类" class="headerlink" title="目标类"></a>目标类</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">com</span><span class="selector-class">.morris</span><span class="selector-class">.spring</span><span class="selector-class">.aop</span><span class="selector-class">.annotation</span><span class="selector-class">.introduction</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.stereotype</span><span class="selector-class">.Service</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">Service</span></span><br><span class="line"><span class="keyword">public</span> class OrderService &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.spring.aop.annotation.introduction;</span><br><span class="line"></span><br><span class="line">public<span class="built_in"> interface </span>IUserService &#123;</span><br><span class="line">String hello(String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口实现类"><a href="#接口实现类" class="headerlink" title="接口实现类"></a>接口实现类</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.annotation.introduction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">IUserService</span></span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> hello(<span class="keyword">String</span> name) &#123;</span><br><span class="line">        System.out.println(<span class="string">"hello "</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="切面类"><a href="#切面类" class="headerlink" title="切面类"></a>切面类</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">com</span><span class="selector-class">.morris</span><span class="selector-class">.spring</span><span class="selector-class">.aop</span><span class="selector-class">.annotation</span><span class="selector-class">.introduction</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.aspectj</span><span class="selector-class">.lang</span><span class="selector-class">.annotation</span><span class="selector-class">.Aspect</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.aspectj</span><span class="selector-class">.lang</span><span class="selector-class">.annotation</span><span class="selector-class">.Before</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.aspectj</span><span class="selector-class">.lang</span><span class="selector-class">.annotation</span><span class="selector-class">.DeclareParents</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.aspectj</span><span class="selector-class">.lang</span><span class="selector-class">.annotation</span><span class="selector-class">.Pointcut</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.stereotype</span><span class="selector-class">.Component</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@<span class="keyword">Component</span></span><br><span class="line">@<span class="keyword">Aspect</span></span><br><span class="line"><span class="keyword">public</span> class MyAspect &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">DeclareParents</span>(<span class="keyword">value</span> = <span class="string">"com.morris.spring.aop.annotation.introduction.*+"</span>, defaultImpl = UserServiceImpl.class)</span><br><span class="line">    private IUserService userService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.introduction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = <span class="meta-string">"com.morris.spring.aop.annotation.introduction"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line">        AnnotationConfigApplicationContext annotationConfigApplicationContext = new AnnotationConfigApplicationContext(AspectTest.<span class="keyword">class</span>);</span><br><span class="line">        IUserService userService = (IUserService)annotationConfigApplicationContext.getBean(<span class="string">"orderService"</span>);</span><br><span class="line"></span><br><span class="line">        userService.hello(<span class="string">"morris"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP通知</title>
      <link href="/post/5210c693.html"/>
      <url>/post/5210c693.html</url>
      
        <content type="html"><![CDATA[<h1 id="AOP通知"><a href="#AOP通知" class="headerlink" title="AOP通知"></a>AOP通知</h1><p>Advice(通知)：通知定义了切面的位置，应用在某个方法被调用之前？之后？还是抛出异常时？等等。</p><a id="more"></a><h2 id="通知的类型"><a href="#通知的类型" class="headerlink" title="通知的类型"></a>通知的类型</h2><ul><li>前置通知（before）: 在方法执行之前执行通知。</li><li>返回后通知（afterreturning）:    在一个方法执行之后，只有在方法成功完成时，才能执行通知。</li><li>抛出异常后通知（afterthrowing）:在一个方法执行之后，只有在方法退出抛出异常时，才能执行通知。</li><li>后置通知（after）: 在方法执行之后，不考虑其结果，执行通知，相当于afterreturning+afterthrowing。</li><li>环绕通知（around）:在方法调用之前和之后，执行通知。</li></ul><h2 id="前置通知before"><a href="#前置通知before" class="headerlink" title="前置通知before"></a>前置通知before</h2><p>目标类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.before;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String hello(String name) &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"hello "</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.before;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(<span class="meta-string">"execution(* com.morris.spring.aop.annotation.before..*.*(..))"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void beforePointCut() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(<span class="meta-string">"beforePointCut()"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void before() &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"before"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面类也可以简写如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.before;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Before;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(<span class="meta-string">"execution(* com.morris.spring.aop.annotation.before..*.*(..))"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void before() &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"before"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.before;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = <span class="meta-string">"com.morris.spring.aop.annotation.before"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line">        AnnotationConfigApplicationContext annotationConfigApplicationContext = new AnnotationConfigApplicationContext(AspectTest.<span class="keyword">class</span>);</span><br><span class="line">        UserService userService = (UserService)annotationConfigApplicationContext.getBean(<span class="string">"userService"</span>);</span><br><span class="line"></span><br><span class="line">        userService.hello(<span class="string">"morris"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">before</span></span><br><span class="line">hello morris</span><br></pre></td></tr></table></figure><h2 id="返回后通知afterreturning"><a href="#返回后通知afterreturning" class="headerlink" title="返回后通知afterreturning"></a>返回后通知afterreturning</h2><p>目标类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.afterreturning;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String hello(String name) &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"hello "</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">com</span><span class="selector-class">.morris</span><span class="selector-class">.spring</span><span class="selector-class">.aop</span><span class="selector-class">.annotation</span><span class="selector-class">.afterreturning</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.aspectj</span><span class="selector-class">.lang</span><span class="selector-class">.annotation</span>.*;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.stereotype</span><span class="selector-class">.Component</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@<span class="keyword">Component</span></span><br><span class="line">@<span class="keyword">Aspect</span></span><br><span class="line"><span class="keyword">public</span> class MyAspect &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回后通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @<span class="keyword">AfterReturning</span>(<span class="keyword">value</span> = <span class="string">"execution(* com.morris.spring.aop.annotation.afterreturning..*.*(..))"</span>, returning = <span class="string">"returnValue"</span>)</span><br><span class="line">    public void afterReturning(String returnValue) &#123;</span><br><span class="line">        <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("<span class="selector-tag">returnValue</span><span class="selector-pseudo">:"</span> + <span class="selector-tag">returnValue</span>);</span><br><span class="line">        <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("<span class="selector-tag">after</span> <span class="selector-tag">returning</span>");</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.afterreturning;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = <span class="meta-string">"com.morris.spring.aop.annotation.afterreturning"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line">        AnnotationConfigApplicationContext annotationConfigApplicationContext = new AnnotationConfigApplicationContext(AspectTest.<span class="keyword">class</span>);</span><br><span class="line">        UserService userService = (UserService) annotationConfigApplicationContext.getBean(<span class="string">"userService"</span>);</span><br><span class="line"></span><br><span class="line">        userService.hello(<span class="string">"morris"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hello</span> <span class="string">morris</span></span><br><span class="line"><span class="attr">returnValue</span>:<span class="string">hello morris</span></span><br><span class="line"><span class="attr">after</span> <span class="string">returning</span></span><br></pre></td></tr></table></figure><h2 id="抛出异常后通知afterthrowing"><a href="#抛出异常后通知afterthrowing" class="headerlink" title="抛出异常后通知afterthrowing"></a>抛出异常后通知afterthrowing</h2><p>目标类</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.annotation.afterthrowing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> hello(<span class="keyword">String</span> name) &#123;</span><br><span class="line">        System.out.println(<span class="string">"hello "</span> + name);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">RuntimeException</span>(<span class="string">"system error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">com</span><span class="selector-class">.morris</span><span class="selector-class">.spring</span><span class="selector-class">.aop</span><span class="selector-class">.annotation</span><span class="selector-class">.afterthrowing</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.aspectj</span><span class="selector-class">.lang</span><span class="selector-class">.annotation</span><span class="selector-class">.AfterThrowing</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.aspectj</span><span class="selector-class">.lang</span><span class="selector-class">.annotation</span><span class="selector-class">.Aspect</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.stereotype</span><span class="selector-class">.Component</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@<span class="keyword">Component</span></span><br><span class="line">@<span class="keyword">Aspect</span></span><br><span class="line"><span class="keyword">public</span> class MyAspect &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抛出异常后通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @<span class="keyword">AfterThrowing</span>(<span class="keyword">value</span> = <span class="string">"execution(* com.morris.spring.aop.annotation.afterthrowing..*.*(..))"</span>, throwing = <span class="string">"ex"</span>)</span><br><span class="line">    public void afterThrowing(Throwable ex) &#123;</span><br><span class="line">        <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("<span class="selector-tag">afterThrowing</span>");</span><br><span class="line">        <span class="selector-tag">ex</span><span class="selector-class">.printStackTrace</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.afterthrowing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = <span class="meta-string">"com.morris.spring.aop.annotation.afterthrowing"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line">        AnnotationConfigApplicationContext annotationConfigApplicationContext = new AnnotationConfigApplicationContext(AspectTest.<span class="keyword">class</span>);</span><br><span class="line">        UserService userService = (UserService) annotationConfigApplicationContext.getBean(<span class="string">"userService"</span>);</span><br><span class="line"></span><br><span class="line">        userService.hello(<span class="string">"morris"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">hello morris</span><br><span class="line">afterThrowing</span><br><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.RuntimeException</span>: system error</span><br><span class="line">at com<span class="selector-class">.morris</span><span class="selector-class">.spring</span><span class="selector-class">.aop</span><span class="selector-class">.annotation</span><span class="selector-class">.afterthrowing</span><span class="selector-class">.UserService</span><span class="selector-class">.hello</span>(UserService<span class="selector-class">.java</span>:<span class="number">10</span>)</span><br><span class="line">at com<span class="selector-class">.morris</span><span class="selector-class">.spring</span><span class="selector-class">.aop</span><span class="selector-class">.annotation</span><span class="selector-class">.afterthrowing</span><span class="selector-class">.UserService</span>$<span class="variable">$FastClassBySpringCGLIB</span>$<span class="variable">$a8aadecd</span>.invoke(&lt;generated&gt;)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.cglib</span><span class="selector-class">.proxy</span><span class="selector-class">.MethodProxy</span><span class="selector-class">.invoke</span>(MethodProxy<span class="selector-class">.java</span>:<span class="number">218</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.aop</span><span class="selector-class">.framework</span><span class="selector-class">.CglibAopProxy</span><span class="variable">$CglibMethodInvocation</span>.invokeJoinpoint(CglibAopProxy<span class="selector-class">.java</span>:<span class="number">769</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.aop</span><span class="selector-class">.framework</span><span class="selector-class">.ReflectiveMethodInvocation</span><span class="selector-class">.proceed</span>(ReflectiveMethodInvocation<span class="selector-class">.java</span>:<span class="number">163</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.aop</span><span class="selector-class">.framework</span><span class="selector-class">.CglibAopProxy</span><span class="variable">$CglibMethodInvocation</span>.proceed(CglibAopProxy<span class="selector-class">.java</span>:<span class="number">747</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.aop</span><span class="selector-class">.aspectj</span><span class="selector-class">.AspectJAfterThrowingAdvice</span><span class="selector-class">.invoke</span>(AspectJAfterThrowingAdvice<span class="selector-class">.java</span>:<span class="number">62</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.aop</span><span class="selector-class">.framework</span><span class="selector-class">.ReflectiveMethodInvocation</span><span class="selector-class">.proceed</span>(ReflectiveMethodInvocation<span class="selector-class">.java</span>:<span class="number">186</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.aop</span><span class="selector-class">.framework</span><span class="selector-class">.CglibAopProxy</span><span class="variable">$CglibMethodInvocation</span>.proceed(CglibAopProxy<span class="selector-class">.java</span>:<span class="number">747</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.aop</span><span class="selector-class">.interceptor</span><span class="selector-class">.ExposeInvocationInterceptor</span><span class="selector-class">.invoke</span>(ExposeInvocationInterceptor<span class="selector-class">.java</span>:<span class="number">93</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.aop</span><span class="selector-class">.framework</span><span class="selector-class">.ReflectiveMethodInvocation</span><span class="selector-class">.proceed</span>(ReflectiveMethodInvocation<span class="selector-class">.java</span>:<span class="number">186</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.aop</span><span class="selector-class">.framework</span><span class="selector-class">.CglibAopProxy</span><span class="variable">$CglibMethodInvocation</span>.proceed(CglibAopProxy<span class="selector-class">.java</span>:<span class="number">747</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.aop</span><span class="selector-class">.framework</span><span class="selector-class">.CglibAopProxy</span><span class="variable">$DynamicAdvisedInterceptor</span>.intercept(CglibAopProxy<span class="selector-class">.java</span>:<span class="number">689</span>)</span><br><span class="line">at com<span class="selector-class">.morris</span><span class="selector-class">.spring</span><span class="selector-class">.aop</span><span class="selector-class">.annotation</span><span class="selector-class">.afterthrowing</span><span class="selector-class">.UserService</span>$<span class="variable">$EnhancerBySpringCGLIB</span>$$<span class="number">105</span>a62a2.hello(&lt;generated&gt;)</span><br><span class="line">at com<span class="selector-class">.morris</span><span class="selector-class">.spring</span><span class="selector-class">.aop</span><span class="selector-class">.annotation</span><span class="selector-class">.afterthrowing</span><span class="selector-class">.AspectTest</span><span class="selector-class">.main</span>(AspectTest<span class="selector-class">.java</span>:<span class="number">17</span>)</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java<span class="selector-class">.lang</span><span class="selector-class">.RuntimeException</span>: system error</span><br><span class="line">at com<span class="selector-class">.morris</span><span class="selector-class">.spring</span><span class="selector-class">.aop</span><span class="selector-class">.annotation</span><span class="selector-class">.afterthrowing</span><span class="selector-class">.UserService</span><span class="selector-class">.hello</span>(UserService<span class="selector-class">.java</span>:<span class="number">10</span>)</span><br><span class="line">at com<span class="selector-class">.morris</span><span class="selector-class">.spring</span><span class="selector-class">.aop</span><span class="selector-class">.annotation</span><span class="selector-class">.afterthrowing</span><span class="selector-class">.UserService</span>$<span class="variable">$FastClassBySpringCGLIB</span>$<span class="variable">$a8aadecd</span>.invoke(&lt;generated&gt;)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.cglib</span><span class="selector-class">.proxy</span><span class="selector-class">.MethodProxy</span><span class="selector-class">.invoke</span>(MethodProxy<span class="selector-class">.java</span>:<span class="number">218</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.aop</span><span class="selector-class">.framework</span><span class="selector-class">.CglibAopProxy</span><span class="variable">$CglibMethodInvocation</span>.invokeJoinpoint(CglibAopProxy<span class="selector-class">.java</span>:<span class="number">769</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.aop</span><span class="selector-class">.framework</span><span class="selector-class">.ReflectiveMethodInvocation</span><span class="selector-class">.proceed</span>(ReflectiveMethodInvocation<span class="selector-class">.java</span>:<span class="number">163</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.aop</span><span class="selector-class">.framework</span><span class="selector-class">.CglibAopProxy</span><span class="variable">$CglibMethodInvocation</span>.proceed(CglibAopProxy<span class="selector-class">.java</span>:<span class="number">747</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.aop</span><span class="selector-class">.aspectj</span><span class="selector-class">.AspectJAfterThrowingAdvice</span><span class="selector-class">.invoke</span>(AspectJAfterThrowingAdvice<span class="selector-class">.java</span>:<span class="number">62</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.aop</span><span class="selector-class">.framework</span><span class="selector-class">.ReflectiveMethodInvocation</span><span class="selector-class">.proceed</span>(ReflectiveMethodInvocation<span class="selector-class">.java</span>:<span class="number">186</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.aop</span><span class="selector-class">.framework</span><span class="selector-class">.CglibAopProxy</span><span class="variable">$CglibMethodInvocation</span>.proceed(CglibAopProxy<span class="selector-class">.java</span>:<span class="number">747</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.aop</span><span class="selector-class">.interceptor</span><span class="selector-class">.ExposeInvocationInterceptor</span><span class="selector-class">.invoke</span>(ExposeInvocationInterceptor<span class="selector-class">.java</span>:<span class="number">93</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.aop</span><span class="selector-class">.framework</span><span class="selector-class">.ReflectiveMethodInvocation</span><span class="selector-class">.proceed</span>(ReflectiveMethodInvocation<span class="selector-class">.java</span>:<span class="number">186</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.aop</span><span class="selector-class">.framework</span><span class="selector-class">.CglibAopProxy</span><span class="variable">$CglibMethodInvocation</span>.proceed(CglibAopProxy<span class="selector-class">.java</span>:<span class="number">747</span>)</span><br><span class="line">at org<span class="selector-class">.springframework</span><span class="selector-class">.aop</span><span class="selector-class">.framework</span><span class="selector-class">.CglibAopProxy</span><span class="variable">$DynamicAdvisedInterceptor</span>.intercept(CglibAopProxy<span class="selector-class">.java</span>:<span class="number">689</span>)</span><br><span class="line">at com<span class="selector-class">.morris</span><span class="selector-class">.spring</span><span class="selector-class">.aop</span><span class="selector-class">.annotation</span><span class="selector-class">.afterthrowing</span><span class="selector-class">.UserService</span>$<span class="variable">$EnhancerBySpringCGLIB</span>$$<span class="number">105</span>a62a2.hello(&lt;generated&gt;)</span><br><span class="line">at com<span class="selector-class">.morris</span><span class="selector-class">.spring</span><span class="selector-class">.aop</span><span class="selector-class">.annotation</span><span class="selector-class">.afterthrowing</span><span class="selector-class">.AspectTest</span><span class="selector-class">.main</span>(AspectTest<span class="selector-class">.java</span>:<span class="number">17</span>)</span><br></pre></td></tr></table></figure><p>如果方法抛出的异常与通知方法参数的异常不匹配，将不会执行切面。</p><h2 id="后置通知after"><a href="#后置通知after" class="headerlink" title="后置通知after"></a>后置通知after</h2><p>目标类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.annotation.afterfinally;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello "</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"system error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.afterfinally;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知+切点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After(<span class="meta-string">"execution(* com.morris.spring.aop.annotation.afterfinally..*.*(..))"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void after() &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"after"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.afterfinally;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = <span class="meta-string">"com.morris.spring.aop.annotation.afterfinally"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line">        AnnotationConfigApplicationContext annotationConfigApplicationContext = new AnnotationConfigApplicationContext(AspectTest.<span class="keyword">class</span>);</span><br><span class="line">        UserService userService = (UserService)annotationConfigApplicationContext.getBean(<span class="string">"userService"</span>);</span><br><span class="line"></span><br><span class="line">        userService.hello(<span class="string">"morris"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"----------------"</span>);</span><br><span class="line">        userService.error();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="环绕通知around"><a href="#环绕通知around" class="headerlink" title="环绕通知around"></a>环绕通知around</h2><p>目标类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.around;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String hello(String name) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.around;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(<span class="meta-string">"execution(* com.morris.spring.aop.annotation.around..*.*(..))"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void around(ProceedingJoinPoint joinPoint) &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"before"</span>);</span><br><span class="line">        Arrays.asList(joinPoint.getArgs()).forEach(System.<span class="keyword">out</span>::println);</span><br><span class="line">        Object returnValue = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            returnValue = joinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"returnValue:"</span> + returnValue);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"after"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.around;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = <span class="meta-string">"com.morris.spring.aop.annotation.around"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line">        AnnotationConfigApplicationContext annotationConfigApplicationContext = new AnnotationConfigApplicationContext(AspectTest.<span class="keyword">class</span>);</span><br><span class="line">        UserService userService = (UserService)annotationConfigApplicationContext.getBean(<span class="string">"userService"</span>);</span><br><span class="line"></span><br><span class="line">        userService.hello(<span class="string">"morris"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">before</span></span><br><span class="line">morris</span><br><span class="line">returnValue:hello morris</span><br><span class="line"><span class="keyword">after</span></span><br></pre></td></tr></table></figure><h2 id="多个AOP之间的执行顺序"><a href="#多个AOP之间的执行顺序" class="headerlink" title="多个AOP之间的执行顺序"></a>多个AOP之间的执行顺序</h2><p>目标类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.annotation.afterfinally;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello "</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"system error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.afterfinally;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知+切点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After(<span class="meta-string">"execution(* com.morris.spring.aop.annotation.afterfinally..*.*(..))"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void after() &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"after"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.afterfinally;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = <span class="meta-string">"com.morris.spring.aop.annotation.afterfinally"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line">        AnnotationConfigApplicationContext annotationConfigApplicationContext = new AnnotationConfigApplicationContext(AspectTest.<span class="keyword">class</span>);</span><br><span class="line">        UserService userService = (UserService)annotationConfigApplicationContext.getBean(<span class="string">"userService"</span>);</span><br><span class="line"></span><br><span class="line">        userService.hello(<span class="string">"morris"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"----------------"</span>);</span><br><span class="line">        userService.error();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="环绕通知around-1"><a href="#环绕通知around-1" class="headerlink" title="环绕通知around"></a>环绕通知around</h2><p>目标类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String hello(String name) &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"hello "</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面类1</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.<span class="keyword">annotation</span>.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(<span class="meta-string">"execution(* com.morris.spring.aop.annotation.advice..*.*(..))"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void beforePointCut() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(<span class="meta-string">"beforePointCut()"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void around(ProceedingJoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"around begin"</span>);</span><br><span class="line">        joinPoint.proceed();</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"around end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面类1</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.<span class="keyword">annotation</span>.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(<span class="meta-string">"execution(* com.morris.spring.aop.annotation.advice..*.*(..))"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void beforePointCut() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(<span class="meta-string">"beforePointCut()"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void around2(ProceedingJoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"around2 begin"</span>);</span><br><span class="line">        joinPoint.proceed();</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"around2 end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.aop.<span class="keyword">annotation</span>.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = <span class="meta-string">"com.morris.spring.aop.annotation.advice"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line">        AnnotationConfigApplicationContext annotationConfigApplicationContext = new AnnotationConfigApplicationContext(AspectTest.<span class="keyword">class</span>);</span><br><span class="line">        UserService userService = (UserService)annotationConfigApplicationContext.getBean(<span class="string">"userService"</span>);</span><br><span class="line"></span><br><span class="line">        userService.hello(<span class="string">"morris"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">around2</span> <span class="string">begin</span></span><br><span class="line"><span class="attr">around</span> <span class="string">begin</span></span><br><span class="line"><span class="attr">hello</span> <span class="string">morris</span></span><br><span class="line"><span class="attr">around</span> <span class="string">end</span></span><br><span class="line"><span class="attr">around2</span> <span class="string">end</span></span><br></pre></td></tr></table></figure><p>结论：order越小越是最先执行，但更重要的是最先执行的最后结束,Spring AOP就是一个同心圆，要执行的方法为圆心，最外层的order最小。</p><p>@Order注解只能作用于类上，标记在方法上无效，同一个切面中，两个通知作用于同一个目标方法是无序的。</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式之静态代理</title>
      <link href="/post/3c271a1b.html"/>
      <url>/post/3c271a1b.html</url>
      
        <content type="html"><![CDATA[<h1 id="代理模式之静态代理"><a href="#代理模式之静态代理" class="headerlink" title="代理模式之静态代理"></a>代理模式之静态代理</h1><p>代理(Proxy)是一种设计模式,提供了对目标对象另外的访问方式;即通过代理对象访问目标对象.这样做的好处是:可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能.</p><a id="more"></a><p>静态代理有两种实现方式。</p><ul><li>继承</li><li>聚合</li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>代理对象直接继承目标对象。</p><p>目标对象实现的接口类</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.spring.proxy.staticproxy.inherit;</span><br><span class="line"></span><br><span class="line">public<span class="built_in"> interface </span>IUserService &#123;</span><br><span class="line">    void query();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.proxy.staticproxy.inherit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"query user from database..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理对象</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.proxy.staticproxy.inherit;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserServiceLog</span> <span class="keyword">extends</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void query() &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"log"</span>);</span><br><span class="line">        <span class="keyword">super</span>.query();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.proxy.staticproxy.inherit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        IUserService userService = <span class="keyword">new</span> <span class="type">UserServiceLog</span>();</span><br><span class="line">        userService.query();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log</span><br><span class="line">query<span class="built_in"> user </span><span class="keyword">from</span> database<span class="built_in">..</span>.</span><br></pre></td></tr></table></figure><p>总结:</p><ul><li>可以做到在不修改目标对象的功能前提下,对目标功能扩展.</li><li>因为代理对象需要继承目标对象，后续若要增加其他代理（如方法执行时间记录，事务等），每个代理需增加一个类，项目会产生太多代理类，同时，一旦接口增加方法，目标对象与代理对象都要维护。</li><li>如果代理功能要组合，如实现记录日志+事务，也得增加新的代理类。</li></ul><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p>目标对象实现的接口类</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.spring.proxy.staticproxy.composite;</span><br><span class="line"></span><br><span class="line">public<span class="built_in"> interface </span>IUserService &#123;</span><br><span class="line">    void query();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.proxy.staticproxy.composite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"query user from database..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.proxy.staticproxy.composite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceLog</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = <span class="keyword">new</span> UserService();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"log"</span>);</span><br><span class="line">        userService.query();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.spring.proxy.staticproxy.composite;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        IUserService<span class="built_in"> proxy </span>= new UserServiceLog();</span><br><span class="line">        proxy.query();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log</span><br><span class="line">query<span class="built_in"> user </span><span class="keyword">from</span> database<span class="built_in">..</span>.</span><br></pre></td></tr></table></figure><p>与通过继承实现静态代理一样会产生过多的类。</p><h2 id="聚合静态代理与装饰者模式的区别"><a href="#聚合静态代理与装饰者模式的区别" class="headerlink" title="聚合静态代理与装饰者模式的区别"></a>聚合静态代理与装饰者模式的区别</h2><p>共同点：</p><ul><li>都要实现与目标类相同的业务接口</li><li>在俩个类中都要声明目标对象</li><li>都可以在不修改目标类的前提下增强目标方法</li></ul><p>不同点：</p><ul><li>目的不同，装饰者，为了增强目标对象，静态代理为了保护和隐藏目标对象</li><li>对于目标对象的获取方式不同，装饰者通过代参构造器传入，静态代理是在无参构造器中直接创建。</li><li>功能增强的实现者不同 装饰者设计模式中存在装饰者基类，其并不能实现增强，而是由具体的装饰者进行增强的，所以其存在着”装饰者链”，而静态代理中，一般不存在父子类的关系，具体的增强，就是由代理类实现的。无需其子类完成，所以不存在链的概念。</li></ul><h3 id="装饰者模式示例"><a href="#装饰者模式示例" class="headerlink" title="装饰者模式示例"></a>装饰者模式示例</h3><p>目标对象实现接口类</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.spring.proxy.staticproxy.decorate;</span><br><span class="line"></span><br><span class="line">public<span class="built_in"> interface </span>IUserService &#123;</span><br><span class="line">    void query();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.proxy.staticproxy.decorate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"query user from database..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装饰者log</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.proxy.staticproxy.decorate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceLog</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceLog</span><span class="params">(IUserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"log"</span>);</span><br><span class="line">        userService.query();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装饰者timer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.proxy.staticproxy.decorate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceTimer</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceTimer</span><span class="params">(IUserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"timer"</span>);</span><br><span class="line">        userService.query();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.proxy.staticproxy.decorate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IUserService <span class="keyword">target</span> = <span class="keyword">new</span> UserService();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// log + logic</span></span><br><span class="line">        IUserService proxy = <span class="keyword">new</span> UserServiceLog(<span class="keyword">target</span>);</span><br><span class="line">        proxy.query();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"----------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 链式 timer + log + logic</span></span><br><span class="line">        IUserService proxy2 = <span class="keyword">new</span> UserServiceTimer(<span class="keyword">target</span>);</span><br><span class="line">        proxy2.query();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">log</span><br><span class="line">query<span class="built_in"> user </span><span class="keyword">from</span> database<span class="built_in">..</span>.</span><br><span class="line">----------</span><br><span class="line">timer</span><br><span class="line">query<span class="built_in"> user </span><span class="keyword">from</span> database<span class="built_in">..</span>.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于注解的容器配置</title>
      <link href="/post/4e06838c.html"/>
      <url>/post/4e06838c.html</url>
      
        <content type="html"><![CDATA[<h1 id="基于注解的容器配置"><a href="#基于注解的容器配置" class="headerlink" title="基于注解的容器配置"></a>基于注解的容器配置</h1><p>要开启注解，需在xml中添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><p>@Autowired实现bean的自动注入，后面会具体讲解和@Resouce的区别。<br>可用于setter方法（不一定是setter方法，可以是任意方法名）</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可用于属性：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure><p>可用于构造方法：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一些高级用法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserDao[] userDaoArray;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> List&lt;UserDao&gt; userDaoList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;<span class="built_in">String</span>, UserDao&gt; userDaoMap;</span><br></pre></td></tr></table></figure><p>spring会容器中所有的UserDao注入到数字或集合或map中，其中map的key为bean的name。</p><h2 id="Primary"><a href="#Primary" class="headerlink" title="@Primary"></a>@Primary</h2><p>因为根据类型的自动注入可能会出现多个符合条件的Bean，那么很有必要在选择的流程上拥有更多的控制权。一种解决方式就是使用Spring的@Primary注解。</p><p>@Primary表明这个Bean在被注入时拥有更高的优先级，也就是说，在自动注入时若找到多个符合条件的Bean，那么被@Primary注解的Bean将会最终被注入。</p><p>看如下示例，将firstMovieCatalog定义为主要的MovieCatalog：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Configuration</span></span><br><span class="line">public class MovieConfiguration &#123;</span><br><span class="line">    <span class="variable">@Bean</span></span><br><span class="line">    <span class="variable">@Primary</span></span><br><span class="line">    public MovieCatalog firstMovieCatalog() &#123; ... &#125;</span><br><span class="line">    <span class="variable">@Bean</span></span><br><span class="line">    public MovieCatalog secondMovieCatalog() &#123; ... &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，下面的MovieRecommender将会把firstMovieCatalog注入：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">MovieRecommender</span> &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">private</span> MovieCatalog movieCatalog;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Qualifiers"><a href="#Qualifiers" class="headerlink" title="@Qualifiers"></a>@Qualifiers</h2><p>在基于类型的自动注入中，若出现了多个实例Bean，@Primary是一个高效的方式来决定注入哪个示例。若想在选择Bean的过程中拥有更多的控制，可以使用Spring的@Qualifier注解。</p><p>可以在指定参数上使用@Qualifier，可以缩小类型匹配的范围，更容易为参数找到指定的Bean。最简单的情况如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">MovieRecommender</span> &#123;</span><br><span class="line">    <span class="variable">@Autowired</span></span><br><span class="line">    <span class="variable">@Qualifier</span>(<span class="string">"main"</span>)</span><br><span class="line">    private MovieCatalog movieCatalog;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的Bean定义如下所示。标识值为“main”的Bean将会被标记为@Qualifier(“main”)的参数所注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"example.SimpleMovieCatalog"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">qualifier</span> <span class="attr">value</span>=<span class="string">"main"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"example.SimpleMovieCatalog"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">qualifier</span> <span class="attr">value</span>=<span class="string">"action"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"movieRecommender"</span> <span class="attr">class</span>=<span class="string">"example.MovieRecommender"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>默认情况下，标识值就是Bean的名称，因此可以直接定义Bean的id为“main”来代替内部的<qualifier>元素。</qualifier></p><p>@Qualifier也可以作用于集合上，比如Set<moviecatalog>，所有符合条件的元素都将会被注入到集合中。这就意味着，@Qualifier不必只能唯一标识一个元素。</moviecatalog></p><h2 id="使用泛型作为自动注入的标识"><a href="#使用泛型作为自动注入的标识" class="headerlink" title="使用泛型作为自动注入的标识"></a>使用泛型作为自动注入的标识</h2><p>除了@Qualifier注解以外，也可以使用Java泛型作为一种模糊的标记格式。比如，假设有如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringStore <span class="title">stringStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringStore();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IntegerStore <span class="title">integerStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IntegerStore();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如以上Bean各自实现了一个泛型接口，即Store<string>和Store<integer>，可以自动注入Store接口，泛型就会被作为标志使用了：</integer></string></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Store&lt;<span class="built_in">String</span>&gt; s1; <span class="comment">// &lt;String&gt;标志，注入stringStore</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Store&lt;Integer&gt; s2; <span class="comment">// &lt;Integer&gt;标志，注入integerStore</span></span><br></pre></td></tr></table></figure><p>需要注意的是，这里会查找实现了Store<string>接口的stringStore以及实现了Store<integer>接口的integerStore。</integer></string></p><p>当自动注入列表、Map和数组时，泛型也会生效：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//注入所有实现了Store<span class="variable">&lt;Integer&gt;</span>接口的Bean，实现了Store<span class="variable">&lt;String&gt;</span>的Bean不会被注入</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">private List<span class="variable">&lt;Store&lt;Integer&gt;</span>&gt; s;</span><br></pre></td></tr></table></figure><h2 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h2><p>@Resource是jdk的注解，它可以作用于字段或Bean属性的setter方法上。</p><p>@Resource有个name属性，默认情况下，Spring把name的值作为Bean的名称进行Bean注入。若name值缺省，则使用自动生成的name属性。</p><p>跟@Autowired类似，当找到多个候选Bean时，@Resource查找一个主要的类型进行匹配。</p><h2 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h2><p>@Value用来从properties注入一个值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieRecommender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String catalog;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MovieRecommender(<span class="meta">@Value(<span class="meta-string">"<span class="subst">$&#123;catalog.name&#125;</span>"</span>)</span> String catalog) &#123;</span><br><span class="line">        <span class="keyword">this</span>.catalog = catalog;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>resources下新建application.properties，内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">catalog.name</span>=MovieCatalog</span><br></pre></td></tr></table></figure><p>还要告诉spring属性文件的路径</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Configuration</span></span><br><span class="line"><span class="variable">@PropertySource</span>(<span class="string">"classpath:application.properties"</span>)</span><br><span class="line">public class AppConfig &#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="PostConstruct和-PreDestroy"><a href="#PostConstruct和-PreDestroy" class="headerlink" title="@PostConstruct和@PreDestroy"></a>@PostConstruct和@PreDestroy</h2><p>CommonAnnotationBeanPostProcessor不仅可以识别@Resource注解，也可以识别JSR-250生命周期注解，请看电影缓存的例子：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">CachingMovieLister</span> &#123;</span><br><span class="line">    <span class="variable">@PostConstruct</span></span><br><span class="line">    public void populateMovieCache() &#123;</span><br><span class="line">        <span class="comment">//初始化之前存入电影</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">@PreDestroy</span></span><br><span class="line">    public void clearMovieCache() &#123;</span><br><span class="line">        <span class="comment">//销毁之前删除电影</span></span><br><span class="line">    &#125;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写JDK动态代理</title>
      <link href="/post/9a4416e3.html"/>
      <url>/post/9a4416e3.html</url>
      
        <content type="html"><![CDATA[<h1 id="手写JDK动态代理"><a href="#手写JDK动态代理" class="headerlink" title="手写JDK动态代理"></a>手写JDK动态代理</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><ol><li>先根据目标类和目标类所实现的接口生成java文件内容</li><li>将java文件内容生成到.java文件</li><li>编译.java文件为.class文件</li><li>加载.class文件</li><li>根据Class对象new一个对象</li></ol><a id="more"></a><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>目标类接口</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.spring.proxy.staticproxy.decorate;</span><br><span class="line"></span><br><span class="line">public<span class="built_in"> interface </span>IUserService &#123;</span><br><span class="line">    void query();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.proxy.staticproxy.decorate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"query user from database..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理对象生成类</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.proxy.dynamic.myjdk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.tools.JavaCompiler;</span><br><span class="line"><span class="keyword">import</span> javax.tools.StandardJavaFileManager;</span><br><span class="line"><span class="keyword">import</span> javax.tools.ToolProvider;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ProxyFactory &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object newProxyInstance(Object target) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Class</span> inter = target.getClass().getInterfaces()[<span class="number">0</span>]; <span class="comment">// 目标对象实现的接口</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成java文件内容</span></span><br><span class="line">        String javaFileContent = generateJavaFileContent(target);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 保存到文件</span></span><br><span class="line">            <span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"D:\\com\\google\\$Proxy.java"</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">file</span>.getParentFile().exists()) &#123;</span><br><span class="line">                <span class="keyword">file</span>.getParentFile().mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            FileWriter fileWriter = <span class="keyword">new</span> FileWriter(<span class="keyword">file</span>);</span><br><span class="line">            fileWriter.<span class="keyword">write</span>(javaFileContent);</span><br><span class="line">            fileWriter.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将java文件编译成class文件</span></span><br><span class="line">            JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();</span><br><span class="line">            StandardJavaFileManager stdManager = compiler.getStandardFileManager(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            stdManager.getJavaFileObjects(<span class="keyword">file</span>);</span><br><span class="line">            Iterable units = stdManager.getJavaFileObjects(<span class="keyword">file</span>);</span><br><span class="line">            JavaCompiler.CompilationTask t = compiler.getTask(<span class="keyword">null</span>, stdManager, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, units);</span><br><span class="line">            t.<span class="keyword">call</span>();</span><br><span class="line">            stdManager.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 加载class文件</span></span><br><span class="line">            URL[] urls = <span class="keyword">new</span> URL[]&#123;<span class="keyword">new</span> URL(<span class="string">"file:D:\\\\"</span>)&#125;;</span><br><span class="line">            URLClassLoader classLoader = <span class="keyword">new</span> URLClassLoader(urls);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">Class</span>&lt;?&gt; clazz = classLoader.loadClass(<span class="string">"com.google.$Proxy"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不能直接clazz.newInstance()，这个方法是调用无参构造方法，代理对象构造方法有个参数为target</span></span><br><span class="line">            Constructor&lt;?&gt; constructor = clazz.getConstructors()[<span class="number">0</span>];</span><br><span class="line">            Object o = constructor.newInstance(target);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * package com.google;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * import com.morris.spring.proxy.dynamic.myjdk.IUserService</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * public class $Proxy implements IUserService &#123;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * private IUserService target;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * public $Proxy(IUserService target) &#123;</span></span><br><span class="line"><span class="comment">     * this.target=target;</span></span><br><span class="line"><span class="comment">     *        &#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * public void query() &#123;</span></span><br><span class="line"><span class="comment">     * System.out.println("log");</span></span><br><span class="line"><span class="comment">     * target.query();</span></span><br><span class="line"><span class="comment">     *    &#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     * @param target</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String generateJavaFileContent(Object target) &#123;</span><br><span class="line">        <span class="keyword">Class</span> inter = target.getClass().getInterfaces()[<span class="number">0</span>]; <span class="comment">// 目标对象实现的接口</span></span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.<span class="keyword">append</span>(<span class="string">"package com.google;"</span>).<span class="keyword">append</span>(<span class="string">"\n\n"</span>);</span><br><span class="line">        sb.<span class="keyword">append</span>(<span class="string">"import "</span>).<span class="keyword">append</span>(inter.getName()).<span class="keyword">append</span>(<span class="string">";\n\n"</span>);</span><br><span class="line">        sb.<span class="keyword">append</span>(<span class="string">"public class $Proxy implements "</span>).<span class="keyword">append</span>(inter.getSimpleName()).<span class="keyword">append</span>(<span class="string">" &#123;\n\n"</span>);</span><br><span class="line">        sb.<span class="keyword">append</span>(<span class="string">"\tprivate "</span>).<span class="keyword">append</span>(inter.getSimpleName()).<span class="keyword">append</span>(<span class="string">" target;\n\n"</span>);</span><br><span class="line">        sb.<span class="keyword">append</span>(<span class="string">"\tpublic $Proxy("</span>).<span class="keyword">append</span>(inter.getSimpleName()).<span class="keyword">append</span>(<span class="string">" target) &#123;\n"</span>);</span><br><span class="line">        sb.<span class="keyword">append</span>(<span class="string">"\t\tthis.target=target;\n"</span>);</span><br><span class="line">        sb.<span class="keyword">append</span>(<span class="string">"\t&#125;\n\n"</span>);</span><br><span class="line"></span><br><span class="line">        Method[] methods = inter.getMethods();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line"></span><br><span class="line">            sb.<span class="keyword">append</span>(<span class="string">"\tpublic "</span>).<span class="keyword">append</span>(method.getReturnType().getName()).<span class="keyword">append</span>(<span class="string">" "</span>).<span class="keyword">append</span>(method.getName()).<span class="keyword">append</span>(<span class="string">"("</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">Class</span>&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line">            StringBuilder paramContent = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            StringBuilder argsContent = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterTypes.length; i++) &#123;</span><br><span class="line">                <span class="keyword">Class</span>&lt;?&gt; parameterType = parameterTypes[i];</span><br><span class="line">                paramContent.<span class="keyword">append</span>(parameterType.getSimpleName()).<span class="keyword">append</span>(<span class="string">" p"</span>).<span class="keyword">append</span>(i).<span class="keyword">append</span>(<span class="string">","</span>);</span><br><span class="line">                argsContent.<span class="keyword">append</span>(<span class="string">"p"</span>).<span class="keyword">append</span>(i).<span class="keyword">append</span>(<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String paramContentStr = <span class="string">""</span>;</span><br><span class="line">            String argsContentStr = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">if</span>(paramContent.toString().length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                paramContentStr = paramContent.substring(<span class="number">0</span>, paramContent.lastIndexOf(<span class="string">","</span>));</span><br><span class="line">                argsContentStr = argsContent.substring(<span class="number">0</span>, paramContent.lastIndexOf(<span class="string">","</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sb.<span class="keyword">append</span>(paramContentStr).<span class="keyword">append</span>(<span class="string">") &#123;\n"</span>);</span><br><span class="line">            sb.<span class="keyword">append</span>(<span class="string">"\t\tSystem.out.println(\"log\");\n"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"void"</span>.equals(method.getReturnType().getSimpleName())) &#123;</span><br><span class="line">                sb.<span class="keyword">append</span>(<span class="string">"\t\ttarget."</span>).<span class="keyword">append</span>(method.getName()).<span class="keyword">append</span>(<span class="string">"("</span>).<span class="keyword">append</span>(argsContentStr).<span class="keyword">append</span>(<span class="string">");\n"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.<span class="keyword">append</span>(<span class="string">"\t\treturn target."</span>).<span class="keyword">append</span>(method.getName()).<span class="keyword">append</span>(<span class="string">"("</span>).<span class="keyword">append</span>(argsContentStr).<span class="keyword">append</span>(<span class="string">");\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sb.<span class="keyword">append</span>(<span class="string">"\t&#125;\n\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.<span class="keyword">append</span>(<span class="string">"&#125;"</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.proxy.<span class="keyword">dynamic</span>.myjdk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        IUserService userService = (IUserService)ProxyFactory.<span class="keyword">new</span><span class="type">ProxyInstance</span>(<span class="keyword">new</span> <span class="type">UserService</span>());</span><br><span class="line">        <span class="keyword">String</span> result = userService.query();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log</span><br><span class="line">query<span class="built_in"> user </span><span class="keyword">from</span> database<span class="built_in">..</span>.</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法注入</title>
      <link href="/post/635d19ae.html"/>
      <url>/post/635d19ae.html</url>
      
        <content type="html"><![CDATA[<h1 id="方法注入"><a href="#方法注入" class="headerlink" title="方法注入"></a>方法注入</h1><p>先看一个问题：<br>UserDao.java</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.spring.methodinject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">UserDao</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>UserService.java</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.spring.methodinject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span>(<span class="params">UserDao userDao</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(userDao.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans-4.3.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.methodinject.UserDao"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.methodinject.UserService"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.methodinject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> <span class="type">ClassPathXmlApplicationContext</span>(<span class="string">"methodinject/spring.xml"</span>);</span><br><span class="line"></span><br><span class="line">        UserService userService = (UserService) applicationContext.getBean(<span class="string">"userService"</span>);</span><br><span class="line"></span><br><span class="line">        userService.hello();</span><br><span class="line">        userService.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">230835489</span></span><br><span class="line"><span class="number">230835489</span></span><br></pre></td></tr></table></figure><p>问题：userDao明明配置的是prototype类型，为啥打印出来的hashcode是一样的呢？</p><p>一个singleton类型的bean依赖一个prototype类型的bean，只会在实例化singleton类型的bean的时候，注入一次，下面会介绍两种方法解决这个问题。</p><h2 id="ApplicationContextAware"><a href="#ApplicationContextAware" class="headerlink" title="ApplicationContextAware"></a>ApplicationContextAware</h2><p>为UserService实现ApplicationContextAware接口，每次在调用hello()方法的时候从容器中取userDao，这种方法需要实现一个与业务无关的接口，对类的侵入性太大。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.methodinject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao = (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">        System.out.println(userDao.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lookup"><a href="#lookup" class="headerlink" title="lookup"></a>lookup</h2><p>spring.xml配置修改如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans-4.3.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.methodinject.UserDao"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.methodinject.UserService"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">lookup-method</span> <span class="attr">name</span>=<span class="string">"createUserDao"</span> <span class="attr">bean</span>=<span class="string">"userDao"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>UserService修改如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.methodinject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.<span class="keyword">annotation</span>.Lookup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void hello() &#123;</span><br><span class="line">        UserDao userDao = createUserDao();</span><br><span class="line">        System.<span class="keyword">out</span>.println(userDao.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Lookup(<span class="meta-string">"userDao"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> UserDao createUserDao()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bean的自动装配</title>
      <link href="/post/e7e2aa13.html"/>
      <url>/post/e7e2aa13.html</url>
      
        <content type="html"><![CDATA[<h1 id="bean的自动装配"><a href="#bean的自动装配" class="headerlink" title="bean的自动装配"></a>bean的自动装配</h1><p>自动装配就是指由Spring来自动地注入依赖对象，无需人工参与。</p><a id="more"></a><p>此处自动装配是基于xml配置，注意与@Autowire注解的区别。</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>no</td><td>不自动装配，默认值</td></tr><tr><td>byName</td><td>按名字自动装配</td></tr><tr><td>byType</td><td>按类型自动装配</td></tr><tr><td>constructor</td><td>按构造器自动装配</td></tr></tbody></table><h2 id="byName"><a href="#byName" class="headerlink" title="byName"></a>byName</h2><p>通过设置beans标签的default-autowire的属性值为byName，让spring根据bean的名字来实现自动装配。</p><p>byName会去寻找setter方法实现自动装配，没有找到就不会注入。</p><p>在根据名字注入时，将把当前Bean自己排除在外，自己不能注入自己。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans-4.3.xsd"</span> <span class="attr">default-autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.collaborator.UserDao"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.collaborator.UserService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果将default-autowire加在beans上，全局都是使用自动装配，如果只是想让某个bean实现自动装配，可以将autowire加在bean标签上，类似如下形式：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="attribute">name</span>=<span class="string">"userService"</span> <span class="attribute">class</span>=<span class="string">"com.morris.spring.collaborator.UserService"</span> <span class="attribute">autowire</span>=<span class="string">"byName"</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="byType"><a href="#byType" class="headerlink" title="byType"></a>byType</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans-4.3.xsd"</span> <span class="attr">default-autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.collaborator.UserDao"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.collaborator.UserService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过设置beans的属性default-autowire=”byType”，意思是指根据类型注入，用于setter注入，比如如果指定自动装配方式为“byType”，而userService的setUserDao方法需要注入UserDao类型数据，则Spring容器将查找UserDao类型数据，如果找到一个则注入该Bean，如果找不到将什么也不注入，如果找到多个Bean将优先注入<bean>标签“primary”属性为true的Bean，否则抛出异常来表明有个多个Bean发现但不知道使用哪个。</bean></p><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><p>功能和“byType”功能一样，根据类型注入构造器参数，只是用于构造器注入方式。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans-4.3.xsd"</span> <span class="attr">default-autowire</span>=<span class="string">"constructor"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.collaborator.UserDao"</span>/&gt;</span></span><br><span class="line">     </span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.collaborator.UserService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>依赖注入详解</title>
      <link href="/post/43c816cd.html"/>
      <url>/post/43c816cd.html</url>
      
        <content type="html"><![CDATA[<h1 id="依赖注入详解"><a href="#依赖注入详解" class="headerlink" title="依赖注入详解"></a>依赖注入详解</h1><h2 id="注入常量"><a href="#注入常量" class="headerlink" title="注入常量"></a>注入常量</h2><p>实体类</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.instantiation2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void setName(<span class="keyword">String</span> name) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>xml中的配置：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">name</span>=<span class="string">"user"</span> <span class="built_in">class</span>=<span class="string">"com.morris.spring.instantiation2.User"</span>&gt;</span><br><span class="line">     &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"name"</span> value=<span class="string">"morris"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="注入Bean-ID"><a href="#注入Bean-ID" class="headerlink" title="注入Bean ID"></a>注入Bean ID</h2><p>用于注入Bean的ID，ID是一个常量不是引用，且类似于注入常量，但提供错误验证功能，配置方式如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"user"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.morris.spring.instantiation2.User"</span>&gt;</span><br><span class="line">     &lt;property name=<span class="string">"name"</span> value=<span class="string">"morris"</span>/&gt;</span><br><span class="line">&lt;<span class="regexp">/bean&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;bean id="user2" class="com.morris.spring.instantiation2.User"&gt;</span></span><br><span class="line"><span class="regexp">     &lt;property name="name"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;idref bean="user"&gt;&lt;/i</span>dref&gt;</span><br><span class="line">     &lt;<span class="regexp">/property&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>bean&gt;</span><br></pre></td></tr></table></figure><p>等价于如下配置：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"user3"</span> <span class="built_in">class</span>=<span class="string">"com.morris.spring.instantiation2.User"</span>&gt;</span><br><span class="line">     &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"name"</span> value=<span class="string">"user"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>配置中可以看出，注入的Bean的ID是一个java.lang.String类型，即字符串类型，因此注入的同样是常量，只是具有校验功能。</p><p>第一种会检查user是否存在，然后再注入，而第二种只会注入一个user字符串。</p><h2 id="注入对象"><a href="#注入对象" class="headerlink" title="注入对象"></a>注入对象</h2><p>可以用ref引用其他对象</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"user"</span> <span class="built_in">class</span>=<span class="string">"com.morris.spring.instantiation2.User"</span>&gt;</span><br><span class="line">     &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"name"</span> value=<span class="string">"morris"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"user4"</span> <span class="built_in">class</span>=<span class="string">"com.morris.spring.instantiation2.User"</span>&gt;</span><br><span class="line">     &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"user"</span> <span class="keyword">ref</span>=<span class="string">"user"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>也可以内部定义一个bean：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"user5"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.morris.spring.instantiation2.User"</span>&gt;</span><br><span class="line">     &lt;property name=<span class="string">"user"</span>&gt;</span><br><span class="line">          &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.morris.spring.instantiation2.User"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line">     &lt;<span class="regexp">/property&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>bean&gt;</span><br></pre></td></tr></table></figure><h2 id="注入集合类"><a href="#注入集合类" class="headerlink" title="注入集合类"></a>注入集合类</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> &lt;bean id=<span class="string">"user6"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.morris.spring.instantiation2.User"</span>&gt;</span><br><span class="line">     &lt;property name=<span class="string">"list"</span>&gt;</span><br><span class="line">          &lt;list&gt;</span><br><span class="line">               &lt;value&gt;a&lt;<span class="regexp">/value&gt;</span></span><br><span class="line"><span class="regexp">               &lt;value&gt;b&lt;/</span>value&gt;</span><br><span class="line">               &lt;value&gt;c&lt;<span class="regexp">/value&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>list&gt;</span><br><span class="line">     &lt;<span class="regexp">/property&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">     &lt;property name="map"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;map&gt;</span></span><br><span class="line"><span class="regexp">               &lt;entry key="k1" value="k1"/</span>&gt;</span><br><span class="line">               &lt;entry key=<span class="string">"k2"</span> value=<span class="string">"k2"</span>/&gt;</span><br><span class="line">          &lt;<span class="regexp">/map&gt;</span></span><br><span class="line"><span class="regexp">     &lt;/</span>property&gt;</span><br><span class="line"></span><br><span class="line">     &lt;property name=<span class="string">"set"</span>&gt;</span><br><span class="line">          &lt;<span class="keyword">set</span>&gt;</span><br><span class="line">               &lt;value&gt;s1&lt;/value&gt;</span><br><span class="line">               &lt;value&gt;s2&lt;/value&gt;</span><br><span class="line">               &lt;value&gt;s3&lt;/value&gt;</span><br><span class="line">          &lt;/<span class="keyword">set</span>&gt;</span><br><span class="line">     &lt;/property&gt;</span><br><span class="line">     </span><br><span class="line">     &lt;property name="properties"&gt;</span><br><span class="line">          &lt;props&gt;</span><br><span class="line">               &lt;prop key="url"&gt;xxx&lt;/prop&gt;</span><br><span class="line">               &lt;prop key="name"&gt;xxx&lt;/prop&gt;</span><br><span class="line">          &lt;/props&gt;</span><br><span class="line">     &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="注入null和空字符串"><a href="#注入null和空字符串" class="headerlink" title="注入null和空字符串"></a>注入null和空字符串</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"user5"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.morris.spring.instantiation2.User"</span>&gt;</span><br><span class="line">     &lt;property name=<span class="string">"user"</span>&gt;</span><br><span class="line">          &lt;<span class="literal">null</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span></span><br><span class="line">     &lt;<span class="regexp">/property&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">     &lt;property name="name" value=""/</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/bean&gt;</span></span><br></pre></td></tr></table></figure><h2 id="对象图导航注入支持"><a href="#对象图导航注入支持" class="headerlink" title="对象图导航注入支持"></a>对象图导航注入支持</h2><p>所谓对象图导航是指类似a.b.c这种点缀访问形式的访问或修改值。Spring支持对象图导航方式依赖注入。对象图导航依赖注入有一个限制就是比如a.b.c对象导航图注入中a和b必须为非null值才能注入c，否则将抛出空指针异常。</p><p>Spring不仅支持对象的导航，还支持数组、列表、字典、Properties数据类型的导航，对Set数据类型无法支持，因为无法导航。</p><p>数组和列表数据类型可以用array[0]、list[1]导航，注意”[]”里的必须是数字，因为是按照索引进行导航，对于数组类型注意不要数组越界错误。</p><p>字典Map数据类型可以使用map[1]、map[str]进行导航，其中“[]”里的是基本类型，无法放置引用类型。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"something"</span> <span class="built_in">class</span>=<span class="string">"things.ThingOne"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"fred.bob.sammy"</span> value=<span class="string">"123"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环依赖</title>
      <link href="/post/fb469e4b.html"/>
      <url>/post/fb469e4b.html</url>
      
        <content type="html"><![CDATA[<h1 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h1><p>循环依赖其实就是循环引用，也就是两个或则两个以上的bean互相持有对方，最终形成闭环。比如A依赖于B，B依赖于C，C又依赖于A。</p><a id="more"></a><h2 id="spring如何检测是否存在循环依赖"><a href="#spring如何检测是否存在循环依赖" class="headerlink" title="spring如何检测是否存在循环依赖"></a>spring如何检测是否存在循环依赖</h2><p>Spring容器会将每一个正在创建的Bean标识符放在一个“当前创建Bean池”中，Bean标识符在创建过程中将一直保持在这个池中，因此如果在创建Bean过程中发现自己已经在“当前创建Bean池”里时将抛出BeanCurrentlyInCreationException异常表示循环依赖；而对于创建完毕的Bean将从“当前创建Bean池”中清除掉。</p><h2 id="构造器参数循环依赖"><a href="#构造器参数循环依赖" class="headerlink" title="构造器参数循环依赖"></a>构造器参数循环依赖</h2><p>通过构造器注入构成的循环依赖，此依赖是无法解决的，只能抛出BeanCurrentlyInCreationException异常表示循环依赖。</p><p>下面是一个A依赖B，B依赖C，C依赖A的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.cycle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> B b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A(B b) &#123;</span><br><span class="line"><span class="keyword">this</span>.b = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> B <span class="title">getB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setB</span><span class="params">(B b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.b = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.spring.cycle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">C</span> <span class="built_in">c</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">B</span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">B</span>(<span class="type">C</span> <span class="built_in">c</span>) &#123;</span><br><span class="line">this.<span class="built_in">c</span> = <span class="built_in">c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">C</span> getC() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> void setC(<span class="type">C</span> <span class="built_in">c</span>) &#123;</span><br><span class="line">this.<span class="built_in">c</span> = <span class="built_in">c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.cycle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> A a;</span><br><span class="line"></span><br><span class="line">C() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C(A a) &#123;</span><br><span class="line"><span class="keyword">this</span>.a = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> A <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setA</span><span class="params">(A a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.a = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context/spring-context-4.3.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"a"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.cycle.A"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"b"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"b"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.cycle.B"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"c"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"c"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.cycle.C"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"a"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.cycle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructCycleTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="type">ClassPathXmlApplicationContext</span>(<span class="string">"classpath:spring-cycle-construct.xml"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">八月 <span class="number">21</span>, <span class="number">2018</span> <span class="number">6</span>:<span class="number">34</span>:<span class="number">25</span> 下午 org.springframework.context.support.AbstractApplicationContext prepareRefresh</span><br><span class="line">信息: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@<span class="number">3</span>dd3bcd: startup date <span class="literal">[T<span class="identifier">ue</span> A<span class="identifier">ug</span> <span class="number">21</span> <span class="number">18</span>:<span class="number">34</span>:<span class="number">25</span> CST <span class="number">2018</span>]</span>; root <span class="keyword">of</span> context hierarchy</span><br><span class="line">八月 <span class="number">21</span>, <span class="number">2018</span> <span class="number">6</span>:<span class="number">34</span>:<span class="number">25</span> 下午 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions</span><br><span class="line">信息: Loading XML bean definitions from <span class="keyword">class</span> path resource <span class="literal">[<span class="identifier">spring</span>-<span class="identifier">cycle</span>-<span class="identifier">construct</span>.<span class="identifier">xml</span>]</span></span><br><span class="line">八月 <span class="number">21</span>, <span class="number">2018</span> <span class="number">6</span>:<span class="number">34</span>:<span class="number">28</span> 下午 org.springframework.context.support.AbstractApplicationContext refresh</span><br><span class="line">警告: Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'a'</span> defined <span class="keyword">in</span> <span class="keyword">class</span> path resource <span class="literal">[<span class="identifier">spring</span>-<span class="identifier">cycle</span>-<span class="identifier">construct</span>.<span class="identifier">xml</span>]</span>: Cannot resolve reference <span class="keyword">to</span> bean <span class="character">'b'</span> <span class="keyword">while</span> setting constructor argument; nested <span class="keyword">exception</span> is org.springframework.beans.factory.BeanCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'b'</span> defined <span class="keyword">in</span> <span class="keyword">class</span> path resource <span class="literal">[<span class="identifier">spring</span>-<span class="identifier">cycle</span>-<span class="identifier">construct</span>.<span class="identifier">xml</span>]</span>: Cannot resolve reference <span class="keyword">to</span> bean <span class="character">'c'</span> <span class="keyword">while</span> setting constructor argument; nested <span class="keyword">exception</span> is org.springframework.beans.factory.BeanCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'c'</span> defined <span class="keyword">in</span> <span class="keyword">class</span> path resource <span class="literal">[<span class="identifier">spring</span>-<span class="identifier">cycle</span>-<span class="identifier">construct</span>.<span class="identifier">xml</span>]</span>: Cannot resolve reference <span class="keyword">to</span> bean <span class="character">'a'</span> <span class="keyword">while</span> setting constructor argument; nested <span class="keyword">exception</span> is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'a'</span>: Requested bean is currently <span class="keyword">in</span> creation: Is there an unresolvable circular reference?</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> org.springframework.beans.factory.BeanCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'a'</span> defined <span class="keyword">in</span> <span class="keyword">class</span> path resource <span class="literal">[<span class="identifier">spring</span>-<span class="identifier">cycle</span>-<span class="identifier">construct</span>.<span class="identifier">xml</span>]</span>: Cannot resolve reference <span class="keyword">to</span> bean <span class="character">'b'</span> <span class="keyword">while</span> setting constructor argument; nested <span class="keyword">exception</span> is org.springframework.beans.factory.BeanCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'b'</span> defined <span class="keyword">in</span> <span class="keyword">class</span> path resource <span class="literal">[<span class="identifier">spring</span>-<span class="identifier">cycle</span>-<span class="identifier">construct</span>.<span class="identifier">xml</span>]</span>: Cannot resolve reference <span class="keyword">to</span> bean <span class="character">'c'</span> <span class="keyword">while</span> setting constructor argument; nested <span class="keyword">exception</span> is org.springframework.beans.factory.BeanCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'c'</span> defined <span class="keyword">in</span> <span class="keyword">class</span> path resource <span class="literal">[<span class="identifier">spring</span>-<span class="identifier">cycle</span>-<span class="identifier">construct</span>.<span class="identifier">xml</span>]</span>: Cannot resolve reference <span class="keyword">to</span> bean <span class="character">'a'</span> <span class="keyword">while</span> setting constructor argument; nested <span class="keyword">exception</span> is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'a'</span>: Requested bean is currently <span class="keyword">in</span> creation: Is there an unresolvable circular reference?</span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="constructor">Reference(BeanDefinitionValueResolver.<span class="params">java</span>:378)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="constructor">ValueIfNecessary(BeanDefinitionValueResolver.<span class="params">java</span>:110)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">ConstructorResolver</span>.</span></span>resolve<span class="constructor">ConstructorArguments(ConstructorResolver.<span class="params">java</span>:625)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">ConstructorResolver</span>.</span></span>autowire<span class="constructor">Constructor(ConstructorResolver.<span class="params">java</span>:153)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>autowire<span class="constructor">Constructor(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:1267)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>create<span class="constructor">BeanInstance(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:1124)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span><span class="keyword">do</span><span class="constructor">CreateBean(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:535)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>create<span class="constructor">Bean(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:495)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractBeanFactory</span>.</span></span>lambda<span class="constructor">$doGetBean$0(AbstractBeanFactory.<span class="params">java</span>:317)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">DefaultSingletonBeanRegistry</span>.</span></span>get<span class="constructor">Singleton(DefaultSingletonBeanRegistry.<span class="params">java</span>:222)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractBeanFactory</span>.</span></span><span class="keyword">do</span><span class="constructor">GetBean(AbstractBeanFactory.<span class="params">java</span>:315)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractBeanFactory</span>.</span></span>get<span class="constructor">Bean(AbstractBeanFactory.<span class="params">java</span>:199)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">DefaultListableBeanFactory</span>.</span></span>pre<span class="constructor">InstantiateSingletons(DefaultListableBeanFactory.<span class="params">java</span>:759)</span></span><br><span class="line">at org.springframework.context.support.<span class="module-access"><span class="module"><span class="identifier">AbstractApplicationContext</span>.</span></span>finish<span class="constructor">BeanFactoryInitialization(AbstractApplicationContext.<span class="params">java</span>:869)</span></span><br><span class="line">at org.springframework.context.support.<span class="module-access"><span class="module"><span class="identifier">AbstractApplicationContext</span>.</span></span>refresh(<span class="module-access"><span class="module"><span class="identifier">AbstractApplicationContext</span>.</span></span>java:<span class="number">550</span>)</span><br><span class="line">at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(<span class="module-access"><span class="module"><span class="identifier">ClassPathXmlApplicationContext</span>.</span></span>java:<span class="number">144</span>)</span><br><span class="line">at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(<span class="module-access"><span class="module"><span class="identifier">ClassPathXmlApplicationContext</span>.</span></span>java:<span class="number">85</span>)</span><br><span class="line">at com.morris.spring.cycle.<span class="module-access"><span class="module"><span class="identifier">ConstructCycleTest</span>.</span></span>main(<span class="module-access"><span class="module"><span class="identifier">ConstructCycleTest</span>.</span></span>java:<span class="number">8</span>)</span><br><span class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'b'</span> defined <span class="keyword">in</span> <span class="keyword">class</span> path resource <span class="literal">[<span class="identifier">spring</span>-<span class="identifier">cycle</span>-<span class="identifier">construct</span>.<span class="identifier">xml</span>]</span>: Cannot resolve reference <span class="keyword">to</span> bean <span class="character">'c'</span> <span class="keyword">while</span> setting constructor argument; nested <span class="keyword">exception</span> is org.springframework.beans.factory.BeanCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'c'</span> defined <span class="keyword">in</span> <span class="keyword">class</span> path resource <span class="literal">[<span class="identifier">spring</span>-<span class="identifier">cycle</span>-<span class="identifier">construct</span>.<span class="identifier">xml</span>]</span>: Cannot resolve reference <span class="keyword">to</span> bean <span class="character">'a'</span> <span class="keyword">while</span> setting constructor argument; nested <span class="keyword">exception</span> is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'a'</span>: Requested bean is currently <span class="keyword">in</span> creation: Is there an unresolvable circular reference?</span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="constructor">Reference(BeanDefinitionValueResolver.<span class="params">java</span>:378)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="constructor">ValueIfNecessary(BeanDefinitionValueResolver.<span class="params">java</span>:110)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">ConstructorResolver</span>.</span></span>resolve<span class="constructor">ConstructorArguments(ConstructorResolver.<span class="params">java</span>:625)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">ConstructorResolver</span>.</span></span>autowire<span class="constructor">Constructor(ConstructorResolver.<span class="params">java</span>:153)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>autowire<span class="constructor">Constructor(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:1267)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>create<span class="constructor">BeanInstance(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:1124)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span><span class="keyword">do</span><span class="constructor">CreateBean(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:535)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>create<span class="constructor">Bean(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:495)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractBeanFactory</span>.</span></span>lambda<span class="constructor">$doGetBean$0(AbstractBeanFactory.<span class="params">java</span>:317)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">DefaultSingletonBeanRegistry</span>.</span></span>get<span class="constructor">Singleton(DefaultSingletonBeanRegistry.<span class="params">java</span>:222)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractBeanFactory</span>.</span></span><span class="keyword">do</span><span class="constructor">GetBean(AbstractBeanFactory.<span class="params">java</span>:315)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractBeanFactory</span>.</span></span>get<span class="constructor">Bean(AbstractBeanFactory.<span class="params">java</span>:199)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="constructor">Reference(BeanDefinitionValueResolver.<span class="params">java</span>:367)</span></span><br><span class="line"><span class="operator">... </span><span class="number">17</span> more</span><br><span class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'c'</span> defined <span class="keyword">in</span> <span class="keyword">class</span> path resource <span class="literal">[<span class="identifier">spring</span>-<span class="identifier">cycle</span>-<span class="identifier">construct</span>.<span class="identifier">xml</span>]</span>: Cannot resolve reference <span class="keyword">to</span> bean <span class="character">'a'</span> <span class="keyword">while</span> setting constructor argument; nested <span class="keyword">exception</span> is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'a'</span>: Requested bean is currently <span class="keyword">in</span> creation: Is there an unresolvable circular reference?</span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="constructor">Reference(BeanDefinitionValueResolver.<span class="params">java</span>:378)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="constructor">ValueIfNecessary(BeanDefinitionValueResolver.<span class="params">java</span>:110)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">ConstructorResolver</span>.</span></span>resolve<span class="constructor">ConstructorArguments(ConstructorResolver.<span class="params">java</span>:625)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">ConstructorResolver</span>.</span></span>autowire<span class="constructor">Constructor(ConstructorResolver.<span class="params">java</span>:153)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>autowire<span class="constructor">Constructor(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:1267)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>create<span class="constructor">BeanInstance(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:1124)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span><span class="keyword">do</span><span class="constructor">CreateBean(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:535)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>create<span class="constructor">Bean(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:495)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractBeanFactory</span>.</span></span>lambda<span class="constructor">$doGetBean$0(AbstractBeanFactory.<span class="params">java</span>:317)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">DefaultSingletonBeanRegistry</span>.</span></span>get<span class="constructor">Singleton(DefaultSingletonBeanRegistry.<span class="params">java</span>:222)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractBeanFactory</span>.</span></span><span class="keyword">do</span><span class="constructor">GetBean(AbstractBeanFactory.<span class="params">java</span>:315)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractBeanFactory</span>.</span></span>get<span class="constructor">Bean(AbstractBeanFactory.<span class="params">java</span>:199)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="constructor">Reference(BeanDefinitionValueResolver.<span class="params">java</span>:367)</span></span><br><span class="line"><span class="operator">... </span><span class="number">29</span> more</span><br><span class="line">Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'a'</span>: Requested bean is currently <span class="keyword">in</span> creation: Is there an unresolvable circular reference?</span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">DefaultSingletonBeanRegistry</span>.</span></span>before<span class="constructor">SingletonCreation(DefaultSingletonBeanRegistry.<span class="params">java</span>:339)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">DefaultSingletonBeanRegistry</span>.</span></span>get<span class="constructor">Singleton(DefaultSingletonBeanRegistry.<span class="params">java</span>:215)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractBeanFactory</span>.</span></span><span class="keyword">do</span><span class="constructor">GetBean(AbstractBeanFactory.<span class="params">java</span>:315)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractBeanFactory</span>.</span></span>get<span class="constructor">Bean(AbstractBeanFactory.<span class="params">java</span>:199)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="constructor">Reference(BeanDefinitionValueResolver.<span class="params">java</span>:367)</span></span><br><span class="line"><span class="operator">... </span><span class="number">41</span> more</span><br></pre></td></tr></table></figure><p>过程分析：</p><ol><li>创建a，首先去”当前创建bean池”查找是否当前bean正在创建，如果没发现，则继续准备其需要的构造器参数”b”，并将”a”标识符放到”当前创建bean池”。</li><li>创建b，首先去”当前创建bean池”查找是否当前bean正在创建，如果没发现，则继续准备其需要的构造器参数”c”，并将”b”标识符放到”当前创建bean池”。</li><li>创建c，首先去”当前创建bean池”查找是否当前bean正在创建，如果没发现，则继续准备其需要的构造器参数”a”，并将”c”标识符放到”当前创建Bean池”。</li><li>创建a，发现该bean标识符在”当前创建bean池”中，因为表示循环依赖，抛出BeanCurrentlyInCreationException</li></ol><h2 id="setter-singleton循环依赖"><a href="#setter-singleton循环依赖" class="headerlink" title="setter singleton循环依赖"></a>setter singleton循环依赖</h2><p>setter注入方式构成的循环依赖。对于setter注入造成的依赖是通过Spring容器提前暴露刚完成构造器注入但未完成其他步骤（如setter注入）的bean来完成的，而且只能解决单例作用域的bean循环依赖。通过提前暴露一个单例工厂方法，从而使其他bean能引用到该bean，关键源码如下所示：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>Add </span>the<span class="markdown"> given singleton factory for building </span>the<span class="markdown"> specified singleton</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>if necessary.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span>To be called for eager registration of singletons, e.g. to be able to</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>resolve circular references.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@param beanName </span>the<span class="markdown"> name of </span>the<span class="markdown"> bean</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@param singletonFactory </span>the<span class="markdown"> factory for </span>the<span class="markdown"> singleton object</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line">protected <span class="keyword">void</span> addSingletonFactory(<span class="built_in">String</span> beanName, ObjectFactory&lt;?&gt; singletonFactory) &#123;</span><br><span class="line">Assert.notNull(singletonFactory, <span class="string">"Singleton factory must not be null"</span>);</span><br><span class="line">synchronized (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.singletonObjects.containsKey(beanName)) &#123;</span><br><span class="line"><span class="keyword">this</span>.singletonFactories.put(beanName, singletonFactory);</span><br><span class="line"><span class="keyword">this</span>.earlySingletonObjects.remove(beanName);</span><br><span class="line"><span class="keyword">this</span>.registeredSingletons.add(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context/spring-context-4.3.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"a"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.cycle.A"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"b"</span> <span class="attr">ref</span>=<span class="string">"b"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"b"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.cycle.B"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c"</span> <span class="attr">ref</span>=<span class="string">"c"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"c"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.cycle.C"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"a"</span> <span class="attr">ref</span>=<span class="string">"a"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>过程分析：</p><ol><li>创建a，首先根据无参构造器创建bean，并暴露一个”ObjectFactory”用于返回一个提前暴露一个创建中的bean，并将”a”标识符放到”当前创建bean池”，然后进行setter注入”b”。</li><li>创建b，首先根据无参构造器创建bean，并暴露一个”ObjectFactory”用于返回一个提前暴露一个创建中的bean，并将”b”标识符放到”当前创建bean池”，然后进行setter注入”c”。</li><li>创建c，首先根据无参构造器创建bean，并暴露一个”ObjectFactory”用于返回一个提前暴露一个创建中的bean，并将”c”标识符放到”当前创建bean池”，然后进行setter注入”a”。进行注入”a”时由于提前暴露了”ObjectFactory”工厂，从而使用它返回提前暴露一个创建中的bean。</li><li>最后在依赖注入”b”和”a”，完成setter注入。</li></ol><h2 id="setter-prototype循环依赖"><a href="#setter-prototype循环依赖" class="headerlink" title="setter prototype循环依赖"></a>setter prototype循环依赖</h2><p>对于prototype作用域bean，Spring容器无法完成依赖注入，因为Spring容器不进行缓存”prototype”作用域的bean，因此无法提前暴露一个创建中的bean。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context/spring-context-4.3.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"a"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.cycle.A"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"b"</span> <span class="attr">ref</span>=<span class="string">"b"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"b"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.cycle.B"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c"</span> <span class="attr">ref</span>=<span class="string">"c"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"c"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.cycle.C"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"a"</span> <span class="attr">ref</span>=<span class="string">"a"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.morris.spring.cycle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SettlePrototypeCycleTest</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span> <span class="type">ClassPathXmlApplicationContext</span>(<span class="string">"classpath:spring-cycle-prototype.xml"</span>);</span><br><span class="line">context.getBean(<span class="string">"a"</span>); <span class="comment">// //此时必须要获取Spring管理的实例，因为现在scope="prototype" 只有请求获取的时候才会实例化对象</span></span><br><span class="line">context.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">八月 <span class="number">22</span>, <span class="number">2018</span> <span class="number">9</span>:<span class="number">56</span>:<span class="number">44</span> 上午 org.springframework.context.support.AbstractApplicationContext prepareRefresh</span><br><span class="line">信息: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@<span class="number">3</span>dd3bcd: startup date <span class="literal">[W<span class="identifier">ed</span> A<span class="identifier">ug</span> <span class="number">22</span> <span class="number">09</span>:<span class="number">56</span>:<span class="number">44</span> CST <span class="number">2018</span>]</span>; root <span class="keyword">of</span> context hierarchy</span><br><span class="line">八月 <span class="number">22</span>, <span class="number">2018</span> <span class="number">9</span>:<span class="number">56</span>:<span class="number">44</span> 上午 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions</span><br><span class="line">信息: Loading XML bean definitions from <span class="keyword">class</span> path resource <span class="literal">[<span class="identifier">spring</span>-<span class="identifier">cycle</span>-<span class="identifier">prototype</span>.<span class="identifier">xml</span>]</span></span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> org.springframework.beans.factory.BeanCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'a'</span> defined <span class="keyword">in</span> <span class="keyword">class</span> path resource <span class="literal">[<span class="identifier">spring</span>-<span class="identifier">cycle</span>-<span class="identifier">prototype</span>.<span class="identifier">xml</span>]</span>: Cannot resolve reference <span class="keyword">to</span> bean <span class="character">'b'</span> <span class="keyword">while</span> setting bean property <span class="character">'b'</span>; nested <span class="keyword">exception</span> is org.springframework.beans.factory.BeanCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'b'</span> defined <span class="keyword">in</span> <span class="keyword">class</span> path resource <span class="literal">[<span class="identifier">spring</span>-<span class="identifier">cycle</span>-<span class="identifier">prototype</span>.<span class="identifier">xml</span>]</span>: Cannot resolve reference <span class="keyword">to</span> bean <span class="character">'c'</span> <span class="keyword">while</span> setting bean property <span class="character">'c'</span>; nested <span class="keyword">exception</span> is org.springframework.beans.factory.BeanCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'c'</span> defined <span class="keyword">in</span> <span class="keyword">class</span> path resource <span class="literal">[<span class="identifier">spring</span>-<span class="identifier">cycle</span>-<span class="identifier">prototype</span>.<span class="identifier">xml</span>]</span>: Cannot resolve reference <span class="keyword">to</span> bean <span class="character">'a'</span> <span class="keyword">while</span> setting bean property <span class="character">'a'</span>; nested <span class="keyword">exception</span> is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'a'</span>: Requested bean is currently <span class="keyword">in</span> creation: Is there an unresolvable circular reference?</span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="constructor">Reference(BeanDefinitionValueResolver.<span class="params">java</span>:378)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="constructor">ValueIfNecessary(BeanDefinitionValueResolver.<span class="params">java</span>:110)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>apply<span class="constructor">PropertyValues(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:1602)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>populate<span class="constructor">Bean(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:1354)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span><span class="keyword">do</span><span class="constructor">CreateBean(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:572)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>create<span class="constructor">Bean(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:495)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractBeanFactory</span>.</span></span><span class="keyword">do</span><span class="constructor">GetBean(AbstractBeanFactory.<span class="params">java</span>:335)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractBeanFactory</span>.</span></span>get<span class="constructor">Bean(AbstractBeanFactory.<span class="params">java</span>:199)</span></span><br><span class="line">at org.springframework.context.support.<span class="module-access"><span class="module"><span class="identifier">AbstractApplicationContext</span>.</span></span>get<span class="constructor">Bean(AbstractApplicationContext.<span class="params">java</span>:1089)</span></span><br><span class="line">at com.morris.spring.cycle.<span class="module-access"><span class="module"><span class="identifier">SettlePrototypeCycleTest</span>.</span></span>main(<span class="module-access"><span class="module"><span class="identifier">SettlePrototypeCycleTest</span>.</span></span>java:<span class="number">9</span>)</span><br><span class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'b'</span> defined <span class="keyword">in</span> <span class="keyword">class</span> path resource <span class="literal">[<span class="identifier">spring</span>-<span class="identifier">cycle</span>-<span class="identifier">prototype</span>.<span class="identifier">xml</span>]</span>: Cannot resolve reference <span class="keyword">to</span> bean <span class="character">'c'</span> <span class="keyword">while</span> setting bean property <span class="character">'c'</span>; nested <span class="keyword">exception</span> is org.springframework.beans.factory.BeanCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'c'</span> defined <span class="keyword">in</span> <span class="keyword">class</span> path resource <span class="literal">[<span class="identifier">spring</span>-<span class="identifier">cycle</span>-<span class="identifier">prototype</span>.<span class="identifier">xml</span>]</span>: Cannot resolve reference <span class="keyword">to</span> bean <span class="character">'a'</span> <span class="keyword">while</span> setting bean property <span class="character">'a'</span>; nested <span class="keyword">exception</span> is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'a'</span>: Requested bean is currently <span class="keyword">in</span> creation: Is there an unresolvable circular reference?</span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="constructor">Reference(BeanDefinitionValueResolver.<span class="params">java</span>:378)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="constructor">ValueIfNecessary(BeanDefinitionValueResolver.<span class="params">java</span>:110)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>apply<span class="constructor">PropertyValues(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:1602)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>populate<span class="constructor">Bean(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:1354)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span><span class="keyword">do</span><span class="constructor">CreateBean(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:572)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>create<span class="constructor">Bean(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:495)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractBeanFactory</span>.</span></span><span class="keyword">do</span><span class="constructor">GetBean(AbstractBeanFactory.<span class="params">java</span>:335)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractBeanFactory</span>.</span></span>get<span class="constructor">Bean(AbstractBeanFactory.<span class="params">java</span>:199)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="constructor">Reference(BeanDefinitionValueResolver.<span class="params">java</span>:367)</span></span><br><span class="line"><span class="operator">... </span><span class="number">9</span> more</span><br><span class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'c'</span> defined <span class="keyword">in</span> <span class="keyword">class</span> path resource <span class="literal">[<span class="identifier">spring</span>-<span class="identifier">cycle</span>-<span class="identifier">prototype</span>.<span class="identifier">xml</span>]</span>: Cannot resolve reference <span class="keyword">to</span> bean <span class="character">'a'</span> <span class="keyword">while</span> setting bean property <span class="character">'a'</span>; nested <span class="keyword">exception</span> is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'a'</span>: Requested bean is currently <span class="keyword">in</span> creation: Is there an unresolvable circular reference?</span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="constructor">Reference(BeanDefinitionValueResolver.<span class="params">java</span>:378)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="constructor">ValueIfNecessary(BeanDefinitionValueResolver.<span class="params">java</span>:110)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>apply<span class="constructor">PropertyValues(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:1602)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>populate<span class="constructor">Bean(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:1354)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span><span class="keyword">do</span><span class="constructor">CreateBean(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:572)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>create<span class="constructor">Bean(AbstractAutowireCapableBeanFactory.<span class="params">java</span>:495)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractBeanFactory</span>.</span></span><span class="keyword">do</span><span class="constructor">GetBean(AbstractBeanFactory.<span class="params">java</span>:335)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractBeanFactory</span>.</span></span>get<span class="constructor">Bean(AbstractBeanFactory.<span class="params">java</span>:199)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="constructor">Reference(BeanDefinitionValueResolver.<span class="params">java</span>:367)</span></span><br><span class="line"><span class="operator">... </span><span class="number">17</span> more</span><br><span class="line">Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean <span class="keyword">with</span> name <span class="character">'a'</span>: Requested bean is currently <span class="keyword">in</span> creation: Is there an unresolvable circular reference?</span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractBeanFactory</span>.</span></span><span class="keyword">do</span><span class="constructor">GetBean(AbstractBeanFactory.<span class="params">java</span>:264)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">AbstractBeanFactory</span>.</span></span>get<span class="constructor">Bean(AbstractBeanFactory.<span class="params">java</span>:199)</span></span><br><span class="line">at org.springframework.beans.factory.support.<span class="module-access"><span class="module"><span class="identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="constructor">Reference(BeanDefinitionValueResolver.<span class="params">java</span>:367)</span></span><br><span class="line"><span class="operator">... </span><span class="number">25</span> more</span><br></pre></td></tr></table></figure><h3 id="setAllowCircularReferences循环依赖开关"><a href="#setAllowCircularReferences循环依赖开关" class="headerlink" title="setAllowCircularReferences循环依赖开关"></a>setAllowCircularReferences循环依赖开关</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.cycle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisableSetterSingletonCycleTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span> <span class="type">ClassPathXmlApplicationContext</span>(<span class="string">"classpath:spring-cycle-setter.xml"</span>);</span><br><span class="line">context.setAllowCircularReferences(<span class="literal">false</span>); <span class="comment">// 禁止循环依赖</span></span><br><span class="line">context.refresh(); <span class="comment">// 不refresh不生效，原因是之前bean factory已经refresh了</span></span><br><span class="line">context.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双向链表</title>
      <link href="/post/37fd9ed5.html"/>
      <url>/post/37fd9ed5.html</url>
      
        <content type="html"><![CDATA[<h1 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h1><p>双向链表也叫双链表，是链表的一种，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。</p><a id="more"></a><h2 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h2><p><img src="https://gitee.com/morris131/morris-book/raw/master/back/datastruct/images/1575009301231.png" alt></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.data.struct.linklist;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line">import com.morris.data.struct.linklist.DoubleLinkedList.Node;</span><br><span class="line"></span><br><span class="line">public class DoubleLinkedListExample &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        // 测试双向链表 无序的增删改查</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">node1</span> = new <span class="keyword">Node</span><span class="title">(1</span>, <span class="string">"吕布"</span>);</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">node2</span> = new <span class="keyword">Node</span><span class="title">(2</span>, <span class="string">"赵子龙"</span>);</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">node3</span> = new <span class="keyword">Node</span><span class="title">(3</span>, <span class="string">"典卫"</span>);</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">node4</span> = new <span class="keyword">Node</span><span class="title">(4</span>, <span class="string">"关羽"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"----原始双向链表----"</span>);</span><br><span class="line">        DoubleLinkedList linkedList = new DoubleLinkedList();</span><br><span class="line">        linkedList.add(node1);</span><br><span class="line">        linkedList.add(node2);</span><br><span class="line">        linkedList.add(node3);</span><br><span class="line">        linkedList.add(node4);</span><br><span class="line">        linkedList.show();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"----修改no=2的name为张三----"</span>);</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">node</span> = new <span class="keyword">Node</span><span class="title">(2</span>, <span class="string">"张三"</span>);</span><br><span class="line">        linkedList.update(<span class="keyword">node</span><span class="title">);</span></span><br><span class="line"><span class="title">        linkedList</span>.show();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"----删除no=2----"</span>);</span><br><span class="line">        linkedList.remove(<span class="keyword">node</span><span class="title">);</span></span><br><span class="line"><span class="title">        linkedList</span>.show();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"当期双向链表长度："</span> + linkedList.size());     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DoubleLinkedList &#123;</span><br><span class="line"></span><br><span class="line">    // 头结点</span><br><span class="line">    private <span class="keyword">Node</span> <span class="title">head</span> = new <span class="keyword">Node</span><span class="title">(0</span>, null);</span><br><span class="line"></span><br><span class="line">    // 双向链表长度</span><br><span class="line">    private int size;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获得双向链表长度</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public int size() &#123;</span><br><span class="line">        return size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 添加节点，将节点加入到双向链表的最后</span><br><span class="line">     *</span><br><span class="line">     * @param <span class="keyword">node</span><span class="title"></span></span><br><span class="line"><span class="title">     */</span></span><br><span class="line"><span class="title">    public</span> void add(<span class="keyword">Node</span> <span class="title">node</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Node</span> <span class="title">temp</span> = head;</span><br><span class="line">        // 遍历双向链表，找出最后一个节点</span><br><span class="line">        while (temp.hasNext()) &#123;</span><br><span class="line">            temp = temp.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        temp.setNext(<span class="keyword">node</span><span class="title">);</span></span><br><span class="line"><span class="title">        node</span>.setPrev(temp);</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * A--B--&gt;C--&gt;D 删除C，直接将B.next = D</span><br><span class="line">     * 删除节点</span><br><span class="line">     *</span><br><span class="line">     * @param <span class="keyword">node</span><span class="title"></span></span><br><span class="line"><span class="title">     */</span></span><br><span class="line"><span class="title">    public</span> void remove(<span class="keyword">Node</span> <span class="title">node</span>) &#123;</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">cur</span> = head.getNext();</span><br><span class="line">        // 遍历链表</span><br><span class="line">        while (null != cur) &#123;</span><br><span class="line">            // 找到要删除的节点为cur</span><br><span class="line">            if (cur.getNo() == <span class="keyword">node</span>.<span class="title">getNo</span>()) &#123;</span><br><span class="line">                // 直接自删除，无需像双向链表一样找到前一个节点后删除</span><br><span class="line">                cur.getPrev().setNext(cur.getNext());</span><br><span class="line">                cur.getNext().setPrev(cur.getPrev());</span><br><span class="line">                size--;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"没有找到节点:"</span> + <span class="keyword">node</span>.<span class="title">getNo</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 修改节点</span><br><span class="line">     *</span><br><span class="line">     * @param <span class="keyword">node</span><span class="title"></span></span><br><span class="line"><span class="title">     */</span></span><br><span class="line"><span class="title">    public</span> void update(<span class="keyword">Node</span> <span class="title">node</span>) &#123;</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">temp</span> = head;</span><br><span class="line">        // 遍历链表</span><br><span class="line">        while (temp.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">Node</span> <span class="title">cur</span> = temp.getNext();</span><br><span class="line">            // 找到要修改的节点</span><br><span class="line">            if (cur.getNo() == <span class="keyword">node</span>.<span class="title">getNo</span>()) &#123;</span><br><span class="line">                cur.setName(<span class="keyword">node</span>.<span class="title">getName</span>());</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"没有找到节点:"</span> + <span class="keyword">node</span>.<span class="title">getNo</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查找节点</span><br><span class="line">     *</span><br><span class="line">     * @param <span class="keyword">node</span><span class="title"></span></span><br><span class="line"><span class="title">     * @return</span></span><br><span class="line">     */</span><br><span class="line">    public <span class="keyword">Node</span> <span class="title">find</span>(<span class="keyword">Node</span> <span class="title">node</span>) &#123;</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">temp</span> = head;</span><br><span class="line">        // 从头遍历双向链表</span><br><span class="line">        while (temp.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">Node</span> <span class="title">cur</span> = temp.getNext();</span><br><span class="line">            // 如果<span class="keyword">node</span>.<span class="title">no</span>相同，则表示找到了节点</span><br><span class="line">            if (cur.getNo() == <span class="keyword">node</span>.<span class="title">getNo</span>()) &#123;</span><br><span class="line">                return cur;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 打印节点</span><br><span class="line">     */</span><br><span class="line">    public void show() &#123;</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">temp</span> = head;</span><br><span class="line">        // 从头遍历双向链表</span><br><span class="line">        while (temp.hasNext()) &#123;</span><br><span class="line">            temp = temp.getNext();</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Data</span><br><span class="line">    static class <span class="keyword">Node</span> <span class="title">&#123;</span></span><br><span class="line"><span class="title">        private</span> int no; // 编号</span><br><span class="line">        private <span class="keyword">String</span> name; // 名字</span><br><span class="line"></span><br><span class="line">        private <span class="keyword">Node</span> <span class="title">next</span>; // 指向下一个节点</span><br><span class="line">        private <span class="keyword">Node</span> <span class="title">prev</span>; // 指向前一个节点</span><br><span class="line"></span><br><span class="line">        public <span class="keyword">Node</span><span class="title">(int</span> no, <span class="keyword">String</span> name) &#123;</span><br><span class="line">            this.no = no;</span><br><span class="line">            this.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 判断节点是否有下一个元素</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        public boolean hasNext() &#123;</span><br><span class="line">            return null != next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public <span class="keyword">String</span> toString() &#123;</span><br><span class="line">            return <span class="string">"Node&#123;"</span> +</span><br><span class="line">                    <span class="string">"no="</span> + no +</span><br><span class="line">                    <span class="string">", name='"</span> + name + '\'' +</span><br><span class="line">                    '&#125;';</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> datastruct </category>
          
      </categories>
      
      
        <tags>
            
            <tag> datastruct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单向循环链表</title>
      <link href="/post/e9e00e89.html"/>
      <url>/post/e9e00e89.html</url>
      
        <content type="html"><![CDATA[<h1 id="单向循环链表"><a href="#单向循环链表" class="headerlink" title="单向循环链表"></a>单向循环链表</h1><h2 id="约瑟夫（Josephu）问题"><a href="#约瑟夫（Josephu）问题" class="headerlink" title="约瑟夫（Josephu）问题"></a>约瑟夫（Josephu）问题</h2><p>设编号为1，2，… n的n个人围坐一圈，约定编号为k（1&lt;=k&lt;=n）的人从1开始报数，数到m的那个人出列，它的下一位又从1开始报数，数到m的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。</p><a id="more"></a><p><img src="https://gitee.com/morris131/morris-book/raw/master/back/datastruct/images/1574067066482.png" alt></p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>用一个不带头结点的循环链表来处理Josephu问题：先构成一个有n个结点的单循环链表（单向环形链表），然后由k结点起从1开始计数，计到m时，对应结点从链表中删除，然后再从被删除结点的下一个结点又从1开始计数，直到最后一个结点从链表中删除算法结束。</p><p><img src="https://gitee.com/morris131/morris-book/raw/master/back/datastruct/images/1574066816318.png" alt></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.data.struct.linklist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> CircularLinkedListDemo &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="comment">// 测试单向循环链表</span></span><br><span class="line">        CircularLinkedList.Node node1 = <span class="keyword">new</span> CircularLinkedList.Node(<span class="number">1</span>, <span class="string">"吕布"</span>);</span><br><span class="line">        CircularLinkedList.Node node2 = <span class="keyword">new</span> CircularLinkedList.Node(<span class="number">2</span>, <span class="string">"赵子龙"</span>);</span><br><span class="line">        CircularLinkedList.Node node3 = <span class="keyword">new</span> CircularLinkedList.Node(<span class="number">3</span>, <span class="string">"典卫"</span>);</span><br><span class="line">        CircularLinkedList.Node node4 = <span class="keyword">new</span> CircularLinkedList.Node(<span class="number">4</span>, <span class="string">"关羽"</span>);</span><br><span class="line">        CircularLinkedList.Node node5 = <span class="keyword">new</span> CircularLinkedList.Node(<span class="number">5</span>, <span class="string">"张飞"</span>);</span><br><span class="line"></span><br><span class="line">        CircularLinkedList linkedList = <span class="keyword">new</span> CircularLinkedList();</span><br><span class="line">        linkedList.add(node1);</span><br><span class="line">        linkedList.add(node2);</span><br><span class="line">        linkedList.add(node3);</span><br><span class="line">        linkedList.add(node4);</span><br><span class="line">        linkedList.add(node5);</span><br><span class="line">        linkedList.show();</span><br><span class="line"></span><br><span class="line">        linkedList.josephus(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单向循环链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> CircularLinkedList &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 头结点</span></span><br><span class="line">    <span class="keyword">private</span> Node first;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前节点</span></span><br><span class="line">    <span class="keyword">private</span> Node current;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> add(Node node) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == first) &#123;</span><br><span class="line">            <span class="comment">// 添加第一个节点</span></span><br><span class="line">            first = node; <span class="comment">// first指向新节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current.<span class="keyword">next</span> = node; <span class="comment">// 原来的current指向新节点</span></span><br><span class="line">        &#125;</span><br><span class="line">        current = node; <span class="comment">// current指向新节点</span></span><br><span class="line">        current.<span class="keyword">next</span> = first; <span class="comment">// 新节点指向first，构成环</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 约瑟夫环出列顺序</span></span><br><span class="line"><span class="comment">     * @param k 从第几个开始报数</span></span><br><span class="line"><span class="comment">     * @param m</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> josephus(<span class="keyword">int</span> k, <span class="keyword">int</span> m) &#123;</span><br><span class="line"></span><br><span class="line">        Node knode = first; <span class="comment">// 代表第一个开始报数的人</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先找到k节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= k;i ++) &#123;</span><br><span class="line">            knode = first.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">null</span> != knode &amp;&amp; knode != knode.<span class="keyword">next</span>) &#123;</span><br><span class="line"></span><br><span class="line">            Node temp = knode;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">null</span> != temp) &#123;</span><br><span class="line">                <span class="comment">// 用m-1这样就可以通过第m-1个节点移除第m个节点</span></span><br><span class="line">                <span class="keyword">if</span>(i == m-<span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.<span class="keyword">println</span>(<span class="string">"移除"</span> + temp.<span class="keyword">next</span>);</span><br><span class="line">                    knode = temp.<span class="keyword">next</span>.<span class="keyword">next</span>; <span class="comment">// 第m+1个节点为下一个报数的人</span></span><br><span class="line">                    temp.<span class="keyword">next</span> = temp.<span class="keyword">next</span>.<span class="keyword">next</span>; <span class="comment">// 移除第m个节点</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">                temp = temp.<span class="keyword">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"移除"</span> + knode); <span class="comment">// 移除最后一个节点</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> show() &#123;</span><br><span class="line"></span><br><span class="line">        Node temp = first;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">null</span> != temp) &#123;</span><br><span class="line">            System.out.<span class="keyword">println</span>(temp);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(temp == current) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            temp = temp.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Data</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> Node &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> no; <span class="comment">// 编号</span></span><br><span class="line">        <span class="keyword">private</span> String name; <span class="comment">// 名字</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Node <span class="keyword">next</span>; <span class="comment">// 指向下一个节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Node(<span class="keyword">int</span> no, String name) &#123;</span><br><span class="line">            <span class="keyword">this</span>.no = no;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 判断节点是否有下一个元素</span></span><br><span class="line"><span class="comment">         * @return</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">boolean</span> hasNext() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span> != <span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> String toString() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Node&#123;"</span> +</span><br><span class="line">                    <span class="string">"no="</span> + no +</span><br><span class="line">                    <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> datastruct </category>
          
      </categories>
      
      
        <tags>
            
            <tag> datastruct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>依赖注入DI</title>
      <link href="/post/fbe2e006.html"/>
      <url>/post/fbe2e006.html</url>
      
        <content type="html"><![CDATA[<h1 id="依赖注入DI"><a href="#依赖注入DI" class="headerlink" title="依赖注入DI"></a>依赖注入DI</h1><p>Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：</p><a id="more"></a><ul><li>谁控制谁，控制什么：传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</li><li>为何是反转，哪些方面反转了：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</li></ul><p>IOC最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫依赖查找（Dependency Lookup，简称DL）。</p><h2 id="构造方法注入"><a href="#构造方法注入" class="headerlink" title="构造方法注入"></a>构造方法注入</h2><p>若没有可能存在的歧义，无需指定index和type，sping就能自动识别。</p><h3 id="指定index"><a href="#指定index" class="headerlink" title="指定index"></a>指定index</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"user"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.morris.spring.inject.User"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">constructor</span>-arg index="0" value="zhangsan"/&gt;</span><br><span class="line">    &lt;<span class="keyword">constructor</span>-arg index="1" value="10"/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>index从0开始计数。</p><h3 id="指定type"><a href="#指定type" class="headerlink" title="指定type"></a>指定type</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"user2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.morris.spring.inject.User"</span>&gt;</span><br><span class="line">    &lt;constructor-arg <span class="class"><span class="keyword">type</span></span>=<span class="string">"java.lang.String"</span> value=<span class="string">"lisi"</span>/&gt;</span><br><span class="line">    &lt;constructor-arg <span class="class"><span class="keyword">type</span></span>=<span class="string">"java.lang.Integer"</span> value=<span class="string">"20"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="指定name"><a href="#指定name" class="headerlink" title="指定name"></a>指定name</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"user3"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.morris.spring.inject.User"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">constructor</span>-arg name="name" value="wangwu"/&gt;</span><br><span class="line">    &lt;<span class="keyword">constructor</span>-arg name="age" value="30"/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="使用c标签简化XML"><a href="#使用c标签简化XML" class="headerlink" title="使用c标签简化XML"></a>使用c标签简化XML</h3><p>加入schema<code>xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</code>,此标签为spring内置标签。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user4"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.inject.User"</span> <span class="attr">c:name</span>=<span class="string">"zhaoliu"</span> <span class="attr">c:age</span>=<span class="string">"40"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="setter方法注入"><a href="#setter方法注入" class="headerlink" title="setter方法注入"></a>setter方法注入</h2><p>setter方法是先调用无参构造方法实例化bean，然后再调用setter方法初始化属性。</p><p>使用setter方法注入，必须有一个无参构造方法。</p><p>User类</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.spring.inject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> <span class="keyword">User</span> &#123;</span><br><span class="line">    private String <span class="type">name</span>;</span><br><span class="line"></span><br><span class="line">    private <span class="type">Integer</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="keyword">User</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="keyword">User</span>(String <span class="type">name</span>, <span class="type">Integer</span> age) &#123;</span><br><span class="line">        this.name = <span class="type">name</span>;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> setName(String <span class="type">name</span>) &#123;</span><br><span class="line">        this.name = <span class="type">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> setAge(<span class="type">Integer</span> age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> setName1(String <span class="type">name</span>) &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="type">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是xml中的配置，可以用p标签简化配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans-4.3.xsd"</span>&gt;</span></span><br><span class="line">                    </span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.inject.User"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"morris"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.inject.User"</span> <span class="attr">p:name</span>=<span class="string">"morris"</span> <span class="attr">p:age</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user3"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.inject.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name1"</span> <span class="attr">value</span>=<span class="string">"morris"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring通过setter方法注入会查找set+name首字母大写的方法名，并调用，与属性名无关，方法可以有返回值。</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bean命名与实例化</title>
      <link href="/post/9e884f3d.html"/>
      <url>/post/9e884f3d.html</url>
      
        <content type="html"><![CDATA[<h1 id="bean命名与实例化"><a href="#bean命名与实例化" class="headerlink" title="bean命名与实例化"></a>bean命名与实例化</h1><h2 id="Bean的命名"><a href="#Bean的命名" class="headerlink" title="Bean的命名"></a>Bean的命名</h2><p>每个Bean可以有一个或多个id（或称之为标识符或名字），在这里我们把第一个id称为“标识符”，其余id叫做“别名”；这些id在IoC容器中必须唯一。如何为Bean指定id呢，有以下几种方式；</p><a id="more"></a><h3 id="不指定id"><a href="#不指定id" class="headerlink" title="不指定id"></a>不指定id</h3><p>不指定id，只配置必须的全限定类名，由IoC容器为其生成一个标识，客户端必须通过接口“T getBean(Class<t> requiredType)”获取Bean；</t></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.morris.spring.hello.HelloServiceImpl"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="指定id"><a href="#指定id" class="headerlink" title="指定id"></a>指定id</h3><p>指定id，必须在Ioc容器中唯一；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"helloService2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.morris.spring.hello.HelloServiceImpl"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="指定name"><a href="#指定name" class="headerlink" title="指定name"></a>指定name</h3><p>指定name，这样name就是“标识符”，必须在Ioc容器中唯一；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=<span class="string">"helloService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.morris.spring.hello.HelloServiceImpl"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="指定id和name"><a href="#指定id和name" class="headerlink" title="指定id和name"></a>指定id和name</h3><p>指定id和name，id就是标识符，而name就是别名，必须在Ioc容器中唯一；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如果id和name一样，IoC容器能检测到，并消除冲突 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService3"</span> <span class="attr">name</span>=<span class="string">"helloService3"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.hello.HelloServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="指定多个name"><a href="#指定多个name" class="headerlink" title="指定多个name"></a>指定多个name</h3><p>指定多个name，多个name用“，”、“；”、“ ”分割，第一个被用作标识符，其他的（alias1、alias2、alias3）是别名，所有标识符也必须在Ioc容器中唯一；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=<span class="string">"helloService4,alias2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.morris.spring.hello.HelloServiceImpl"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="指定别名"><a href="#指定别名" class="headerlink" title="指定别名"></a>指定别名</h3><p>使用<alias>标签指定别名，别名也必须在IoC容器中唯一</alias></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">alias</span> <span class="built_in">alias</span>=<span class="string">"alias3"</span> <span class="built_in">name</span>=<span class="string">"helloService"</span>/&gt;</span><br><span class="line">&lt;<span class="built_in">alias</span> <span class="built_in">alias</span>=<span class="string">"alias4"</span> <span class="built_in">name</span>=<span class="string">"helloService"</span>/&gt;</span><br></pre></td></tr></table></figure><p>从定义来看，name或id如果指定它们中的一个时都作为“标识符”，那为什么还要有id和name同时存在呢？这是因为当使用基于XML的配置元数据时，在XML中id是一个真正的XML id属性，因此当其他的定义来引用这个id时就体现出id的好处了，可以利用XML解析器来验证引用的这个id是否存在，从而更早的发现是否引用了一个不存在的bean，而使用name，则可能要在真正使用bean时才能发现引用一个不存在的bean。</p><p>Bean的命名遵循XML命名规范，但最好符合Java命名规范，由“字母、数字、下划线组成“，而且应该养成一个良好的命名习惯， 比如采用“驼峰式”，即第一个单词首字母开始，从第二个单词开始首字母大写开始，这样可以增加可读性。</p><h2 id="bean的实例化"><a href="#bean的实例化" class="headerlink" title="bean的实例化"></a>bean的实例化</h2><h3 id="构造方法实例化bean"><a href="#构造方法实例化bean" class="headerlink" title="构造方法实例化bean"></a>构造方法实例化bean</h3><p>使用空构造器进行定义，使用此种方式，class属性指定的类必须有空构造器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=<span class="string">"helloService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.morris.spring.hello.HelloServiceImpl"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>使用有参数构造器实例化bean下一节会讲解。</p><h3 id="静态工厂方式实例化bean"><a href="#静态工厂方式实例化bean" class="headerlink" title="静态工厂方式实例化bean"></a>静态工厂方式实例化bean</h3><p>静态工厂类HelloServiceStaticFactory</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.instantiation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.morris.spring.hello.HelloService;</span><br><span class="line"><span class="keyword">import</span> com.morris.spring.hello.HelloServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceStaticFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HelloService <span class="keyword">new</span><span class="type">Instance</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">HelloServiceImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml中的配置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="attribute">name</span>=<span class="string">"helloService"</span> <span class="attribute">class</span>=<span class="string">"com.morris.spring.instantiation.HelloServiceStaticFactory"</span> <span class="attribute">factory-method</span>=<span class="string">"newInstance"</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="实例工厂方法实例化Bean"><a href="#实例工厂方法实例化Bean" class="headerlink" title="实例工厂方法实例化Bean"></a>实例工厂方法实例化Bean</h3><p>实例工厂类HelloServiceInstanceFactory</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.instantiation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.morris.spring.hello.HelloService;</span><br><span class="line"><span class="keyword">import</span> com.morris.spring.hello.HelloServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceInstanceFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> HelloService <span class="keyword">new</span><span class="type">Instance</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">HelloServiceImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml中的配置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="attribute">name</span>=<span class="string">"helloServiceInstanceFactory"</span> <span class="attribute">class</span>=<span class="string">"com.morris.spring.instantiation.HelloServiceInstanceFactory"</span>&gt;&lt;/bean&gt;</span><br><span class="line">               </span><br><span class="line">&lt;bean <span class="attribute">name</span>=<span class="string">"helloService"</span> <span class="attribute">factory-bean</span>=<span class="string">"helloServiceInstanceFactory"</span> <span class="attribute">factory-method</span>=<span class="string">"newInstance"</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="bean的延迟初始化"><a href="#bean的延迟初始化" class="headerlink" title="bean的延迟初始化"></a>bean的延迟初始化</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">"user8"</span> <span class="attribute">class</span>=<span class="string">"com.morris.spring.instantiation2.User"</span> <span class="attribute">lazy-init</span>=<span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="使用depends-on"><a href="#使用depends-on" class="headerlink" title="使用depends-on"></a>使用depends-on</h2><p>depends-on是指指定Bean初始化及销毁时的顺序，使用depends-on属性指定的Bean要先初始化完毕后才初始化当前Bean，由于只有“singleton”Bean能被Spring管理销毁，所以当指定的Bean都是“singleton”时，使用depends-on属性指定的Bean要在指定的Bean之后销毁。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">"user9"</span> <span class="attribute">class</span>=<span class="string">"com.morris.spring.instantiation2.User"</span>/&gt;</span><br><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">"user10"</span> <span class="attribute">class</span>=<span class="string">"com.morris.spring.instantiation2.User"</span> <span class="attribute">depends-on</span>=<span class="string">"user9"</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="Bean的五种作用域"><a href="#Bean的五种作用域" class="headerlink" title="Bean的五种作用域"></a>Bean的五种作用域</h2><p>在Spring中，那些组成应用程序的主体及由Spring IoC容器所管理的对象，被称之为Bean。简单地讲，bean就是由IoC容器初始化、装配及管理的对象，除此之外，bean就与应用程序中的其他对象没有什么区别了。而bean的定义以及bean相互间的依赖关系将通过配置元数据来描述。</p><p>下面就是Spring直接支持的五种作用域了，当然开发者也可以自己定制作用域。</p><table><thead><tr><th>作用域</th><th>作用域</th></tr></thead><tbody><tr><td>singleton</td><td>容器中仅存在一个对象，默认值</td></tr><tr><td>prototype</td><td>每调用一次getBean()，都返回一个新的对象</td></tr><tr><td>request</td><td>每一个HTTP请求会产生一个Bean对象</td></tr><tr><td>session</td><td>同一个Http Session共用一个Bean</td></tr><tr><td>global session</td><td>类似于seesion作用域，仅在portletweb应用中有意义</td></tr></tbody></table><p>说明：request,session以及global session这三个作用域都是只有在基于web的SpringApplicationContext实现的（比如XmlWebApplicationContext）中才能使用。 如果开发者仅仅在常规的Spring IoC容器中比如ClassPathXmlApplicationContext中使用这些作用域，那么将会抛出一个IllegalStateException来说明使用了未知的作用域。</p><h3 id="singleton"><a href="#singleton" class="headerlink" title="singleton"></a>singleton</h3><p>当定义一个Bean的作用域为singleton时，容器只会根据Bean定义来创建该Bean的唯一实例。这些唯一的实例会缓存到容器中，后续针对单例Bean的请求和引用，都会从这个缓存中拿到这个唯一的实例。</p><p>Singleton作用域是Spring中的缺省作用域。在XML中将bean定义成singleton，可以这样配置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">"ServiceImpl"</span> <span class="attribute">class</span>=<span class="string">"com.morris.service.ServiceImpl"</span> <span class="attribute">scope</span>=<span class="string">"singleton"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><p>prototype指的就是每次请求Bean实例的时候，返回的都是新实例的Bean对象。这是基于线程安全性的考虑，对有状态的bean应该使用prototype作用域，而对无状态的bean则应该使用singleton作用域。</p><p>下面的例子展示了XML中如何定义一个原型的Bean：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">"ServiceImpl"</span> <span class="attribute">class</span>=<span class="string">"com.morris.service.ServiceImpl"</span> <span class="attribute">scope</span>=<span class="string">"prototype"</span>&gt;</span><br></pre></td></tr></table></figure><p>与其他的作用域相比，Spring是不会完全管理原型Bean的生命周期的：Spring容器只会初始化，配置以及装载这些Bean，传递给Client。但是之后就不会再去管原型Bean之后的动作了。<br>也就是说，初始化生命周期回调方法在所有作用域的Bean是都会调用的，但是销毁生命周期回调方法在原型Bean是不会调用的。所以，客户端代码必须注意清理原型Bean以及释放原型Bean所持有的一些资源。可以通过使用自定义的bean post-processor来让Spring释放掉原型Bean所持有的资源。</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个spring程序</title>
      <link href="/post/d147d42b.html"/>
      <url>/post/d147d42b.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一个spring程序"><a href="#第一个spring程序" class="headerlink" title="第一个spring程序"></a>第一个spring程序</h1><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><ol><li><p>新建一个maven项目，引入spring的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写接口HelloService.java</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.spring.hello;</span><br><span class="line"></span><br><span class="line">public<span class="built_in"> interface </span>HelloService &#123;</span><br><span class="line">    void sayHello(String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写接口实现类HelloServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写spring配置文件spring-hello.xml（位于resources/hello目录下）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans-4.3.xsd"</span>&gt;</span></span><br><span class="line">                    </span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.hello.HelloServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写测试类HelloTest.java</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        <span class="comment">//1、读取配置文件实例化一个IoC容器</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> <span class="type">ClassPathXmlApplicationContext</span>(<span class="string">"hello/spring-hello.xml"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、从容器中获取Bean，注意此处完全“面向接口编程，而不是面向实现”</span></span><br><span class="line">        HelloService helloService = (HelloService) applicationContext.getBean(<span class="string">"helloService"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、执行业务逻辑</span></span><br><span class="line">        helloService.sayHello(<span class="string">"morris"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hello morris</span></span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h2 id="详解IoC容器"><a href="#详解IoC容器" class="headerlink" title="详解IoC容器"></a>详解IoC容器</h2><p>在Spring Ioc容器的代表就是org.springframework.beans包中的BeanFactory接口，BeanFactory接口提供了IoC容器最基本功能；</p><p>而org.springframework.context包下的ApplicationContext接口扩展了BeanFactory，还提供了与Spring AOP集成、国际化处理、事件传播及提供不同层次的context实现 (如针对web应用WebApplicationContext)。</p><p>简单说，BeanFactory提供了IoC容器最基本功能，而ApplicationContext则增加了更多支持企业级功能支持。ApplicationContext完全继承BeanFactory，因而BeanFactory所具有的语义也适用于ApplicationContext。</p><p>容器实现一览：</p><ul><li>XmlBeanFactory：BeanFactory实现，提供基本的IoC容器功能，可以从classpath或文件系统等获取资源，此类已被废弃；<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> <span class="constructor">File(<span class="string">"src/main/resources/hello/spring-hello.xml"</span>)</span>;</span><br><span class="line">Resource resource = <span class="keyword">new</span> <span class="constructor">FileSystemResource(<span class="params">file</span>)</span>;</span><br><span class="line">XmlBeanFactory applicationContext = <span class="keyword">new</span> <span class="constructor">XmlBeanFactory(<span class="params">resource</span>)</span>;</span><br><span class="line">HelloService helloService = (HelloService) applicationContext.get<span class="constructor">Bean(<span class="string">"helloService"</span>)</span>;</span><br><span class="line">helloService.say<span class="constructor">Hello(<span class="string">"morris"</span>)</span>;</span><br></pre></td></tr></table></figure></li><li>ClassPathXmlApplicationContext：ApplicationContext实现，从classpath获取配置文件；</li><li>FileSystemXmlApplicationContext：ApplicationContext实现，从文件系统获取配置文件<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FileSystemXmlApplicationContext applicationContext = <span class="keyword">new</span> <span class="constructor">FileSystemXmlApplicationContext(<span class="string">"src/main/resources/hello/spring-hello.xml"</span>)</span>;</span><br><span class="line">HelloService helloService = (HelloService) applicationContext.get<span class="constructor">Bean(<span class="string">"helloService"</span>)</span>;</span><br><span class="line">helloService.say<span class="constructor">Hello(<span class="string">"morris"</span>)</span>;</span><br></pre></td></tr></table></figure></li></ul><p>ApplicationContext接口获取Bean方法简介：</p><ul><li>Object getBean(String name) 根据名称返回一个Bean，客户端需要自己进行类型转换；</li><li>T getBean(String name, Class<t> requiredType) 根据名称和指定的类型返回一个Bean，客户端无需自己进行类型转换，如果类型转换失败，容器抛出异常；</t></li><li>T getBean(Class<t> requiredType) 根据指定的类型返回一个Bean，客户端无需自己进行类型转换，如果没有或有多于一个Bean存在容器将抛出异常；</t></li><li>Map&lt;String, T&gt; getBeansOfType(Class<t> type) 根据指定的类型返回一个键值为名字和值为Bean对象的 Map，如果没有Bean对象存在则返回空的Map。</t></li></ul><p>让我们来看下IoC容器到底是如何工作。在此我们以xml配置方式来分析一下：</p><ol><li>准备配置文件：就像前边Hello World配置文件一样，在配置文件中声明Bean定义也就是为Bean配置元数据。</li><li>由IoC容器进行解析元数据： IoC容器的Bean Reader读取并解析配置文件，根据定义生成BeanDefinition配置元数据对象，IoC容器根据BeanDefinition进行实例化、配置及组装Bean。</li><li>实例化IoC容器：由客户端实例化容器，获取需要的Bean。</li></ol>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring概述</title>
      <link href="/post/28c809da.html"/>
      <url>/post/28c809da.html</url>
      
        <content type="html"><![CDATA[<h1 id="spring概述"><a href="#spring概述" class="headerlink" title="spring概述"></a>spring概述</h1><h2 id="Spring是什么"><a href="#Spring是什么" class="headerlink" title="Spring是什么"></a>Spring是什么</h2><p>Spring是一个开源的轻量级Java SE（Java 标准版本）/Java EE（Java 企业版本）开发应用框架，其目的是用于简化企业级应用程序开发。</p><a id="more"></a><h2 id="Spring能帮我们做什么"><a href="#Spring能帮我们做什么" class="headerlink" title="Spring能帮我们做什么"></a>Spring能帮我们做什么</h2><p>Spring除了不能帮我们写业务逻辑，其余的几乎什么都能帮助我们简化开发：</p><ul><li>Spring能帮我们根据配置文件创建及组装对象之间的依赖关系。</li><li>Spring面向切面编程能帮助我们无耦合的实现日志记录，性能统计，安全控制。</li><li>Spring能非常简单的帮我们管理数据库事务。</li><li>Spring还提供了与第三方数据访问框架（如Hibernate、JPA）无缝集成，而且自己也提供了一套JDBC访问模板，来方便数据库访问。</li><li>Spring还提供与第三方Web（如Struts、JSF）框架无缝集成，而且自己也提供了一套Spring MVC框架，来方便web层搭建。</li><li>Spring能方便的与Java EE（如Java Mail、任务调度）整合，与更多技术整合（比如缓存框架）。</li></ul><h2 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a>几个概念</h2><ul><li>应用程序：是能完成我们所需要功能的成品，比如购物网站、OA系统。</li><li>框架：是能完成一定功能的半成品，比如我们可以使用框架进行购物网站开发；框架做一部分功能，我们自己做一部分功能，这样应用程序就创建出来了。而且框架规定了你在开发应用程序时的整体架构，提供了一些基础功能，还规定了类和对象的如何创建、如何协作等，从而简化我们开发，让我们专注于业务逻辑开发。</li><li>非侵入式设计：从框架角度可以这样理解，无需继承框架提供的类，这种设计就可以看作是非侵入式设计，如果继承了这些框架类，就是侵入设计，如果以后想更换框架之前写过的代码几乎无法重用，如果非侵入式设计则之前写过的代码仍然可以继续使用。</li><li>轻量级及重量级：轻量级是相对于重量级而言的，轻量级一般就是非入侵性的、所依赖的东西非常少、资源占用非常少、部署简单等等，其实就是比较容易使用，而重量级正好相反。</li><li>POJO：POJO（Plain Old Java Objects）简单的Java对象，它可以包含业务逻辑或持久化逻辑，但不担当任何特殊角色且不继承或不实现任何其它Java框架的类或接口。</li><li>容器：在日常生活中容器就是一种盛放东西的器具，从程序设计角度看就是装对象的的对象，因为存在放入、拿出等操作，所以容器还要管理对象的生命周期。</li><li>控制反转：即Inversion of Control，缩写为IoC，控制反转还有一个名字叫做依赖注入（Dependency Injection），就是由容器控制程序之间的关系，而非传统实现中，由程序代码直接操控。</li><li>Bean：一般指容器管理对象，在Spring中指Spring IoC容器管理对象。</li></ul><h2 id="Spring的优点"><a href="#Spring的优点" class="headerlink" title="Spring的优点"></a>Spring的优点</h2><ul><li>非常轻量级的容器：以集中的、自动化的方式进行应用程序对象创建和装配，负责对象创建和装配，管理对象生命周期，能组合成复杂的应用程序。Spring容器是非侵入式的（不需要依赖任何Spring特定类），而且完全采用POJOs进行开发，使应用程序更容易测试、更容易管理。</li><li>AOP：AOP是Aspect Oriented Programming的缩写，意思是面向切面编程，提供从另一个角度来考虑程序结构以完善面向对象编程（相对于OOP），即可以通过在编译期间、装载期间或运行期间实现在不修改源代码的情况下给程序动态添加功能的一种技术。通俗点说就是把可重用的功能提取出来，然后将这些通用功能在合适的时候织入到应用程序中；比如安全，日记记录，这些都是通用的功能，我们可以把它们提取出来，然后在程序执行的合适地方织入这些代码并执行它们，从而完成需要的功能并复用了这些功能。</li><li>简单的数据库事务管理：在使用数据库的应用程序当中，自己管理数据库事务是一项很让人头疼的事，而且很容易出现错误，Spring支持可插入的事务管理支持，而且无需JEE环境支持，通过Spring管理事务可以把我们从事务管理中解放出来来专注业务逻辑。</li><li>JDBC抽象及ORM框架支持：Spring使JDBC更加容易使用；提供DAO（数据访问对象）支持，非常方便集成第三方ORM框架，比如Hibernate等；并且完全支持Spring事务和使用Spring提供的一致的异常体系。</li><li>灵活的Web层支持：Spring本身提供一套非常强大的MVC框架，而且可以非常容易的与第三方MVC框架集成，比如Struts等。</li><li>简化各种技术集成：提供对Java Mail、任务调度、JMX、JMS、JNDI、EJB、动态语言、远程访问、Web Service等的集成。</li></ul><h2 id="spring架构图"><a href="#spring架构图" class="headerlink" title="spring架构图"></a>spring架构图</h2><p><img src="https://gitee.com/morris131/morris-book/raw/master/back/java/spring/images/1574309046506.jpg" alt></p><p>核心容器：包括Core、Beans、Context、EL模块。</p><ul><li>Core模块：封装了框架依赖的最底层部分，包括资源访问、类型转换及一些常用工具类。</li><li>Beans模块：提供了框架的基础部分，包括反转控制和依赖注入。其中Bean Factory是容器核心，本质是“工厂设计模式”的实现，而且无需编程实现“单例设计模式”，单例完全由容器控制，而且提倡面向接口编程，而非面向实现编程；所有应用程序对象及对象间关系由框架管理，从而真正把你从程序逻辑中把维护对象之间的依赖关系提取出来，所有这些依赖关系都由BeanFactory来维护。</li><li>Context模块：以Core和Beans为基础，集成Beans模块功能并添加资源绑定、数据验证、国际化、Java EE支持、容器生命周期、事件传播等；核心接口是ApplicationContext。</li><li>EL模块：提供强大的表达式语言支持，支持访问和修改属性值，方法调用，支持访问及修改数组、容器和索引器，命名变量，支持算数和逻辑运算，支持从Spring 容器获取Bean，它也支持列表投影、选择和一般的列表聚合等。</li></ul><p>AOP、Aspects模块：</p><ul><li>AOP模块：Spring AOP模块提供了符合 AOP Alliance规范的面向方面的编程（aspect-oriented programming）实现，提供比如日志记录、权限控制、性能统计等通用功能和业务逻辑分离的技术，并且能动态的把这些功能添加到需要的代码中；这样各专其职，降低业务逻辑和通用功能的耦合。</li><li>Aspects模块：提供了对AspectJ的集成，AspectJ提供了比Spring ASP更强大的功能。</li></ul><p>数据访问/集成模块：该模块包括了JDBC、ORM、OXM、JMS和事务管理。</p><ul><li>事务模块：该模块用于Spring管理事务，只要是Spring管理对象都能得到Spring管理事务的好处，无需在代码中进行事务控制了，而且支持编程和声明性的事物管理。</li><li>JDBC模块：提供了一个JBDC的样例模板，使用这些模板能消除传统冗长的JDBC编码还有必须的事务控制，而且能享受到Spring管理事务的好处。</li><li>ORM模块：提供与流行的“对象-关系”映射框架的无缝集成，包括Hibernate、JPA、Ibatiss等。而且可以使用Spring事务管理，无需额外控制事务。</li><li>OXM模块：提供了一个对Object/XML映射实现，将java对象映射成XML数据，或者将XML数据映射成java对象，Object/XML映射实现包括JAXB、Castor、XMLBeans和XStream。</li><li>JMS模块：用于JMS(Java Messaging Service)，提供一套 “消息生产者、消息消费者”模板用于更加简单的使用JMS，JMS用于用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</li><li>Web/Remoting模块：Web/Remoting模块包含了Web、Web-Servlet、Web-Struts、Web-Porlet模块。</li><li>Web模块：提供了基础的web功能。例如多文件上传、集成IoC容器、远程过程访问（RMI、Hessian、Burlap）以及Web Service支持，并提供一个RestTemplate类来提供方便的Restful services访问。</li><li>Web-Servlet模块：提供了一个Spring MVC Web框架实现。Spring MVC框架提供了基于注解的请求资源注入、更简单的数据绑定、数据验证等及一套非常易用的JSP标签，完全无缝与Spring其他技术协作。</li><li>Web-Struts模块：提供了与Struts无缝集成，Struts1.x 和Struts2.x都支持</li></ul><p>Test模块： Spring支持Junit和TestNG测试框架，而且还额外提供了一些基于Spring的测试功能，比如在测试Web框架时，模拟Http请求的功能。</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日期的使用与格式化</title>
      <link href="/post/4043d4a7.html"/>
      <url>/post/4043d4a7.html</url>
      
        <content type="html"><![CDATA[<h1 id="日期的使用与格式化"><a href="#日期的使用与格式化" class="headerlink" title="日期的使用与格式化"></a>日期的使用与格式化</h1><h2 id="LocalDate"><a href="#LocalDate" class="headerlink" title="LocalDate"></a>LocalDate</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 日期</span></span><br><span class="line">LocalDate localDate = <span class="module-access"><span class="module"><span class="identifier">LocalDate</span>.</span></span>now<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(localDate);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(localDate.get<span class="constructor">Year()</span>); <span class="comment">// 年</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(localDate.get<span class="constructor">Month()</span>); <span class="comment">// 月</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(localDate.get<span class="constructor">MonthValue()</span>); <span class="comment">// 月</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(localDate.get<span class="constructor">DayOfMonth()</span>); <span class="comment">// 日</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(localDate.at<span class="constructor">StartOfDay()</span>); <span class="comment">// 获取今天的开始时间</span></span><br><span class="line"></span><br><span class="line">LocalDate localDate1 = <span class="module-access"><span class="module"><span class="identifier">LocalDate</span>.</span></span><span class="keyword">of</span>(<span class="number">2019</span>, <span class="number">10</span>, <span class="number">18</span>);</span><br><span class="line">LocalDate localDate2 = <span class="module-access"><span class="module"><span class="identifier">LocalDate</span>.</span></span><span class="keyword">of</span>(<span class="number">2019</span>, <span class="number">10</span>, <span class="number">17</span>);</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(localDate1.is<span class="constructor">Before(<span class="params">localDate2</span>)</span>);</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(localDate1.plus<span class="constructor">Days(110)</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(localDate1.minus<span class="constructor">Months(18)</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="LocalTime"><a href="#LocalTime" class="headerlink" title="LocalTime"></a>LocalTime</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时间</span></span><br><span class="line">LocalTime localTime = <span class="module-access"><span class="module"><span class="identifier">LocalTime</span>.</span></span>now<span class="literal">()</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(localTime);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(localTime.get<span class="constructor">Hour()</span>); <span class="comment">// 时</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(localTime.get<span class="constructor">Minute()</span>); <span class="comment">// 分</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(localTime.get<span class="constructor">Second()</span>); <span class="comment">// 秒</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(localTime.get<span class="constructor">Nano()</span>); <span class="comment">// 纳秒</span></span><br></pre></td></tr></table></figure><h2 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时间 + 日期</span></span><br><span class="line">LocalDateTime localDateTime = <span class="module-access"><span class="module"><span class="identifier">LocalDateTime</span>.</span></span><span class="keyword">of</span>(localDate, localTime);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(localDateTime);</span><br></pre></td></tr></table></figure><h2 id="Instant"><a href="#Instant" class="headerlink" title="Instant"></a>Instant</h2><p>Instant类用于处理机器可读的时间格式，它将日期时间存储在unix时间戳中。</p><p>通过这种方式获取的时间戳与北京时间相差8个时区。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Instant instant = <span class="module-access"><span class="module"><span class="identifier">Instant</span>.</span></span>now<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(instant.<span class="keyword">to</span><span class="constructor">EpochMilli()</span>); <span class="comment">// 时间戳 毫秒 13位</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(instant.get<span class="constructor">EpochSecond()</span>); <span class="comment">// 时间戳 秒 10位</span></span><br></pre></td></tr></table></figure><h2 id="Duration"><a href="#Duration" class="headerlink" title="Duration"></a>Duration</h2><p>Duration用于表示两个时间之间的差值。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LocalTime localTime1 = <span class="module-access"><span class="module"><span class="identifier">LocalTime</span>.</span></span>now<span class="literal">()</span>;</span><br><span class="line">LocalTime localTime2 = localTime1.plus<span class="constructor">Seconds(100)</span>;</span><br><span class="line"></span><br><span class="line">Duration duration = <span class="module-access"><span class="module"><span class="identifier">Duration</span>.</span></span>between(localTime1, localTime2);</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(duration.get<span class="constructor">Seconds()</span>);</span><br></pre></td></tr></table></figure><h2 id="Period"><a href="#Period" class="headerlink" title="Period"></a>Period</h2><p>Duration用于表示两个日期之间的差值。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate1 = <span class="module-access"><span class="module"><span class="identifier">LocalDate</span>.</span></span><span class="keyword">of</span>(<span class="number">2019</span>, <span class="number">10</span>, <span class="number">18</span>);</span><br><span class="line">LocalDate localDate2 = <span class="module-access"><span class="module"><span class="identifier">LocalDate</span>.</span></span><span class="keyword">of</span>(<span class="number">2019</span>, <span class="number">10</span>, <span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">Period period = <span class="module-access"><span class="module"><span class="identifier">Period</span>.</span></span>between(localDate1, localDate2);</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(period.get<span class="constructor">Days()</span>);</span><br></pre></td></tr></table></figure><h2 id="解析与格式化"><a href="#解析与格式化" class="headerlink" title="解析与格式化"></a>解析与格式化</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 时间-&gt;字符串</span></span><br><span class="line">LocalDate localDate = <span class="module-access"><span class="module"><span class="identifier">LocalDate</span>.</span></span>now<span class="literal">()</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(localDate.format(DateTimeFormatter.ISO_DATE));</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(localDate.format(<span class="module-access"><span class="module"><span class="identifier">DateTimeFormatter</span>.</span></span><span class="keyword">of</span><span class="constructor">Pattern(<span class="string">"yyyy/MM/dd"</span>)</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串-&gt;时间</span></span><br><span class="line">LocalDate date = <span class="module-access"><span class="module"><span class="identifier">LocalDate</span>.</span></span>parse(<span class="string">"2019-10-18"</span>, DateTimeFormatter.ISO_DATE);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(date);</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">LocalDateTime</span>.</span></span>now<span class="literal">()</span>.format(<span class="module-access"><span class="module"><span class="identifier">DateTimeFormatter</span>.</span></span><span class="keyword">of</span><span class="constructor">Pattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span>));</span><br></pre></td></tr></table></figure><h2 id="与旧Date-API的转换"><a href="#与旧Date-API的转换" class="headerlink" title="与旧Date API的转换"></a>与旧Date API的转换</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// <span class="type">Date</span> <span class="keyword">to</span> Instant</span><br><span class="line">Instant <span class="type">timestamp</span> = <span class="built_in">new</span> <span class="type">Date</span>().toInstant();</span><br><span class="line"></span><br><span class="line">// <span class="type">Date</span> <span class="keyword">to</span> LocalDateTime</span><br><span class="line">ZoneId <span class="type">zone</span> = ZoneId.systemDefault();</span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.ofInstant(<span class="type">timestamp</span>, <span class="type">zone</span>);</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(localDateTime);</span><br><span class="line"></span><br><span class="line">// Instant <span class="keyword">to</span> <span class="type">Date</span></span><br><span class="line"><span class="type">Date</span> <span class="type">date</span> = <span class="type">Date</span>.<span class="keyword">from</span>(<span class="type">timestamp</span>);</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="type">date</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义Spliterator</title>
      <link href="/post/3a1d5681.html"/>
      <url>/post/3a1d5681.html</url>
      
        <content type="html"><![CDATA[<h1 id="自定义Spliterator"><a href="#自定义Spliterator" class="headerlink" title="自定义Spliterator"></a>自定义Spliterator</h1><p>Spliterator是Java 8中加入的另一个新接口；这个名字代表“可分迭代器”（splitableiterator）。和Iterator一样，Spliterator也用于遍历数据源中的元素，但它是为了并行执行而设计的。</p><a id="more"></a><p>自定义Spliterator需要实现Spliterator接口。</p><h2 id="Spliterator接口"><a href="#Spliterator接口" class="headerlink" title="Spliterator接口"></a>Spliterator接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Spliterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>;</span><br><span class="line">    <span class="function">Spliterator&lt;T&gt; <span class="title">trySplit</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">estimateSize</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">characteristics</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>T：Spliterator遍历的元素的类型</li><li>tryAdvance：类似于普通的Iterator，因为它会按顺序一个一个使用Spliterator中的元素，并且如果还有其他元素要遍历就返回true。</li><li>trySplit：把一些元素划出去分给第二个Spliterator（由该方法返回），让它们两个并行处理。</li><li>estimateSize：估计还剩下多少元素要遍历，让拆分均匀一点。</li><li>characteristics</li></ul><table><thead><tr><th>特 性</th><th>含 义</th></tr></thead><tbody><tr><td>ORDERED</td><td>元素有既定的顺序（例如List），因此Spliterator在遍历和划分时也会遵循这一顺序</td></tr><tr><td>DISTINCT</td><td>对于任意一对遍历过的元素x和y，x.equals(y)返回false</td></tr><tr><td>SORTED</td><td>遍历的元素按照一个预定义的顺序排序</td></tr><tr><td>SIZED</td><td>该Spliterator由一个已知大小的源建立（例如Set），因此estimatedSize()返回的是准确值</td></tr><tr><td>NONNULL</td><td>保证遍历的元素不会为null</td></tr><tr><td>IMMUTABLE</td><td>Spliterator的数据源不能修改。这意味着在遍历时不能添加、删除或修改任何元素</td></tr><tr><td>CONCURRENT</td><td>该Spliterator的数据源可以被其他线程同时修改而无需同步</td></tr><tr><td>SUBSIZED</td><td>该Spliterator和所有从它拆分出来的Spliterator都是SIZED</td></tr></tbody></table><h2 id="拆分过程"><a href="#拆分过程" class="headerlink" title="拆分过程"></a>拆分过程</h2><p><img src="https://gitee.com/morris131/morris-book/raw/master/back/java/java8/images/1574243623591.png" alt></p><h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.java8.parallel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Spliterator;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">function</span>.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.StreamSupport;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> IntSpliterator implements Spliterator&lt;<span class="type">Integer</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private <span class="type">int</span> <span class="keyword">start</span>;</span><br><span class="line"></span><br><span class="line">    private <span class="type">int</span> <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line">    private <span class="type">int</span> <span class="keyword">current</span>;</span><br><span class="line"></span><br><span class="line">    private <span class="type">int</span>[] data;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> Stream&lt;<span class="type">Integer</span>&gt; stream() &#123;</span><br><span class="line">       <span class="keyword">return</span> StreamSupport.stream(this, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> Stream&lt;<span class="type">Integer</span>&gt; parallelStream() &#123;</span><br><span class="line">        <span class="keyword">return</span> StreamSupport.stream(this, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> IntSpliterator(<span class="type">int</span>[] data) &#123;</span><br><span class="line">        this(<span class="number">0</span>, data.length, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> IntSpliterator(<span class="type">int</span> <span class="keyword">start</span>, <span class="type">int</span> <span class="keyword">end</span>, <span class="type">int</span>[] data) &#123;</span><br><span class="line">        this.start = <span class="keyword">start</span>;</span><br><span class="line">        this.end = <span class="keyword">end</span>;</span><br><span class="line">        this.<span class="keyword">current</span> = <span class="keyword">start</span>;</span><br><span class="line">        this.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">boolean</span> tryAdvance(Consumer&lt;? super <span class="type">Integer</span>&gt; action) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">current</span> &lt; <span class="keyword">end</span>) &#123;</span><br><span class="line">            action.accept(data[<span class="keyword">current</span>++]);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> Spliterator&lt;<span class="type">Integer</span>&gt; trySplit() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">start</span> - <span class="keyword">end</span> &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> mid=<span class="keyword">start</span>+((<span class="keyword">end</span>-<span class="keyword">start</span>)/<span class="number">2</span>);</span><br><span class="line">        <span class="type">int</span> newStart=mid;</span><br><span class="line">        <span class="type">int</span> newEnd=<span class="keyword">end</span>;</span><br><span class="line">        end=mid;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span> IntSpliterator(newStart, newEnd, data);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> long estimateSize() &#123;</span><br><span class="line">        <span class="keyword">return</span> data.length - <span class="keyword">end</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">int</span> <span class="keyword">characteristics</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> Spliterator.ORDERED|Spliterator.SUBSIZED|Spliterator.SIZED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="type">int</span>[] ints = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10</span>).toArray();</span><br><span class="line">        IntSpliterator intSpliterator = <span class="built_in">new</span> IntSpliterator(ints);</span><br><span class="line"></span><br><span class="line">        intSpliterator.stream().<span class="keyword">forEach</span>(<span class="keyword">System</span>.<span class="keyword">out</span>::println);</span><br><span class="line">        //intSpliterator.parallelStream().<span class="keyword">forEach</span>(<span class="keyword">System</span>.<span class="keyword">out</span>::print);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fork-join</title>
      <link href="/post/e90b8c72.html"/>
      <url>/post/e90b8c72.html</url>
      
        <content type="html"><![CDATA[<h1 id="fork-join"><a href="#fork-join" class="headerlink" title="fork-join"></a>fork-join</h1><p>分支/合并框架的目的是以递归方式将可以并行的任务拆分成更小的任务，然后将每个子任务的结果合并起来生成整体结果。它是ExecutorService接口的一个实现，它把子任务分配给线程池（称为ForkJoinPool）中的工作线程。</p><a id="more"></a><p>如果任务返回结果，需实现RecursiveTask<r>接口。</r></p><p>如果任务不返回结果，则需试下RecursiveAction接口。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="https://gitee.com/morris131/morris-book/raw/master/back/java/java8/images/1574243237479.png" alt></p><h2 id="RecursiveTask的使用"><a href="#RecursiveTask的使用" class="headerlink" title="RecursiveTask的使用"></a>RecursiveTask的使用</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.java8.parallel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinPool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.RecursiveTask;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> RecursiveTaskExample extends RecursiveTask&lt;<span class="type">Integer</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private <span class="type">int</span>[] data;</span><br><span class="line"></span><br><span class="line">    private <span class="type">int</span> <span class="keyword">start</span>;</span><br><span class="line"></span><br><span class="line">    private <span class="type">int</span> <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static final <span class="type">int</span> <span class="keyword">LIMIT</span> = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> RecursiveTaskExample(<span class="type">int</span>[] data) &#123;</span><br><span class="line">        this.data = data;</span><br><span class="line">        this.start = <span class="number">0</span>;</span><br><span class="line">        this.end = data.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> RecursiveTaskExample(<span class="type">int</span>[] data, <span class="type">int</span> <span class="keyword">start</span>, <span class="type">int</span> <span class="keyword">end</span>) &#123;</span><br><span class="line">        this.data = data;</span><br><span class="line">        this.start = <span class="keyword">start</span>;</span><br><span class="line">        this.end = <span class="keyword">end</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected <span class="type">Integer</span> compute() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(Thread.currentThread().getName());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">end</span> - <span class="keyword">start</span> &lt;= <span class="keyword">LIMIT</span>) &#123;</span><br><span class="line">            <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="keyword">start</span>; i &lt; <span class="keyword">end</span>; i++) &#123;</span><br><span class="line">                result += data[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> middle = (<span class="keyword">end</span> - <span class="keyword">start</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        RecursiveTaskExample left = <span class="built_in">new</span> RecursiveTaskExample(data, <span class="keyword">start</span>, <span class="keyword">start</span> + middle);</span><br><span class="line">        left.fork();</span><br><span class="line"></span><br><span class="line">        // 使用main线程</span><br><span class="line">        RecursiveTaskExample right = <span class="built_in">new</span> RecursiveTaskExample(data, <span class="keyword">start</span> + middle, <span class="keyword">end</span>);</span><br><span class="line">        <span class="type">Integer</span> rightResult = right.compute();</span><br><span class="line"></span><br><span class="line">        // 也可另起一个线程</span><br><span class="line">        // RecursiveTaskExample2 right = <span class="built_in">new</span> RecursiveTaskExample2(data, <span class="keyword">start</span> + middle, <span class="keyword">end</span>);</span><br><span class="line">        // right.fork();</span><br><span class="line">        // <span class="type">Integer</span> rightResult = right.<span class="keyword">join</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> leftResult = left.<span class="keyword">join</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rightResult + leftResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] data = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">13</span>).toArray();</span><br><span class="line"></span><br><span class="line">        ForkJoinPool pool = <span class="built_in">new</span> ForkJoinPool();</span><br><span class="line">        <span class="type">Integer</span> result = pool.invoke(<span class="built_in">new</span> RecursiveTaskExample(data));</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(Runtime.getRuntime().availableProcessors());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RecursiveAction的使用"><a href="#RecursiveAction的使用" class="headerlink" title="RecursiveAction的使用"></a>RecursiveAction的使用</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.java8.parallel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinPool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.RecursiveAction;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> RecursiveActionExample extends RecursiveAction &#123;</span><br><span class="line"></span><br><span class="line">    private <span class="type">int</span> <span class="keyword">start</span>;</span><br><span class="line"></span><br><span class="line">    private <span class="type">int</span> <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line">    private <span class="type">int</span>[] data;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static final <span class="type">int</span> <span class="keyword">LIMIT</span> = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> RecursiveActionExample(<span class="type">int</span>[] data) &#123;</span><br><span class="line">        this.data = data;</span><br><span class="line">        this.start = <span class="number">0</span>;</span><br><span class="line">        this.end = data.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> RecursiveActionExample(<span class="type">int</span> <span class="keyword">start</span>, <span class="type">int</span> <span class="keyword">end</span>, <span class="type">int</span>[] data) &#123;</span><br><span class="line">        this.start = <span class="keyword">start</span>;</span><br><span class="line">        this.end = <span class="keyword">end</span>;</span><br><span class="line">        this.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected <span class="type">void</span> compute() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>((<span class="keyword">end</span> - <span class="keyword">start</span>) &lt; <span class="keyword">LIMIT</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="keyword">start</span>; i &lt; <span class="keyword">end</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(data[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> middle = (<span class="keyword">end</span> - <span class="keyword">start</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        RecursiveActionExample leftRecursiveActionExample = <span class="built_in">new</span> RecursiveActionExample(<span class="keyword">start</span>, <span class="keyword">start</span> + middle, data);</span><br><span class="line">        leftRecursiveActionExample.fork();</span><br><span class="line"></span><br><span class="line">        RecursiveActionExample rightRecursiveActionExample = <span class="built_in">new</span> RecursiveActionExample(<span class="keyword">start</span> + middle, <span class="keyword">end</span>, data);</span><br><span class="line">        rightRecursiveActionExample.compute();</span><br><span class="line"></span><br><span class="line">        leftRecursiveActionExample.<span class="keyword">join</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="type">int</span>[] ints = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10</span>).toArray();</span><br><span class="line">        RecursiveActionExample recursiveActionExample = <span class="built_in">new</span> RecursiveActionExample(ints);</span><br><span class="line"></span><br><span class="line">        ForkJoinPool forkJoinPool = <span class="built_in">new</span> ForkJoinPool();</span><br><span class="line">        forkJoinPool.invoke(recursiveActionExample);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并行Stream流</title>
      <link href="/post/68cc3b9e.html"/>
      <url>/post/68cc3b9e.html</url>
      
        <content type="html"><![CDATA[<h1 id="并行Stream流"><a href="#并行Stream流" class="headerlink" title="并行Stream流"></a>并行Stream流</h1><p>流在处理数据进行一些迭代操作的时候确认很方便，但是在执行一些耗时或是占用资源很高的任务时候，串行化的流无法带来速度/性能上的提升，并不能满足我们的需要。</p><a id="more"></a><p>通常我们会使用多线程来并行或是分片分解执行任务，而在Stream中也提供了这样的并行方法，下面将会一一介绍这些方法。</p><h2 id="将顺序流转为并行流"><a href="#将顺序流转为并行流" class="headerlink" title="将顺序流转为并行流"></a>将顺序流转为并行流</h2><p>使用parallelStream()方法或者是使用stream().parallel()来转化为并行流。</p><p>但是只是可能会返回一个并行的流，流是否能并行执行还受到其他一些条件的约束（如是否有序，是否支持并行）。</p><p>对顺序流调用parallel方法并不意味着流本身有任何实际的变化。它在内部实际上就是设了一个boolean标志，表示你想让调用parallel之后进行的所有操作都并行执行。类似地，你只需要对并行流调用sequential方法就可以把它变成顺序流。如果对这个方法调用了多次，将以最后一次执行为准。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.java8.parallel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParallerDemo</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IntStream <span class="built_in">list</span> = IntStream.range(<span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line">        <span class="comment">//开始并行执行</span></span><br><span class="line">        <span class="built_in">list</span>.parallel().forEach(i -&gt; &#123;</span><br><span class="line">            Thread thread = Thread.currentThread();</span><br><span class="line">            System.err.println(<span class="string">"integer："</span> + i + <span class="string">"，"</span> + <span class="string">"currentThread:"</span> + thread.getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>eger：<span class="number">3</span>，currentThread:main</span><br><span class="line"><span class="built_in">int</span>eger：<span class="number">4</span>，currentThread:ForkJoinPool.commonPool-worker<span class="number">-3</span></span><br><span class="line"><span class="built_in">int</span>eger：<span class="number">5</span>，currentThread:ForkJoinPool.commonPool-worker<span class="number">-2</span></span><br><span class="line"><span class="built_in">int</span>eger：<span class="number">1</span>，currentThread:ForkJoinPool.commonPool-worker<span class="number">-1</span></span><br><span class="line"><span class="built_in">int</span>eger：<span class="number">2</span>，currentThread:ForkJoinPool.commonPool-worker<span class="number">-1</span></span><br><span class="line"><span class="built_in">int</span>eger：<span class="number">0</span>，currentThread:ForkJoinPool.commonPool-worker<span class="number">-3</span></span><br></pre></td></tr></table></figure><p>从运行结果里面我们可以很清楚的看到parallelStream同时使用了主线程和ForkJoinPool.commonPool创建的线程。 值得说明的是这个运行结果并不是唯一的，实际运行的时候可能会得到多个结果。</p><p>看看流的parallel方法，你可能会想，并行流用的线程是从哪儿来的？有多少个？怎么自定义这个过程呢？</p><p>并行流内部使用了默认的ForkJoinPool，它默认的线程数量就是你的处理器数量，这个值是由Runtime.getRuntime().availableProcessors()得到的。</p><p>但是你可以通过系统属性java.util.concurrent.ForkJoinPool.common.parallelism来改变线程池大小，如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">System</span><span class="selector-class">.setProperty</span>("<span class="selector-tag">java</span><span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.ForkJoinPool</span><span class="selector-class">.common</span><span class="selector-class">.parallelism</span>","12");</span><br></pre></td></tr></table></figure><p>这是一个全局设置，因此它将影响代码中所有的并行流。反过来说，目前还无法专为某个并行流指定这个值。一般而言，让ForkJoinPool的大小等于处理器数量是个不错的默认值，除非你有很好的理由，否则我们强烈建议你不要修改它。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置全局并行流并发线程数</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>set<span class="constructor">Property(<span class="string">"java.util.concurrent.ForkJoinPool.common.parallelism"</span>, <span class="string">"12"</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">ForkJoinPool</span>.</span></span>get<span class="constructor">CommonPoolParallelism()</span>);<span class="comment">// 输出 12</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>set<span class="constructor">Property(<span class="string">"java.util.concurrent.ForkJoinPool.common.parallelism"</span>, <span class="string">"20"</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">ForkJoinPool</span>.</span></span>get<span class="constructor">CommonPoolParallelism()</span>);<span class="comment">// 输出 12</span></span><br></pre></td></tr></table></figure><p>为什么两次的运行结果是一样的呢？上面刚刚说过了这是一个全局设置，java.util.concurrent.ForkJoinPool.common.parallelism是final类型的，整个JVM中只允许设置一次。既然默认的并发线程数不能反复修改，那怎么进行不同线程数量的并发测试呢？答案是：引入ForkJoinPool。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IntStream range = <span class="module-access"><span class="module"><span class="identifier">IntStream</span>.</span></span>range(<span class="number">1</span>, <span class="number">100000</span>);</span><br><span class="line"><span class="comment">// 传入parallelism</span></span><br><span class="line"><span class="keyword">new</span> <span class="constructor">ForkJoinPool(<span class="params">parallelism</span>)</span>.submit(<span class="literal">()</span> -&gt; range.parallel<span class="literal">()</span>.for<span class="constructor">Each(System.<span class="params">out</span>::<span class="params">println</span>)</span>).get<span class="literal">()</span>;</span><br></pre></td></tr></table></figure><p>因此，使用parallelStream时需要注意的一点是，多个parallelStream之间默认使用的是同一个线程池，所以IO操作尽量不要放进parallelStream中，否则会阻塞其他parallelStream。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前机器CPU处理器的数量</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Runtime</span>.</span></span>get<span class="constructor">Runtime()</span>.available<span class="constructor">Processors()</span>);<span class="comment">// 输出 4</span></span><br><span class="line"><span class="comment">// parallelStream默认的并发线程数</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">ForkJoinPool</span>.</span></span>get<span class="constructor">CommonPoolParallelism()</span>);<span class="comment">// 输出 3</span></span><br></pre></td></tr></table></figure><p>为什么parallelStream默认的并发线程数要比CPU处理器的数量少1个？因为最优的策略是每个CPU处理器分配一个线程，然而主线程也算一个线程，所以要占一个名额。 这一点可以从源码中看出来：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static final <span class="built_in">int</span> MAX_CAP      = <span class="number">0x7fff</span>;        <span class="comment">// max #workers - 1</span></span><br><span class="line"><span class="comment">// 无参构造函数</span></span><br><span class="line">public <span class="constructor">ForkJoinPool()</span> &#123;</span><br><span class="line">        this(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>min(MAX_CAP, <span class="module-access"><span class="module"><span class="identifier">Runtime</span>.</span></span>get<span class="constructor">Runtime()</span>.available<span class="constructor">Processors()</span>),</span><br><span class="line">             defaultForkJoinWorkerThreadFactory, null, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试流的性能"><a href="#测试流的性能" class="headerlink" title="测试流的性能"></a>测试流的性能</h2><p>下面通过几种方式计算数据的和来测试流的性能。</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.java8.parallel;</span><br><span class="line"></span><br><span class="line">import java.util.function.<span class="function"><span class="keyword">Function</span></span>;</span><br><span class="line">import java.util.stream.LongStream;</span><br><span class="line">import java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParallerStreamExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(String[] args) &#123;</span><br><span class="line">        <span class="keyword">long</span> n = <span class="number">100</span>_000_000;</span><br><span class="line">        System.out.println(<span class="string">"normal:"</span> + recordTime(ParallerStreamExample::normal, n) + <span class="string">" MS"</span>);</span><br><span class="line">        System.out.println(<span class="string">"iterator:"</span> + recordTime(ParallerStreamExample::iterator, n) + <span class="string">" MS"</span>);</span><br><span class="line">        <span class="comment">// 太耗时，暂时注释</span></span><br><span class="line">        <span class="comment">// System.out.println("iteratorParallel:" + recordTime(ParallerStreamExample::iteratorParallel, n) + " MS");</span></span><br><span class="line">        System.out.println(<span class="string">"longStream:"</span> + recordTime(ParallerStreamExample::longStream, n) + <span class="string">" MS"</span>);</span><br><span class="line">        System.out.println(<span class="string">"longStreamParallel:"</span> + recordTime(ParallerStreamExample::longStreamParallel, n) + <span class="string">" MS"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> recordTime(<span class="function"><span class="keyword">Function</span>&lt;<span class="title">Long</span>, <span class="title">Long</span>&gt; <span class="title">function</span>, <span class="title">long</span> <span class="title">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> lowestCostTime = <span class="keyword">Long</span>.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">            <span class="function"><span class="keyword">function</span>.<span class="title">apply</span><span class="params">(n)</span></span>;</span><br><span class="line">            <span class="keyword">long</span> costTime = System.currentTimeMillis() - startTime;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(costTime &lt; lowestCostTime) &#123;</span><br><span class="line">                lowestCostTime = costTime;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> lowestCostTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正常for循环</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> normal(<span class="keyword">long</span> n) &#123;</span><br><span class="line">        <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            result += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * iterate顺序流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> iterator(<span class="keyword">long</span> n) &#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.iterate(<span class="number">1</span>L, t -&gt; t + <span class="number">1</span>).limit(n).reduce(<span class="number">0</span>L, <span class="keyword">Long</span>::sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * iterate并行流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> iteratorParallel(<span class="keyword">long</span> n) &#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.iterate(<span class="number">1</span>L, t -&gt; t + <span class="number">1</span>).parallel().limit(n).reduce(<span class="number">0</span>L, <span class="keyword">Long</span>::sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * rangeClosed顺序流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> longStream(<span class="keyword">long</span> n) &#123;</span><br><span class="line">        <span class="keyword">return</span> LongStream.rangeClosed(<span class="number">1</span>, n).sum();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * rangeClosed并行流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> longStreamParallel(<span class="keyword">long</span> n) &#123;</span><br><span class="line">        <span class="keyword">return</span> LongStream.rangeClosed(<span class="number">1</span>, n).parallel().sum();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">normal:<span class="number">33</span> MS</span><br><span class="line">iterator:<span class="number">990</span> MS</span><br><span class="line">longStream:<span class="number">44</span> MS</span><br><span class="line">longStreamParallel:<span class="number">16</span> MS</span><br></pre></td></tr></table></figure><p>结论：</p><ul><li>Stream串行性能明显差于for循环迭代，因为Stream串行还有流水线成本在里面。</li><li>并行的Stream API能够发挥多核特性，但是有时候不如串行流（比如后面的计算依赖前面的计算结果就不适宜用并行流）</li></ul><h2 id="高效使用并行流"><a href="#高效使用并行流" class="headerlink" title="高效使用并行流"></a>高效使用并行流</h2><p>下面是一些使用并行流需要思考的方面：</p><ul><li>留意装箱。自动装箱和拆箱操作会大大降低性能。Java 8中有原始类型流（IntStream、LongStream、DoubleStream）来避免这种操作，但凡有可能都应该用这些流。</li><li>有些操作本身在并行流上的性能就比顺序流差，比如后面的计算依赖前面的计算结果。</li><li>还要考虑流的操作流水线的总计算成本。设N是要处理的元素的总数，Q是一个元素通过流水线的大致处理成本，则N*Q就是这个对成本的一个粗略的定性估计。Q值较高就意味着使用并行流时性能好的可能性比较大。</li><li>对于较小的数据量，选择并行流几乎从来都不是一个好的决定。并行处理少数几个元素的好处还抵不上并行化造成的额外开销。</li><li>要考虑流背后的数据结构是否易于分解。例如，ArrayList的拆分效率比LinkedList高得多，因为前者用不着遍历就可以平均拆分，而后者则必须遍历。</li><li>流自身的特点，以及流水线中的中间操作修改流的方式，都可能会改变分解过程的性能。例如，一个SIZED流可以分成大小相等的两部分，这样每个部分都可以比较高效地并行处理，但筛选操作可能丢弃的元素个数却无法预测，导致流本身的大小未知。</li><li>还要考虑终端操作中合并步骤的代价是大是小（例如Collector中的combiner方法）。如果这一步代价很大，那么组合每个子流产生的部分结果所付出的代价就可能会超出通过并行流得到的性能提升。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义Collector</title>
      <link href="/post/5763c10f.html"/>
      <url>/post/5763c10f.html</url>
      
        <content type="html"><![CDATA[<h1 id="自定义Collector"><a href="#自定义Collector" class="headerlink" title="自定义Collector"></a>自定义Collector</h1><p>Collector接口包含了一系列方法，为实现具体的归约操作（即收集器）提供了范本。我们已经看过了Collector接口中实现的许多收集器（由Collector接口的工具类Collector提供），例如toList或groupingBy。</p><a id="more"></a><p>这也意味着你可以为Collector接口提供自己的实现，从而自由地创建自定义归约操作。</p><p>要实现自定义收集器，只需要实现<code>java.util.stream.Collector&lt;T, A, R&gt;</code>接口即可.</p><p>Collector接口的声明如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>Collector&lt;T, A, R&gt; &#123;</span><br><span class="line"></span><br><span class="line">    Supplier&lt;A&gt; supplier();</span><br><span class="line"></span><br><span class="line">    BiConsumer&lt;A, T&gt; accumulator();</span><br><span class="line"></span><br><span class="line">    BinaryOperator&lt;A&gt; combiner();</span><br><span class="line"></span><br><span class="line">    Function&lt;A, R&gt; finisher();</span><br><span class="line"></span><br><span class="line">    Set&lt;Characteristics&gt; characteristics();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型介绍"><a href="#泛型介绍" class="headerlink" title="泛型介绍"></a>泛型介绍</h2><ul><li>T：stream在调用collect方法收集前的数据类型</li><li>A：A是T的累加器，遍历T的时候，会把T按照一定的方式添加到A中，换句话说就是把一些T通过一种方式变成A</li><li>R：R可以看成是A的累加器，是最终的结果，是把A汇聚之后的数据类型，换句话说就是把一些A通过一种方式变成R</li></ul><h2 id="接口介绍"><a href="#接口介绍" class="headerlink" title="接口介绍"></a>接口介绍</h2><ul><li>supplier: 怎么创建一个累加器</li><li>accumulator:怎么把一个对象添加到累加器中</li><li>combiner: 怎么把一个累加器和另一个累加器合并起来，此方法并行时才会调用</li><li>finisher: 怎么把A转化为R</li><li>characteristics: 特征值，告诉collect方法在执行归约操作的时候可以应用哪些优化</li></ul><h2 id="Characteristics"><a href="#Characteristics" class="headerlink" title="Characteristics"></a>Characteristics</h2><p>包含三个项目的枚举：</p><ul><li>UNORDERED–归约结果不受流中项目的遍历和累积顺序的影响</li><li>CONCURRENT–accumulator函数可以从多个线程同时调用，且该收集器可以并行归约流。如果收集器没有标为UNORDERED, 那它仅在用于无序数据源时才可以并行归约。</li><li>IDENTITY_FINISH–这表明完成器方法返回的函数是一个恒等函数，可以跳过。这种情况下，累加器对象将会直接用做归约过程的最终结果。这也意味着，将累加器A不加检查地转换为结果R是安全的。</li></ul><p>当Collector设置为IDENTITY_FINISH，finisher方法不会调用，因为不用再类型转换了，中间数据类型就是最终的数据类型。</p><h2 id="Stream-collect-源码分析"><a href="#Stream-collect-源码分析" class="headerlink" title="Stream#collect()源码分析"></a>Stream#collect()源码分析</h2><p>下面的Stream的实现类ReferencePipeline的collect方法的源码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public final &lt;R, A&gt; R collect(Collector&lt;? super P_OUT, A, R&gt; collector) &#123; <span class="comment">// @1</span></span><br><span class="line">    A container;</span><br><span class="line">    <span class="keyword">if</span> (is<span class="constructor">Parallel()</span></span><br><span class="line"><span class="operator">            &amp;&amp; </span>(collector.characteristics<span class="literal">()</span>.contains(Collector.Characteristics.CONCURRENT))</span><br><span class="line"><span class="operator">            &amp;&amp; </span>(!is<span class="constructor">Ordered()</span><span class="operator"> || </span>collector.characteristics<span class="literal">()</span>.contains(Collector.Characteristics.UNORDERED))) &#123; <span class="comment">// @2</span></span><br><span class="line">        container = collector.supplier<span class="literal">()</span>.get<span class="literal">()</span>; <span class="comment">// @3</span></span><br><span class="line">        BiConsumer&lt;A, ? super P_OUT&gt; accumulator = collector.accumulator<span class="literal">()</span>;</span><br><span class="line">        for<span class="constructor">Each(<span class="params">u</span> -&gt; <span class="params">accumulator</span>.<span class="params">accept</span>(<span class="params">container</span>, <span class="params">u</span>)</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        container = evaluate(<span class="module-access"><span class="module"><span class="identifier">ReduceOps</span>.</span></span>make<span class="constructor">Ref(<span class="params">collector</span>)</span>); <span class="comment">// @4</span></span><br><span class="line">    &#125;</span><br><span class="line">    return collector.characteristics<span class="literal">()</span>.contains(Collector.Characteristics.IDENTITY_FINISH)</span><br><span class="line">           ? (R) container</span><br><span class="line">           : collector.finisher<span class="literal">()</span>.apply(container); <span class="comment">// @5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码@1：函数声明，该方法返回的结果类型为R，传入的行为参数接口为Collector。</li><li>代码@2：判断是否符合并行化累积与规约的条件。<ul><li>是否是并行流，Stream.stream()方法的流是非并行化流，如果要支持并行化执行，需要使用Stream.parallelStream()方法。</li><li>Collector(收集器，行为化参数)中收集器行为集合中是否包含Characteristics.CONCURRENT(并行执行)，如果不包含该行为，则不支持并行执行。</li><li>原始流是否有顺序或者收集器的行为集合中明确包含Characteristics.UNORDERED(不要求顺序性)。</li><li>上述三个条件必须同时满足，才能并行执行，否则串行执行。</li></ul></li><li>代码@3：并行执行收集动作。</li><li>代码@4：串行执行收集动作。</li><li>代码@5：如果收集器收集行为集合中包含Characteristics.IDENTITY_FINISH，则直接返回原始值，否则使用Collector.finishier()方式对计算的值进行函数式计算。</li></ul><h2 id="自定义toList"><a href="#自定义toList" class="headerlink" title="自定义toList"></a>自定义toList</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.java8.collector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">function</span>.BiConsumer;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">function</span>.BinaryOperator;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">function</span>.<span class="keyword">Function</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">function</span>.Supplier;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collector;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> ToListCollector&lt;T&gt; implements Collector&lt;T, List&lt;T&gt;, List&lt;T&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> Supplier&lt;List&lt;T&gt;&gt; supplier() &#123;</span><br><span class="line">        <span class="keyword">return</span> ArrayList::<span class="built_in">new</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> BiConsumer&lt;List&lt;T&gt;, T&gt; accumulator() &#123;</span><br><span class="line">        <span class="keyword">return</span> List::<span class="keyword">add</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> BinaryOperator&lt;List&lt;T&gt;&gt; combiner() &#123;</span><br><span class="line">        <span class="keyword">return</span> (left, right) -&gt; &#123;</span><br><span class="line">            left.addAll(right);</span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="keyword">Function</span>&lt;List&lt;T&gt;, List&lt;T&gt;&gt; finisher() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">Function</span>.<span class="keyword">identity</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="keyword">Set</span>&lt;<span class="keyword">Characteristics</span>&gt; <span class="keyword">characteristics</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableSet(EnumSet.<span class="keyword">of</span>(Collector.<span class="keyword">Characteristics</span>.IDENTITY_FINISH));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        List&lt;Dish&gt; dishList = Dish.createList().stream().<span class="keyword">filter</span>(Dish::isVegetarian).collect(<span class="built_in">new</span> ToListCollector&lt;&gt;());</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(dishList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义joining"><a href="#自定义joining" class="headerlink" title="自定义joining"></a>自定义joining</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.java8.collector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">function</span>.BiConsumer;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">function</span>.BinaryOperator;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">function</span>.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">function</span>.Supplier;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoiningCollector</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Collector</span></span>&lt;<span class="title">String</span>, <span class="title">StringBuilder</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> seperator = <span class="string">","</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> JoiningCollector() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> JoiningCollector(<span class="keyword">String</span> seperator) &#123;</span><br><span class="line">        <span class="built_in">this</span>.seperator = seperator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> Supplier&lt;StringBuilder&gt; supplier() &#123;</span><br><span class="line">        <span class="keyword">return</span> StringBuilder:<span class="type"></span>:<span class="keyword">new</span><span class="type"></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> BiConsumer&lt;StringBuilder, <span class="keyword">String</span>&gt; accumulator() &#123;</span><br><span class="line">        <span class="keyword">return</span> (sb, str) -&gt; sb.append(str).append(seperator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> BinaryOperator&lt;StringBuilder&gt; combiner() &#123;</span><br><span class="line">        <span class="keyword">return</span> StringBuilder:<span class="type"></span>:append;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> Function&lt;StringBuilder, <span class="keyword">String</span>&gt; finisher() &#123;</span><br><span class="line">        <span class="keyword">return</span> c -&gt; &#123;</span><br><span class="line">            <span class="keyword">String</span> ret = c.toString();</span><br><span class="line">            <span class="keyword">if</span> (ret.endsWith(seperator)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ret.substring(<span class="number">0</span>, ret.length() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> Set&lt;Characteristics&gt; characteristics() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">HashSet</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        <span class="keyword">String</span> collect = Arrays.asList(<span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"java"</span>, <span class="string">"stream"</span>).stream().collect(<span class="keyword">new</span> <span class="type">JoiningCollector</span>(<span class="string">"|"</span>));</span><br><span class="line">        System.out.println(collect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
            <tag> collector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Collector的使用</title>
      <link href="/post/6b148d3e.html"/>
      <url>/post/6b148d3e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Collector的使用"><a href="#Collector的使用" class="headerlink" title="Collector的使用"></a>Collector的使用</h1><p>先弄明白几个概念：</p><ul><li><p>java.util.Collection是Java集合的祖先接口。</p></li><li><p>java.util.Collections是java.util包下的一个工具类，内涵各种处理集合的静态方法。</p></li><li><p>java.util.stream.Stream#collect(java.util.stream.Collector&lt;? super T,A,R&gt;)是Stream的一个函数，负责收集流。</p></li><li><p>java.util.stream.Collector 是一个收集函数的接口, 声明了一个收集器的功能。</p></li><li><p>java.util.stream.Collectors则是一个收集器的工具类，内置了一系列收集器实现。</p><p>java.util.stream.Stream#collect(java.util.stream.Collector&lt;? super T,A,R&gt;)方法是一个终端操作，会消耗类，产生一个最终结果。</p></li></ul><a id="more"></a><p>下面会讲解如何使用JDK自带的收集器，包含Collectors类中的所有静态方法。</p><h2 id="averagingInt、averagingLong、averagingDouble"><a href="#averagingInt、averagingLong、averagingDouble" class="headerlink" title="averagingInt、averagingLong、averagingDouble"></a>averagingInt、averagingLong、averagingDouble</h2><p>方法的声明</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static <span class="params">&lt;T&gt;</span> Collector<span class="params">&lt;T,?,Double&gt;</span> averagingDouble(ToDoubleFunction<span class="params">&lt;? super T&gt;</span> mapper) <span class="comment">// 计算所有输入Double类型元素的平均值</span></span><br><span class="line">static <span class="params">&lt;T&gt;</span> Collector<span class="params">&lt;T,?,Double&gt;</span> averagingInt(ToIntFunction<span class="params">&lt;? super T&gt;</span> mapper) <span class="comment">// 计算所有输入Integer类型元素的平均值</span></span><br><span class="line">static <span class="params">&lt;T&gt;</span> Collector<span class="params">&lt;T,?,Double&gt;</span> averagingLong(ToLongFunction<span class="params">&lt;? super T&gt;</span> mapper)<span class="comment">// 计算所有输入Long类型元素的平均值</span></span><br></pre></td></tr></table></figure><p>方法的使用</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.collect(averaging<span class="constructor">Int(Dish::<span class="params">getCalories</span>)</span>)).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.collect(averaging<span class="constructor">Double(Dish::<span class="params">getCalories</span>)</span>)).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.collect(averaging<span class="constructor">Long(Dish::<span class="params">getCalories</span>)</span>)).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="collectingAndThen"><a href="#collectingAndThen" class="headerlink" title="collectingAndThen"></a>collectingAndThen</h2><p>方法的声明</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static <span class="params">&lt;T,A,R,RR&gt;</span> Collector<span class="params">&lt;T,A,RR&gt;</span> collectingAndThen(Collector<span class="params">&lt;T,A,R&gt;</span> downstream, Function<span class="params">&lt;R,RR&gt;</span> finisher) <span class="comment">// 对第一个参数的返回结果进行额外的转换</span></span><br></pre></td></tr></table></figure><p>方法的使用</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.collect(collecting<span class="constructor">AndThen(<span class="params">toList</span>()</span>, Collections::unmodifiableList))).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="counting"><a href="#counting" class="headerlink" title="counting"></a>counting</h2><p>方法的声明</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static <span class="params">&lt;T&gt;</span> Collector<span class="params">&lt;T,?,Long&gt;</span> counting() <span class="comment">// 返回流中元素的个数</span></span><br></pre></td></tr></table></figure><p>方法的使用</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.filter(Dish::isVegetarian).collect(counting<span class="literal">()</span>)).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>; <span class="comment">// 相当于下面的</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.filter(Dish::isVegetarian).count<span class="literal">()</span>).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="groupingBy、groupingByConcurrent"><a href="#groupingBy、groupingByConcurrent" class="headerlink" title="groupingBy、groupingByConcurrent"></a>groupingBy、groupingByConcurrent</h2><p>方法的声明</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T,K&gt; Collector&lt;T,?,<span class="built_in">Map</span>&lt;K,<span class="built_in">List</span>&lt;T&gt;&gt;&gt; groupingBy(<span class="built_in">Function</span>&lt;? <span class="keyword">super</span> T,? <span class="keyword">extends</span> K&gt; classifier) <span class="comment">// 根据类型进行分组</span></span><br><span class="line"><span class="keyword">static</span> &lt;T,K,A,D&gt; Collector&lt;T,?,<span class="built_in">Map</span>&lt;K,D&gt;&gt; groupingBy(<span class="built_in">Function</span>&lt;? <span class="keyword">super</span> T,? <span class="keyword">extends</span> K&gt; classifier, Collector&lt;? <span class="keyword">super</span> T,A,D&gt; downstream) <span class="comment">// 根据类型进行分组，对List进行归约操作</span></span><br><span class="line"><span class="keyword">static</span> &lt;T,K,D,A,M <span class="keyword">extends</span> <span class="built_in">Map</span>&lt;K,D&gt;&gt; Collector&lt;T,?,M&gt; groupingBy(<span class="built_in">Function</span>&lt;? <span class="keyword">super</span> T,? <span class="keyword">extends</span> K&gt; classifier, Supplier&lt;M&gt; mapFactory, Collector&lt;? <span class="keyword">super</span> T,A,D&gt; downstream) <span class="comment">// 根据类型进行分组，指定分组返回值的类型，对指定类型进行归约操作</span></span><br><span class="line"><span class="keyword">static</span> &lt;T,K&gt; Collector&lt;T,?,ConcurrentMap&lt;K,<span class="built_in">List</span>&lt;T&gt;&gt;&gt; groupingByConcurrent(<span class="built_in">Function</span>&lt;? <span class="keyword">super</span> T,? <span class="keyword">extends</span> K&gt; classifier) <span class="comment">// 与groupingBy一样，只不过返回的是一个支持并发的容器</span></span><br><span class="line"><span class="keyword">static</span> &lt;T,K,A,D&gt; Collector&lt;T,?,ConcurrentMap&lt;K,D&gt;&gt; groupingByConcurrent(<span class="built_in">Function</span>&lt;? <span class="keyword">super</span> T,? <span class="keyword">extends</span> K&gt; classifier, Collector&lt;? <span class="keyword">super</span> T,A,D&gt; downstream) <span class="comment">// 与groupingBy一样，只不过返回的是一个支持并发的容器</span></span><br><span class="line"><span class="keyword">static</span> &lt;T,K,A,D,M <span class="keyword">extends</span> ConcurrentMap&lt;K,D&gt;&gt; Collector&lt;T,?,M&gt; groupingByConcurrent(<span class="built_in">Function</span>&lt;? <span class="keyword">super</span> T,? <span class="keyword">extends</span> K&gt; classifier, Supplier&lt;M&gt; mapFactory, Collector&lt;? <span class="keyword">super</span> T,A,D&gt; downstream) <span class="comment">// 与groupingBy一样，只不过返回的是一个支持并发的容器</span></span><br></pre></td></tr></table></figure><p>方法的使用</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.collect(grouping<span class="constructor">By(Dish::<span class="params">getType</span>)</span>)).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.collect(grouping<span class="constructor">By(Dish::<span class="params">getType</span>, <span class="params">averagingInt</span>(Dish::<span class="params">getCalories</span>)</span>))).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"></span><br><span class="line">TreeMap&lt;Dish.Type, Double&gt; collect = menu.stream<span class="literal">()</span>.collect(grouping<span class="constructor">By(Dish::<span class="params">getType</span>, TreeMap::<span class="params">new</span>, <span class="params">averagingInt</span>(Dish::<span class="params">getCalories</span>)</span>));</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">collect</span>)</span>.<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">collect</span>.<span class="params">getClass</span>()</span>).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.collect(grouping<span class="constructor">ByConcurrent(Dish::<span class="params">getType</span>)</span>)).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.collect(grouping<span class="constructor">ByConcurrent(Dish::<span class="params">getType</span>, <span class="params">averagingInt</span>(Dish::<span class="params">getCalories</span>)</span>))).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"></span><br><span class="line">ConcurrentSkipListMap&lt;Dish.Type, Double&gt; collect2 = menu.stream<span class="literal">()</span>.collect(grouping<span class="constructor">ByConcurrent(Dish::<span class="params">getType</span>, ConcurrentSkipListMap::<span class="params">new</span>, <span class="params">averagingInt</span>(Dish::<span class="params">getCalories</span>)</span>));</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">collect2</span>)</span>.<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">collect2</span>.<span class="params">getClass</span>()</span>).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="joining"><a href="#joining" class="headerlink" title="joining"></a>joining</h2><p>方法的声明</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Collector&lt;CharSequence,?,<span class="keyword">String</span>&gt;joining() <span class="comment">// 将元素拼接成一个String</span></span><br><span class="line"><span class="keyword">static</span> Collector&lt;CharSequence,?,<span class="keyword">String</span>&gt;joining(CharSequence delimiter) <span class="comment">// 按照指定的分隔符将元素拼接成一个String</span></span><br><span class="line"><span class="keyword">static</span> Collector&lt;CharSequence,?,<span class="keyword">String</span>&gt;joining(CharSequence delimiter, CharSequence prefix, CharSequence suffix) <span class="comment">// 按照指定的分隔符将元素拼接成一个String，再拼接上前缀和后缀</span></span><br></pre></td></tr></table></figure><p>方法的使用</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.map(Dish::getName).collect(<span class="module-access"><span class="module"><span class="identifier">Collectors</span>.</span></span>joining<span class="literal">()</span>)).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.map(Dish::getName).collect(<span class="module-access"><span class="module"><span class="identifier">Collectors</span>.</span></span>joining(<span class="string">","</span>))).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.map(Dish::getName).collect(<span class="module-access"><span class="module"><span class="identifier">Collectors</span>.</span></span>joining(<span class="string">","</span>, <span class="string">"["</span>, <span class="string">"]"</span>))).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="mapping"><a href="#mapping" class="headerlink" title="mapping"></a>mapping</h2><p>方法的声明</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T,U,A,R&gt; Collector&lt;T,?,R&gt; mapping(<span class="built_in">Function</span>&lt;? <span class="keyword">super</span> T,? <span class="keyword">extends</span> U&gt; mapper, Collector&lt;? <span class="keyword">super</span> U,A,R&gt; downstream) <span class="comment">// 先将流中的元素进行转换再进行归约</span></span><br></pre></td></tr></table></figure><p>方法的使用</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.collect(mapping(Dish::getName, joining(<span class="string">","</span>)))).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="maxBy、minBy"><a href="#maxBy、minBy" class="headerlink" title="maxBy、minBy"></a>maxBy、minBy</h2><p>方法的声明</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">static <span class="params">&lt;T&gt;</span> Collector<span class="params">&lt;T,?,Optional&lt;T&gt;</span>&gt; maxBy(Comparator<span class="params">&lt;? super T&gt;</span> comparator) <span class="comment">// 根据给出的Comparator产生最大元素</span></span><br><span class="line">static <span class="params">&lt;T&gt;</span> Collector<span class="params">&lt;T,?,Optional&lt;T&gt;</span>&gt;minBy(Comparator<span class="params">&lt;? super T&gt;</span> comparator) <span class="comment">// 根据给出的Comparator产生最小元素</span></span><br></pre></td></tr></table></figure><p>方法的使用</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.collect(max<span class="constructor">By(Comparator.<span class="params">comparingInt</span>(Dish::<span class="params">getCalories</span>)</span>))).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.collect(min<span class="constructor">By(Comparator.<span class="params">comparingInt</span>(Dish::<span class="params">getCalories</span>)</span>))).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="partitioningBy"><a href="#partitioningBy" class="headerlink" title="partitioningBy"></a>partitioningBy</h2><p>一个特殊的groupingBy，只不过key为boolean类型。</p><p>方法的声明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; Collector&lt;T,?,<span class="built_in">Map</span>&lt;<span class="built_in">Boolean</span>,List&lt;T&gt;&gt;&gt; partitioningBy(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate) <span class="comment">// 参考groupingBy</span></span><br><span class="line"><span class="keyword">static</span> &lt;T,D,A&gt; Collector&lt;T,?,<span class="built_in">Map</span>&lt;<span class="built_in">Boolean</span>,D&gt;&gt; partitioningBy(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate, Collector&lt;? <span class="keyword">super</span> T,A,D&gt; downstream) <span class="comment">// 参考groupingBy</span></span><br></pre></td></tr></table></figure><p>方法的使用</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.collect(partitioning<span class="constructor">By(Dish::<span class="params">isVegetarian</span>)</span>)).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.collect(partitioning<span class="constructor">By(Dish::<span class="params">isVegetarian</span>, <span class="params">averagingInt</span>(Dish::<span class="params">getCalories</span>)</span>))).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="reducing"><a href="#reducing" class="headerlink" title="reducing"></a>reducing</h2><p>方法的声明</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static <span class="params">&lt;T&gt;</span> Collector<span class="params">&lt;T,?,Optional&lt;T&gt;</span>&gt; reducing(BinaryOperator<span class="params">&lt;T&gt;</span> op) <span class="comment">// 对元素进行归约，返回值为Optional</span></span><br><span class="line">static <span class="params">&lt;T&gt;</span> Collector<span class="params">&lt;T,?,T&gt;</span>reducing(T identity, BinaryOperator<span class="params">&lt;T&gt;</span> op) <span class="comment">//  指定初始值，对元素进行归约，返回值为初始值的类型</span></span><br><span class="line">static <span class="params">&lt;T,U&gt;</span> Collector<span class="params">&lt;T,?,U&gt;</span> reducing(U identity, Function<span class="params">&lt;? super T,? extends U&gt;</span> mapper, BinaryOperator<span class="params">&lt;U&gt;</span> op) <span class="comment">// 指定初始值，对元素进行转换后再归约</span></span><br></pre></td></tr></table></figure><p>方法的使用</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">menu.stream<span class="function"><span class="params">()</span>.<span class="title">collect</span><span class="params">(mapping(Dish::getCalories, reducing((x,y)-&gt;x+y)))</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>;</span></span><br><span class="line"><span class="function"><span class="title">Optional</span>.<span class="title">ofNullable</span><span class="params">(menu.stream().collect(mapping(Dish::getCalories, reducing(<span class="number">0</span>, Integer::sum))))</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>;</span></span><br><span class="line"><span class="function"><span class="title">Optional</span>.<span class="title">ofNullable</span><span class="params">(menu.stream().collect(reducing(<span class="number">0</span>, Dish::getCalories, Integer::sum)))</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>;</span></span><br></pre></td></tr></table></figure><h2 id="summarizingInt、summarizingDouble、summarizingLong"><a href="#summarizingInt、summarizingDouble、summarizingLong" class="headerlink" title="summarizingInt、summarizingDouble、summarizingLong"></a>summarizingInt、summarizingDouble、summarizingLong</h2><p>方法的声明</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static <span class="params">&lt;T&gt;</span> Collector<span class="params">&lt;T,?,DoubleSummaryStatistics&gt;</span> summarizingDouble(ToDoubleFunction<span class="params">&lt;? super T&gt;</span> mapper) <span class="comment">// 汇总</span></span><br><span class="line">static <span class="params">&lt;T&gt;</span> Collector<span class="params">&lt;T,?,IntSummaryStatistics&gt;</span> summarizingInt(ToIntFunction<span class="params">&lt;? super T&gt;</span> mapper) <span class="comment">// 汇总</span></span><br><span class="line">static <span class="params">&lt;T&gt;</span> Collector<span class="params">&lt;T,?,LongSummaryStatistics&gt;</span>summarizingLong(ToLongFunction<span class="params">&lt;? super T&gt;</span> mapper) <span class="comment">// 汇总</span></span><br></pre></td></tr></table></figure><p>方法的使用</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.collect(summarizing<span class="constructor">Int(Dish::<span class="params">getCalories</span>)</span>)).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.collect(summarizing<span class="constructor">Double(Dish::<span class="params">getCalories</span>)</span>)).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.collect(summarizing<span class="constructor">Long(Dish::<span class="params">getCalories</span>)</span>)).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="summingInt、summingDouble、summingLong"><a href="#summingInt、summingDouble、summingLong" class="headerlink" title="summingInt、summingDouble、summingLong"></a>summingInt、summingDouble、summingLong</h2><p>方法的声明</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static <span class="params">&lt;T&gt;</span> Collector<span class="params">&lt;T,?,Double&gt;</span>  summingDouble(ToDoubleFunction<span class="params">&lt;? super T&gt;</span> mapper) <span class="comment">// 求和</span></span><br><span class="line">static <span class="params">&lt;T&gt;</span> Collector<span class="params">&lt;T,?,Integer&gt;</span> summingInt(ToIntFunction<span class="params">&lt;? super T&gt;</span> mapper) <span class="comment">// 求和</span></span><br><span class="line">static <span class="params">&lt;T&gt;</span> Collector<span class="params">&lt;T,?,Long&gt;</span> summingLong(ToLongFunction<span class="params">&lt;? super T&gt;</span> mapper) <span class="comment">// 求和</span></span><br></pre></td></tr></table></figure><p>方法的使用</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.collect(summing<span class="constructor">Int(Dish::<span class="params">getCalories</span>)</span>)).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.collect(summing<span class="constructor">Double(Dish::<span class="params">getCalories</span>)</span>)).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">menu</span>.<span class="params">stream</span>()</span>.collect(summing<span class="constructor">Long(Dish::<span class="params">getCalories</span>)</span>)).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
            <tag> collector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lambda与集合</title>
      <link href="/post/4a10e949.html"/>
      <url>/post/4a10e949.html</url>
      
        <content type="html"><![CDATA[<h1 id="lambda与集合"><a href="#lambda与集合" class="headerlink" title="lambda与集合"></a>lambda与集合</h1><p>首先回顾一下Java集合框架的接口继承结构：<br><img src="https://gitee.com/morris131/morris-book/raw/master/back/java/java8/images/1574144689272.png" alt></p><a id="more"></a><p>上图中绿色标注的接口类，表示在Java8中加入了新的接口方法，当然由于继承关系，他们相应的子类也都会继承这些新方法。下表详细列举了这些方法。</p><table><thead><tr><th>接口名</th><th>Java8新加入的方法</th></tr></thead><tbody><tr><td>Collection</td><td>removeIf() spliterator() stream() parallelStream() forEach()</td></tr><tr><td>List</td><td>replaceAll() sort()</td></tr><tr><td>Map</td><td>getOrDefault() forEach() replaceAll() putIfAbsent() remove() replace() computeIfAbsent() computeIfPresent() compute() merge()</td></tr></tbody></table><p>这些新加入的方法大部分要用到<code>java.util.function</code>包下的接口，这意味着这些方法大部分都跟Lambda表达式相关。我们将逐一学习这些方法。</p><h2 id="Collection中的新方法"><a href="#Collection中的新方法" class="headerlink" title="Collection中的新方法"></a>Collection中的新方法</h2><p>接口<code>Collection</code>和<code>List</code>新加入了一些方法，我们以<code>List</code>的子类<code>ArrayList</code>为例来说明。</p><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><p>该方法的签名为：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void for<span class="constructor">Each(Consumer&lt;? <span class="params">super</span> E&gt; <span class="params">action</span>)</span></span><br></pre></td></tr></table></figure><p>作用是迭代容器中所有的元素执行<code>action</code>指定的动作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java7以前需使用for增强实现迭代</span></span><br><span class="line"><span class="keyword">for</span> (Dish dish : dishes) &#123;</span><br><span class="line">    System.out.println(dish);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历所有的元素</span></span><br><span class="line">dishes.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="removeIf"><a href="#removeIf" class="headerlink" title="removeIf()"></a>removeIf()</h3><p>该方法签名为</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">boolean</span> removeIf(Predicate&lt;? <span class="keyword">super</span> E&gt; <span class="built_in">filter</span>)</span><br></pre></td></tr></table></figure><p>作用是删除容器中所有满足<code>filter</code>指定条件的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除所有的蔬菜元素</span></span><br><span class="line">dishes.removeIf(Dish::isVegetarian);</span><br></pre></td></tr></table></figure><h3 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll()"></a>replaceAll()</h3><p>该方法签名为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; <span class="keyword">operator</span>)</span></span></span><br></pre></td></tr></table></figure><p>作用是对每个元素执行<code>operator</code>指定的操作，并用操作结果来替换原来的元素。UnaryOperator是函数式接口Function的子接口。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将所有的元素的名字改为大写</span></span><br><span class="line">List&lt;String&gt; strings = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">as</span><span class="constructor">List(<span class="string">"I"</span>, <span class="string">"love"</span>, <span class="string">"you"</span>, <span class="string">"too"</span>)</span>;</span><br><span class="line">strings.replace<span class="constructor">All(String::<span class="params">toUpperCase</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(strings);</span><br></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><p>该方法定义在<code>List</code>接口中，方法签名为</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="keyword">sort</span>(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span><br></pre></td></tr></table></figure><p>该方法根据<code>c</code>指定的比较规则对容器元素进行排序。</p><p><code>Comparator</code>接口我们并不陌生，其中有一个方法<code>int compare(T o1, T o2)</code>需要实现，显然该接口是个函数接口。</p><p>java8为Comparator接口提供了许多静态工具类方法，下面会一一讲解。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对整数列表升序排序</span></span><br><span class="line">List&lt;Integer&gt; list1 = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">as</span><span class="constructor">List(1, 11, 3, 9, 7)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"before sort: "</span> + list1);</span><br><span class="line">list1.sort(<span class="module-access"><span class="module"><span class="identifier">Comparator</span>.</span></span>natural<span class="constructor">Order()</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"after natural order sort: "</span> + list1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对整数列表降序排序</span></span><br><span class="line">List&lt;Integer&gt; list2 = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">as</span><span class="constructor">List(1, 11, 3, 9, 7)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"before sort: "</span> + list2);</span><br><span class="line">list2.sort(<span class="module-access"><span class="module"><span class="identifier">Comparator</span>.</span></span>reverse<span class="constructor">Order()</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"after reverse order sort: "</span> + list2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对对象的单个属性排序</span></span><br><span class="line">List&lt;Dish&gt; list3 = <span class="module-access"><span class="module"><span class="identifier">Dish</span>.</span></span>create<span class="constructor">List()</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"before sort: "</span> + list3);</span><br><span class="line">list3.sort(<span class="module-access"><span class="module"><span class="identifier">Comparator</span>.</span></span>comparing<span class="constructor">Int(Dish :: <span class="params">getCalories</span>)</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"after sort: "</span> + list3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对对象的多个属性排序</span></span><br><span class="line">List&lt;Dish&gt; list4 = <span class="module-access"><span class="module"><span class="identifier">Dish</span>.</span></span>create<span class="constructor">List()</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"before sort: "</span> + list4);</span><br><span class="line"><span class="comment">// 先以卡路里降序，后以名字升序</span></span><br><span class="line">list4.sort(<span class="module-access"><span class="module"><span class="identifier">Comparator</span>.</span></span>comparing<span class="constructor">Int(Dish::<span class="params">getCalories</span>)</span>.reversed<span class="literal">()</span>.<span class="keyword">then</span><span class="constructor">Comparing(Dish :: <span class="params">getName</span>)</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"after sort: "</span> + list4);</span><br></pre></td></tr></table></figure><h3 id="spliterator"><a href="#spliterator" class="headerlink" title="spliterator()"></a>spliterator()</h3><p>方法签名为<code>Spliterator&lt;E&gt; spliterator()</code>，该方法返回容器的可拆分迭代器。从名字来看该方法跟<code>iterator()</code>方法有点像，我们知道<code>Iterator</code>是用来迭代容器的，<code>Spliterator</code>也有类似作用，但二者有如下不同：</p><ol><li><code>Spliterator</code>既可以像<code>Iterator</code>那样逐个迭代，也可以批量迭代。批量迭代可以降低迭代的开销。</li><li><code>Spliterator</code>是可拆分的，一个<code>Spliterator</code>可以通过调用<code>Spliterator&lt;T&gt; trySplit()</code>方法来尝试分成两个。一个是<code>this</code>，另一个是新返回的那个，这两个迭代器代表的元素没有重叠。</li></ol><p>可通过（多次）调用<code>Spliterator.trySplit()</code>方法来分解负载，以便多线程处理。</p><h2 id="Map中的新方法"><a href="#Map中的新方法" class="headerlink" title="Map中的新方法"></a>Map中的新方法</h2><p>相比<code>Collection</code>，<code>Map</code>中加入了更多的方法，我们以<code>HashMap</code>为例来逐一探秘。</p><h3 id="forEach-1"><a href="#forEach-1" class="headerlink" title="forEach()"></a>forEach()</h3><p>该方法签名为</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void for<span class="constructor">Each(BiConsumer&lt;? <span class="params">super</span> K,? <span class="params">super</span> V&gt; <span class="params">action</span>)</span></span><br></pre></td></tr></table></figure><p>作用是遍历<code>Map</code>中的每个映射执行<code>action</code>指定的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>, <span class="string">"one"</span>);</span><br><span class="line">map.put(<span class="number">2</span>, <span class="string">"two"</span>);</span><br><span class="line">map.put(<span class="number">3</span>, <span class="string">"three"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java7以及之前迭代Map</span></span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;Integer, String&gt; entry : map.entrySet())&#123;</span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">"="</span> + entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用forEach()结合Lambda表达式迭代Map</span></span><br><span class="line">map.forEach((k, v) -&gt; System.out.println(k + <span class="string">"="</span> + v));</span><br></pre></td></tr></table></figure><h3 id="getOrDefault"><a href="#getOrDefault" class="headerlink" title="getOrDefault()"></a>getOrDefault()</h3><p>该方法跟Lambda表达式没关系，但是很有用。方法签名为<code>V getOrDefault(Object key, V defaultValue)</code>，作用是按照给定的<code>key</code>查询<code>Map</code>中对应的<code>value</code>，如果没有找到则返回<code>defaultValue</code>。使用该方法程序员可以省去查询指定键值是否存在的麻烦。</p><h3 id="putIfAbsent"><a href="#putIfAbsent" class="headerlink" title="putIfAbsent()"></a>putIfAbsent()</h3><p>该方法跟Lambda表达式没关系，但是很有用。方法签名为<code>V putIfAbsent(K key, V value)</code>，作用是只有在不存在<code>key</code>值的映射或映射值为<code>null</code>时，才将<code>value</code>指定的值放入到<code>Map</code>中，否则不对<code>Map</code>做更改．该方法将条件判断和赋值合二为一，使用起来更加方便．</p><h3 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h3><p>我们都知道<code>Map</code>中有一个<code>remove(Object key)</code>方法，来根据指定<code>key</code>值删除<code>Map</code>中的映射关系；Java8新增了<code>remove(Object key, Object value)</code>方法，只有在当前<code>Map</code>中<code>key</code>正好映射到<code>value</code>时才删除该映射，否则什么也不做．</p><h3 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h3><p>在Java7及以前，要想替换<code>Map</code>中的映射关系可通过<code>put(K key, V value)</code>方法实现，该方法总是会用新值替换原来的值．为了更精确的控制替换行为，Java8在<code>Map</code>中加入了两个<code>replace()</code>方法，分别如下：</p><ul><li><code>replace(K key, V value)</code>，只有在当前<code>Map</code>中<strong><code>key</code>的映射存在时</strong>才用<code>value</code>去替换原来的值，否则什么也不做．</li><li><code>replace(K key, V oldValue, V newValue)</code>，只有在当前<code>Map</code>中<strong><code>key</code>的映射存在且等于<code>oldValue</code>时</strong>才用<code>newValue</code>去替换原来的值，否则什么也不做．</li></ul><h3 id="replaceAll-1"><a href="#replaceAll-1" class="headerlink" title="replaceAll()"></a>replaceAll()</h3><p>该方法签名为<code>replaceAll(BiFunction&lt;? super K,? super V,? extends V&gt; function)</code>，作用是对<code>Map</code>中的每个映射执行<code>function</code>指定的操作，并用<code>function</code>的执行结果替换原来的<code>value</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将所有元素的值都转换成大写</span></span><br><span class="line">map.replaceAll((k,v) -&gt; v.toUpperCase());</span><br></pre></td></tr></table></figure><h3 id="merge"><a href="#merge" class="headerlink" title="merge()"></a>merge()</h3><p>该方法签名为<code>merge(K key, V value, BiFunction&lt;? super V,? super V,? extends V&gt; remappingFunction)</code>，作用是：</p><ol><li>如果<code>Map</code>中<code>key</code>对应的映射不存在或者为<code>null</code>，则将<code>value</code>（不能是<code>null</code>）关联到<code>key</code>上；</li><li>否则执行<code>remappingFunction</code>，如果执行结果非<code>null</code>则用该结果跟<code>key</code>关联，否则在<code>Map</code>中删除<code>key</code>的映射．</li></ol><p><code>merge()</code>方法虽然语义有些复杂，但该方法的用方式很明确，一个比较常见的场景是将新的错误信息拼接到原来的信息上，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.merge(key, newMsg, (v1, v2) -&gt; v1+v2);</span><br></pre></td></tr></table></figure><h3 id="compute"><a href="#compute" class="headerlink" title="compute()"></a>compute()</h3><p>该方法签名为<code>compute(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)</code>，作用是把<code>remappingFunction</code>的计算结果关联到<code>key</code>上，如果计算结果为<code>null</code>，则在<code>Map</code>中删除<code>key</code>的映射．</p><p>要实现上述<code>merge()</code>方法中错误信息拼接的例子，使用<code>compute()</code>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.compute(key, (k,v) -&gt; v==<span class="keyword">null</span> ? newMsg : v.concat(newMsg));</span><br></pre></td></tr></table></figure><h3 id="computeIfAbsent"><a href="#computeIfAbsent" class="headerlink" title="computeIfAbsent()"></a>computeIfAbsent()</h3><p>该方法签名为<code>V computeIfAbsent(K key, Function&lt;? super K,? extends V&gt; mappingFunction)</code>，作用是：只有在当前<code>Map</code>中不存在<code>key</code>值的映射或映射值为<code>null</code>时，才调用<code>mappingFunction</code>，并在<code>mappingFunction</code>执行结果非<code>null</code>时，将结果跟<code>key</code>关联．</p><p><code>computeIfAbsent()</code>常用来对<code>Map</code>的某个<code>key</code>值建立初始化映射．比如我们要实现一个多值映射，<code>Map</code>的定义可能是<code>Map&lt;K,Set&lt;V&gt;&gt;</code>，要向<code>Map</code>中放入新值，可通过如下代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, Set&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">// Java7及以前的实现方式</span></span><br><span class="line"><span class="keyword">if</span>(map.containsKey(<span class="number">1</span>))&#123;</span><br><span class="line">    map.get(<span class="number">1</span>).add(<span class="string">"one"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    Set&lt;String&gt; valueSet = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">    valueSet.add(<span class="string">"one"</span>);</span><br><span class="line">    map.put(<span class="number">1</span>, valueSet);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Java8的实现方式</span></span><br><span class="line">map.computeIfAbsent(<span class="number">1</span>, v -&gt; <span class="keyword">new</span> HashSet&lt;String&gt;()).add(<span class="string">"yi"</span>);</span><br></pre></td></tr></table></figure><p>使用<code>computeIfAbsent()</code>将条件判断和添加操作合二为一，使代码更加简洁．</p><h3 id="computeIfPresent"><a href="#computeIfPresent" class="headerlink" title="computeIfPresent()"></a>computeIfPresent()</h3><p>该方法签名为<code>V computeIfPresent(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)</code>，作用跟<code>computeIfAbsent()</code>相反，即，只有在当前<code>Map</code>中<strong>存在<code>key</code>值的映射且非<code>null</code>时</strong>，才调用<code>remappingFunction</code>，如果<code>remappingFunction</code>执行结果为<code>null</code>，则删除<code>key</code>的映射，否则使用该结果替换<code>key</code>原来的映射．</p><p>这个函数的功能跟如下代码是等效的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java7及以前跟computeIfPresent()等效的代码</span></span><br><span class="line"><span class="keyword">if</span> (map.get(key) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    V oldValue = map.get(key);</span><br><span class="line">    V newValue = remappingFunction.apply(key, oldValue);</span><br><span class="line">    <span class="keyword">if</span> (newValue != <span class="keyword">null</span>)</span><br><span class="line">        map.put(key, newValue);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        map.remove(key);</span><br><span class="line">    <span class="keyword">return</span> newValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Optional</title>
      <link href="/post/6488f302.html"/>
      <url>/post/6488f302.html</url>
      
        <content type="html"><![CDATA[<h1 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h1><p>Java8在java.util包中添加了一个新的类Optional。</p><a id="more"></a><p>Optional类是一个容器，用于表示可能包含也可能不包含非null值。</p><p>Optional类提供了许多方法用于处理<code>可用</code>或<code>不可用</code>，而不是简单的检查空值情况。</p><p>java.util.Optional类的声明如下</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Optional&lt;T&gt;</span> <span class="keyword">extends</span> <span class="title">Object</span></span></span><br></pre></td></tr></table></figure><p>注意：该类是一个最终类，不能被继承和扩展。</p><h2 id="创建Optional对象"><a href="#创建Optional对象" class="headerlink" title="创建Optional对象"></a>创建Optional对象</h2><p>Optional类提供了三个静态方法用于创建Optional类的实例，这三个方法的返回值都是Optional<t>。</t></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>empty()</td><td>创建一个空的Optional类的实例</td></tr><tr><td>of(T value)</td><td>创建一个包含了指定T类型的value值的Optional实例</td></tr><tr><td>ofNullable(T value)</td><td>如果value非null，则创建一个包含了指定T类型的value值的Optional实例，否则创建一个空的Optional实例</td></tr></tbody></table><p>Optional创建对象的使用：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Dish dish = <span class="keyword">new</span> <span class="constructor">Dish(<span class="string">"pork"</span>, <span class="params">false</span>, 800, Dish.Type.MEAT)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个空的Optional</span></span><br><span class="line">Optional&lt;Dish&gt; dish1 = <span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span>empty<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依据一个非空值创建Optional，dish是一个null，这段代码会立即抛出一个NullPointerException,而不会等到使用时再报错</span></span><br><span class="line">Optional&lt;Dish&gt; dish2 = <span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span>(dish);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可接受null的Optional</span></span><br><span class="line">Optional&lt;Dish&gt; dish3 = <span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">dish</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="Optional类提供的方法"><a href="#Optional类提供的方法" class="headerlink" title="Optional类提供的方法"></a>Optional类提供的方法</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Optional<t> filter(Predicate&lt;? super T&gt; predicate)</t></td><td>如果存在值，并且值与给定谓词匹配，则返回描述值的Optional，否则返回空Optional</td></tr><tr><td><u> Optional<u>; flatMap(Function&lt;? super T,Optional<u>&gt; mapper)</u></u></u></td><td>如果值存在，则将flatMap应用到该值上并返回应用后的结果，如果值不存在，则返回一个空的Optional</td></tr><tr><td>T get()</td><td>如果此Optional中存在值，则返回该值，否则抛出NoSuchElementException 异常</td></tr><tr><td>void ifPresent(Consumer&lt;? super T&gt; consumer)</td><td>如果值存在，则使用该值作为参数调用方法consumer。如果值不存在，则什么事情都不做</td></tr><tr><td>boolean isPresent()</td><td>如果值存在则返回 true ，否则返回 false</td></tr><tr><td><u> Optional<u> map(Function&lt;? super T,? extends U&gt; mapper)</u></u></td><td>如果存在值，则将传递的map函数应用于该值，如果结果为非null，则返回描述结果的Optionals</td></tr><tr><td>T orElse(T other)</td><td>如果值存在则返回值，否则返回other</td></tr><tr><td>T orElseGet(Supplier&lt;? extends T&gt; other)</td><td>如果值存在则返回值，否则调用other并返回该调用的结果</td></tr><tr><td><x extends throwable> T orElseThrow(Supplier&lt;? extends X&gt;&gt;exceptionSupplier)</x></td><td>如果值存在，则返回包含的值，否则抛出由开发者提供的异常</td></tr></tbody></table><p>Optional的使用：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Dish&gt; dish4 = <span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span>(dish).filter(Dish::isVegetarian);</span><br><span class="line">dish4.<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"></span><br><span class="line">Dish dish5 = <span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span>(dish).get<span class="literal">()</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(dish5);</span><br><span class="line"></span><br><span class="line">boolean present = <span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span>(dish).is<span class="constructor">Present()</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(present);</span><br><span class="line"></span><br><span class="line">Dish dish6 = null;</span><br><span class="line">dish6  = <span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">dish6</span>)</span>.<span class="keyword">or</span><span class="constructor">Else(<span class="params">dish</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(dish6);</span><br></pre></td></tr></table></figure><h2 id="map与flatMap"><a href="#map与flatMap" class="headerlink" title="map与flatMap"></a>map与flatMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.java8.optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Insurance insurance = <span class="keyword">new</span> Insurance();</span><br><span class="line">        insurance.setName(<span class="string">"morris"</span>);</span><br><span class="line"></span><br><span class="line">        Car car = <span class="keyword">new</span> Car();</span><br><span class="line">        car.setInsurance(Optional.ofNullable(insurance));</span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setCar(Optional.ofNullable(car));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用map从Optional对象中提取和转换值</span></span><br><span class="line">        Optional.of(insurance).map(Insurance::getName).ifPresent(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用flatMap链接Optional对象</span></span><br><span class="line">        String carInsuranceName = getCarInsuranceName(Optional.ofNullable(person));</span><br><span class="line">        System.out.println(carInsuranceName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCarInsuranceName</span><span class="params">(Optional&lt;Person&gt; person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person.flatMap(Person::getCar)</span><br><span class="line">                .flatMap(Car::getInsurance)</span><br><span class="line">                .map(Insurance::getName)</span><br><span class="line">                .orElse(<span class="string">"Unknown"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Optional&lt;Car&gt; car;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Optional&lt;Car&gt; <span class="title">getCar</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> car; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCar</span><span class="params">(Optional&lt;Car&gt; car)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.car = car;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Optional&lt;Insurance&gt; insurance;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Optional&lt;Insurance&gt; <span class="title">getInsurance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> insurance; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInsurance</span><span class="params">(Optional&lt;Insurance&gt; insurance)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.insurance = insurance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Insurance</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream流（下）</title>
      <link href="/post/c97137e1.html"/>
      <url>/post/c97137e1.html</url>
      
        <content type="html"><![CDATA[<h1 id="Stream流（下）"><a href="#Stream流（下）" class="headerlink" title="Stream流（下）"></a>Stream流（下）</h1><h2 id="stream中三个参数的reduce方法的理解"><a href="#stream中三个参数的reduce方法的理解" class="headerlink" title="stream中三个参数的reduce方法的理解"></a>stream中三个参数的reduce方法的理解</h2><a id="more"></a><h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">U</span>&gt;</span> U reduce(U identity,</span><br><span class="line">             BiFunction<span class="tag">&lt;<span class="name">U,</span> ? <span class="attr">super</span> <span class="attr">T</span>, <span class="attr">U</span>&gt;</span> accumulator,</span><br><span class="line">             BinaryOperator<span class="tag">&lt;<span class="name">U</span>&gt;</span> combiner);</span><br></pre></td></tr></table></figure><p>参数解释：</p><ul><li>标识：组合函数的标识值，累加器的初始值。</li><li>累加器：一个关联的、不干扰的、无状态的函数，用于将额外的元素合并到结果中。</li><li>组合器：用于组合两个值的关联、不干扰、无状态函数，必须与累加器函数兼容。</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>第三个参数用于在并行计算下合并各个线程的计算结果，并行流运行时，内部使用了fork-join框架</p><p><img src="https://gitee.com/morris131/morris-book/raw/master/back/java/java8/images/1574080549996.png" alt></p><p>多线程时,多个线程同时参与运算，多个线程执行任务,必然会产生多个结果，那么如何将他们进行正确的合并，这就是第三个参数的作用。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.java8.stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> ReduceExample &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> sum = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">1000</span>).boxed().reduce(<span class="number">0</span>, <span class="type">Integer</span>::sum, (x, y) -&gt; &#123;</span><br><span class="line">            // 不会执行，不影响结果</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("sum=" + sum);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("-------------");</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> sum2 = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">1000</span>).boxed().parallel().reduce(<span class="number">0</span>, <span class="type">Integer</span>::sum, (x, y) -&gt; &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.print("thread name: " + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.print(" x=" + x);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(" y=" + y);</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("sum2=" + sum2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sum</span>=500500</span><br><span class="line">-------------</span><br><span class="line">thread name: main <span class="attribute">x</span>=40703 <span class="attribute">y</span>=45297</span><br><span class="line">thread name: main <span class="attribute">x</span>=32953 <span class="attribute">y</span>=37422</span><br><span class="line">thread name: main <span class="attribute">x</span>=70375 <span class="attribute">y</span>=86000</span><br><span class="line">thread name: main <span class="attribute">x</span>=56203 <span class="attribute">y</span>=61047</span><br><span class="line">thread name: main <span class="attribute">x</span>=48453 <span class="attribute">y</span>=53172</span><br><span class="line">thread name: main <span class="attribute">x</span>=101625 <span class="attribute">y</span>=117250</span><br><span class="line">thread name: main <span class="attribute">x</span>=156375 <span class="attribute">y</span>=218875</span><br><span class="line">thread name: ForkJoinPool.commonPool-worker-2 <span class="attribute">x</span>=17453 <span class="attribute">y</span>=21672</span><br><span class="line">thread name: ForkJoinPool.commonPool-worker-1thread name: ForkJoinPool.commonPool-worker-2 <span class="attribute">x</span>=9703 <span class="attribute">x</span>=25203 <span class="attribute">y</span>=13797</span><br><span class="line"> <span class="attribute">y</span>=29547</span><br><span class="line">thread name: ForkJoinPool.commonPool-worker-2 <span class="attribute">x</span>=39125 <span class="attribute">y</span>=54750</span><br><span class="line">thread name: ForkJoinPool.commonPool-worker-1 <span class="attribute">x</span>=1953 <span class="attribute">y</span>=5922</span><br><span class="line">thread name: ForkJoinPool.commonPool-worker-1 <span class="attribute">x</span>=7875 <span class="attribute">y</span>=23500</span><br><span class="line">thread name: ForkJoinPool.commonPool-worker-1 <span class="attribute">x</span>=31375 <span class="attribute">y</span>=93875</span><br><span class="line">thread name: ForkJoinPool.commonPool-worker-1 <span class="attribute">x</span>=125250 <span class="attribute">y</span>=375250</span><br><span class="line"><span class="attribute">sum2</span>=500500</span><br></pre></td></tr></table></figure><p>从运行结果可知，reduce方法的第三个参数用于在并行计算下合并各个线程的计算结果。</p><h2 id="数值流"><a href="#数值流" class="headerlink" title="数值流"></a>数值流</h2><p>在Stream里元素都是对象，那么，当我们操作一个数字流的时候就不得不考虑一个问题，拆箱和装箱。虽然自动拆箱不需要我们处理，但依旧有隐含的成本在里面。</p><p>Java8引入了3个原始类型特化流接口来解决这个问题：IntStream,DoubleStream,LongStream, 分别将流中的元素特化为int、long、double，从而避免了暗含的装箱成本。</p><h3 id="对象流转数值流"><a href="#对象流转数值流" class="headerlink" title="对象流转数值流"></a>对象流转数值流</h3><p>将对象流转换为数值流的常用方法是mapToInt、mapToDouble和mapToLong。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IntStream <span class="built_in">int</span>Stream = Arrays.asList(<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>).stream().mapToInt(Integer::<span class="built_in">int</span>Value);</span><br></pre></td></tr></table></figure><h3 id="数值流转对象流"><a href="#数值流转对象流" class="headerlink" title="数值流转对象流"></a>数值流转对象流</h3><p>使用boxed方法。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Stream&lt;Integer&gt; </span><span class="keyword">boxed </span>= intStream.<span class="keyword">boxed();</span></span><br></pre></td></tr></table></figure><h3 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h3><p>有时候需要生成一个数值范围，比如1到30. 可以直接使用数值流生成。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">IntStream</span>.</span></span>range(<span class="number">1</span>, <span class="number">5</span>).for<span class="constructor">Each(System.<span class="params">out</span>::<span class="params">print</span>)</span>; <span class="comment">// 不包含结束值</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println<span class="literal">()</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">IntStream</span>.</span></span>range<span class="constructor">Closed(1, 5)</span>.for<span class="constructor">Each(System.<span class="params">out</span>::<span class="params">print</span>)</span>; <span class="comment">// 包含结束值</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println<span class="literal">()</span>;</span><br></pre></td></tr></table></figure><h3 id="数值流特殊函数"><a href="#数值流特殊函数" class="headerlink" title="数值流特殊函数"></a>数值流特殊函数</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// min</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">IntStream</span>.</span></span>range<span class="constructor">Closed(1, 5)</span>.min<span class="literal">()</span>.<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// max</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">IntStream</span>.</span></span>range<span class="constructor">Closed(1, 5)</span>.max<span class="literal">()</span>.<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sum</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">IntStream</span>.</span></span>range<span class="constructor">Closed(1, 5)</span>.sum<span class="literal">()</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// summaryStatistics</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">IntStream</span>.</span></span>range<span class="constructor">Closed(1, 5)</span>.summary<span class="constructor">Statistics()</span>);</span><br></pre></td></tr></table></figure><h3 id="默认值OptionalInt"><a href="#默认值OptionalInt" class="headerlink" title="默认值OptionalInt"></a>默认值OptionalInt</h3><p>Optional可以用Integer、String等参考类型来参数化。对于三种数据流，也分别有一个Optional原始类型：OptionalInt、OptionalDouble和OptionalLong。</p><p><code>IntStream.rangeClosed(1, 5).min()</code>有可能没有最小值，这时返回的是一个OptionalInt，返回0就不合理了。</p><h2 id="构建流"><a href="#构建流" class="headerlink" title="构建流"></a>构建流</h2><h3 id="从值生成流"><a href="#从值生成流" class="headerlink" title="从值生成流"></a>从值生成流</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(Stream.<span class="params">of</span>(<span class="string">"hello"</span>, <span class="string">"morris"</span>, <span class="string">"world"</span>, <span class="string">"stream"</span>)</span>.collect(<span class="module-access"><span class="module"><span class="identifier">Collectors</span>.</span></span>joining(<span class="string">","</span>))).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="从数组生成流"><a href="#从数组生成流" class="headerlink" title="从数组生成流"></a>从数组生成流</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(Arrays.<span class="params">stream</span>(<span class="params">new</span> <span class="params">int</span>[]&#123;2, 3, 1, 4&#125;)</span>.boxed<span class="literal">()</span>.map(i -&gt; <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">i</span>)</span>).collect(<span class="module-access"><span class="module"><span class="identifier">Collectors</span>.</span></span>joining(<span class="string">","</span>))).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="从文件生成流"><a href="#从文件生成流" class="headerlink" title="从文件生成流"></a>从文件生成流</h3><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try(Stream&lt;String&gt; stream = Files.lines(Paths.get("D:<span class="symbol">\\</span>gitPrj<span class="symbol">\\</span>morris-book<span class="symbol">\\</span>Java<span class="symbol">\\</span>rocketmq<span class="symbol">\\</span>java8<span class="symbol">\\</span>src<span class="symbol">\\</span>main<span class="symbol">\\</span>java<span class="symbol">\\</span>com<span class="symbol">\\</span>morris<span class="symbol">\\</span>java8<span class="symbol">\\</span>stream<span class="symbol">\\</span>Trader.java"))) &#123;</span><br><span class="line">    stream.limit(5).forEach(System.out::println);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无限流"><a href="#无限流" class="headerlink" title="无限流"></a>无限流</h3><p>使用无限流时注意使用limit限制流的大小，否则会一直无限生成下去。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// iterate生成流</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(Stream.<span class="params">iterate</span>(0, <span class="params">n</span> -&gt; <span class="params">n</span> + 2)</span>.limit(<span class="number">10</span>).map(i -&gt; <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">i</span>)</span>).collect(<span class="module-access"><span class="module"><span class="identifier">Collectors</span>.</span></span>joining(<span class="string">","</span>))).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// generate生成流</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(Stream.<span class="params">generate</span>(Math::<span class="params">random</span>)</span>.limit(<span class="number">5</span>).map(d -&gt; <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">d</span>)</span>).collect(<span class="module-access"><span class="module"><span class="identifier">Collectors</span>.</span></span>joining(<span class="string">","</span>))).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
            <tag> stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git标签管理</title>
      <link href="/post/f3c51558.html"/>
      <url>/post/f3c51558.html</url>
      
        <content type="html"><![CDATA[<h1 id="git标签管理"><a href="#git标签管理" class="headerlink" title="git标签管理"></a>git标签管理</h1><h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><p>切换到需要打标签的分支上：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">  dev</span><br><span class="line">* <span class="literal">master</span></span><br><span class="line">  test</span><br><span class="line"></span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">v1</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>语法：<code>git tag &lt;name&gt;</code></p><p>默认标签是打在最新提交的commit上的。</p><p>要为历史提交创建标签，找到历史提交的commit id，然后打上就可以了。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git log <span class="attribute">--pretty</span>=oneline --abbrev-commit</span><br><span class="line">ba5bc1c (HEAD -&gt; master, tag: v1.0) merge <span class="keyword">from</span> dev</span><br><span class="line">c619ab1 <span class="builtin-name">add</span> version9</span><br><span class="line">0e41234 (test) <span class="builtin-name">add</span> version8</span><br><span class="line">686fa9e version7</span><br><span class="line">ad4733a version6</span><br><span class="line">2513532 merge <span class="keyword">from</span> dev</span><br><span class="line">c6393e4 (dev) <span class="builtin-name">add</span> version5</span><br><span class="line">29d990c rm a</span><br><span class="line">f852ad2 <span class="builtin-name">add</span> ignore</span><br><span class="line">36aae98 <span class="builtin-name">add</span> a.tt</span><br><span class="line">8a3590b <span class="builtin-name">add</span> version4</span><br><span class="line">b14b06f Update readme.txt</span><br><span class="line">19ea396 <span class="builtin-name">add</span> version1</span><br><span class="line"></span><br><span class="line">$ git tag v0.9 2513532</span><br></pre></td></tr></table></figure><p>创建带有说明的标签，用-a指定标签名，-m指定说明文字：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">tag</span> <span class="title">-a</span> v0.<span class="number">1</span> -m <span class="string">"version 0.1"</span> <span class="number">19</span>ea396</span><br></pre></td></tr></table></figure><h2 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v0<span class="number">.1</span></span><br><span class="line">v0<span class="number">.9</span></span><br><span class="line">v1<span class="number">.0</span></span><br></pre></td></tr></table></figure><p>注意，标签不是按时间顺序列出，而是按字母排序的。</p><h2 id="查看标签信息"><a href="#查看标签信息" class="headerlink" title="查看标签信息"></a>查看标签信息</h2><p>可以用<code>git show &lt;tagname&gt;</code>查看标签信息：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ git show v0<span class="number">.1</span></span><br><span class="line">tag v0<span class="number">.1</span></span><br><span class="line">Tagger: morris &lt;<span class="symbol">morris131@</span><span class="number">126.</span>com&gt;</span><br><span class="line">Date:   Tue Nov <span class="number">5</span> <span class="number">15</span>:<span class="number">24</span>:<span class="number">14</span> <span class="number">2019</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">version <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">commit <span class="number">19</span>ea396f7aec90c7e2bac1269410a8f071363d3e (tag: v0<span class="number">.1</span>)</span><br><span class="line">Author: morris &lt;<span class="symbol">morris131@</span><span class="number">126.</span>com&gt;</span><br><span class="line">Date:   Wed Oct <span class="number">30</span> <span class="number">22</span>:<span class="number">49</span>:<span class="number">41</span> <span class="number">2019</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    add version1</span><br><span class="line"></span><br><span class="line">diff --git a/readme.txt b/readme.txt</span><br><span class="line">new file mode <span class="number">100644</span></span><br><span class="line">index <span class="number">0000000.</span>.dbfb31e</span><br><span class="line">--- /dev/<span class="literal">null</span></span><br><span class="line">+++ b/readme.txt</span><br><span class="line">@@ <span class="number">-0</span>,<span class="number">0</span> +<span class="number">1</span> @@</span><br><span class="line">+version1</span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure><p> 注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。</p><h2 id="推送标签到远程"><a href="#推送标签到远程" class="headerlink" title="推送标签到远程"></a>推送标签到远程</h2><p>如果要推送某个标签到远程，使用命令<code>git push origin &lt;tagname&gt;</code>：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin v1<span class="number">.0</span></span><br><span class="line">Counting objects: <span class="number">30</span>, done.</span><br><span class="line">Delta compression using up to <span class="number">4</span> threads.</span><br><span class="line">Compressing objects: <span class="number">100</span>% (<span class="number">24</span>/<span class="number">24</span>), done.</span><br><span class="line">Writing objects: <span class="number">100</span>% (<span class="number">30</span>/<span class="number">30</span>), <span class="number">2.53</span> KiB | <span class="number">0</span> bytes/s, done.</span><br><span class="line">Total <span class="number">30</span> (delta <span class="number">6</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">remote: Resolving deltas: <span class="number">100</span>% (<span class="number">6</span>/<span class="number">6</span>), done.</span><br><span class="line">To github.com:morris131/gittest.git</span><br><span class="line"> * [new tag]         v1<span class="number">.0</span> -&gt; v1<span class="number">.0</span></span><br></pre></td></tr></table></figure><p>或者，一次性推送全部尚未推送到远程的本地标签：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --tags</span><br><span class="line">Counting objects: <span class="number">1</span>, done.</span><br><span class="line">Writing objects: <span class="number">100</span>% (<span class="number">1</span>/<span class="number">1</span>), <span class="number">159</span> bytes | <span class="number">0</span> bytes/s, done.</span><br><span class="line">Total <span class="number">1</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">To github.com:morris131/gittest.git</span><br><span class="line"> * [new tag]         v0<span class="number">.1</span> -&gt; v0<span class="number">.1</span></span><br><span class="line"> * [new tag]         v0<span class="number">.9</span> -&gt; v0<span class="number">.9</span></span><br></pre></td></tr></table></figure><h2 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h2><p>删除本地的标签</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">tag</span> <span class="title">-d</span> v0.<span class="number">1</span></span><br><span class="line">Deleted <span class="keyword">tag</span> <span class="title">'v0</span>.<span class="number">1</span>' (was c0eb57d)</span><br></pre></td></tr></table></figure><p>要删除远程标签需先从本地删除然后从远程删除：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git push origin <span class="symbol">:refs/tags/v0</span>.<span class="number">1</span></span><br><span class="line">To <span class="symbol">github.com:</span>morris131/gittest.git</span><br><span class="line"> - [deleted]         v<span class="number">0</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure><p>要看看是否真的从远程库删除了标签，可以登陆GitHub查看。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream流（上）</title>
      <link href="/post/71cd5084.html"/>
      <url>/post/71cd5084.html</url>
      
        <content type="html"><![CDATA[<h1 id="Stream流（上）"><a href="#Stream流（上）" class="headerlink" title="Stream流（上）"></a>Stream流（上）</h1><p>Stream是从某个数据源获得的支持聚合操作的元素序列。</p><a id="more"></a><ul><li>元素序列：针对特定元素类型的有序集合流提供了一个接口。流不会存储元素，只会按需计算。</li><li>数据源：流所用到的数据源来自集合、数组或者I/O。</li><li>聚合操作：类似SQL语句一样的操作， 比如filter, map, reduce, find, match, sorted等。</li></ul><h2 id="流的创建"><a href="#流的创建" class="headerlink" title="流的创建"></a>流的创建</h2><p>Java8在推出流的同时，对集合框架也进行了一些比较大变更。主要是在Collection接口上提供了两种生成 Stream 的方法:</p><ul><li>stream() 方法，该方法以集合作为源，返回集合中的所有元素以在集合中出现的顺序组成的流。</li><li>parallelStream() 方法，该方法以集合作为源，返回一个支持并发操作的流。</li></ul><h2 id="流的操作"><a href="#流的操作" class="headerlink" title="流的操作"></a>流的操作</h2><p>流的使用一般包括三件事:</p><ul><li>一个数据源来执行一个查询;</li><li>一个中间操作链,形成一条流的流水线;</li><li>一个终端操作,执行流水线,并能生成结果</li></ul><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><table><thead><tr><th>操作</th><th>操作参数</th><th>函数描述符</th></tr></thead><tbody><tr><td>filter</td><td>Predicate</td><td>T -&gt; boolean</td></tr><tr><td>map</td><td>Function&lt;T,R&gt;</td><td>T-&gt;R</td></tr><tr><td>limit</td><td></td><td></td></tr><tr><td>sorted</td><td>Comparator</td><td>(T,T)-&gt;int</td></tr><tr><td>distinct</td><td></td><td></td></tr></tbody></table><h3 id="终端操作"><a href="#终端操作" class="headerlink" title="终端操作"></a>终端操作</h3><table><thead><tr><th>操作</th><th>目的</th></tr></thead><tbody><tr><td>forEach</td><td>消费流中的每个元素并对其应用Lambda.这一操作返回void</td></tr><tr><td>count</td><td>返回流中元素的个数,这一操作返回long</td></tr><tr><td>collect</td><td>把流归约成一个集合,比如List,Map甚至是Integer</td></tr><tr><td>reduce</td><td>归约，统计</td></tr></tbody></table><h2 id="流的使用"><a href="#流的使用" class="headerlink" title="流的使用"></a>流的使用</h2><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><p>迭代流的每个元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">dishList</span><span class="selector-class">.stream</span>()<span class="selector-class">.forEach</span>(<span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-pseudo">::println)</span>;</span><br></pre></td></tr></table></figure><h3 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h3><p>对流中元素进行排序</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dishList.stream<span class="literal">()</span>.sorted(<span class="module-access"><span class="module"><span class="identifier">Comparator</span>.</span></span>comparing<span class="constructor">Int(Dish::<span class="params">getCalories</span>)</span>).for<span class="constructor">Each(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>过滤元素</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Dish&gt;<span class="built_in"> filter </span>= dishList.stream().filter(Dish::isVegetarian).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h3><p>去除重复元素</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; distinct = Arrays.asList(<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">10</span>).stream().distinct().collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><p>限制返回元素个数</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; limit = Arrays.asList(<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">10</span>).stream().distinct().limit(<span class="number">3</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h3><p>跳过前面的元素个数，与limit联合使用可以实现类似sql的分页功能</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; skip = Arrays.asList(<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">10</span>).stream().distinct().skip(<span class="number">2</span>).limit(<span class="number">3</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>可以将流转换成另外一个元素的流</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; <span class="built_in">map</span> = dishList.stream().<span class="built_in">map</span>(Dish<span class="type">::getName</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h3><p>流的扁平化（将流中的流扁平化为一个流）</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; flatMap = dishList.stream<span class="literal">()</span>.flat<span class="constructor">Map(<span class="params">d</span> -&gt; Arrays.<span class="params">stream</span>(<span class="params">d</span>.<span class="params">getName</span>()</span>.split(<span class="string">""</span>))).distinct<span class="literal">()</span>.collect(<span class="module-access"><span class="module"><span class="identifier">Collectors</span>.</span></span><span class="keyword">to</span><span class="constructor">List()</span>);</span><br></pre></td></tr></table></figure><h3 id="anyMatch"><a href="#anyMatch" class="headerlink" title="anyMatch"></a>anyMatch</h3><p>只要有一个元素匹配就返回true</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span>ean anyMatch = Arrays.asList(<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">10</span>).stream().anyMatch(i -&gt; i % <span class="number">2</span> == <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="allMatch"><a href="#allMatch" class="headerlink" title="allMatch"></a>allMatch</h3><p>所有元素匹配返回true</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span>ean allMatch = Arrays.asList(<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">10</span>).stream().allMatch(i -&gt; i % <span class="number">2</span> == <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="findAny"><a href="#findAny" class="headerlink" title="findAny"></a>findAny</h3><p>找到任意一个元素就返回</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.asList(<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">10</span>).stream().findAny().ifPresent(System.<span class="keyword">out</span>::println);</span><br></pre></td></tr></table></figure><h3 id="findFirst"><a href="#findFirst" class="headerlink" title="findFirst"></a>findFirst</h3><p>返回第一个元素</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.asList(<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">10</span>).stream().findFirst().ifPresent(System.<span class="keyword">out</span>::println);</span><br></pre></td></tr></table></figure><h3 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Optional</span>.</span></span><span class="keyword">of</span><span class="constructor">Nullable(<span class="params">dishList</span>.<span class="params">stream</span>()</span>.map(Dish::getCalories).reduce(<span class="number">0</span>, Integer::sum)).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>; <span class="comment">// 等价于下面的，注意返回值不一样</span></span><br><span class="line">dishList.stream<span class="literal">()</span>.map(Dish::getCalories).reduce(Integer::sum).<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="max"><a href="#max" class="headerlink" title="max"></a>max</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">dishList</span><span class="selector-class">.stream</span>()<span class="selector-class">.map</span>(<span class="attribute">Dish</span>::getCalories)<span class="selector-class">.reduce</span>(<span class="attribute">Integer</span>::max)<span class="selector-class">.ifPresent</span>(System.<span class="attribute">out</span>::println);</span><br></pre></td></tr></table></figure><h3 id="min"><a href="#min" class="headerlink" title="min"></a>min</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">dishList</span><span class="selector-class">.stream</span>()<span class="selector-class">.map</span>(<span class="attribute">Dish</span>::getCalories)<span class="selector-class">.reduce</span>(<span class="attribute">Integer</span>::min)<span class="selector-class">.ifPresent</span>(System.<span class="attribute">out</span>::println);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
            <tag> stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单链表</title>
      <link href="/post/71c610d3.html"/>
      <url>/post/71c610d3.html</url>
      
        <content type="html"><![CDATA[<h1 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h1><p>单链表是链表的其中一种基本结构。它是构成单链表的基本结点结构。在结点中数据域用来存储数据元素，指针域用于指向下一个具有相同结构的结点。</p><a id="more"></a><p>因为只有一个指针结点，称为单链表。</p><h2 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h2><p><img src="https://gitee.com/morris131/morris-book/raw/master/back/datastruct/images/20191104202941077_25758.png" alt="单链表"></p><p>链表以节点方式存储，是链式存储。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.data.struct.linklist;</span><br><span class="line"></span><br><span class="line">public class LinkedListExample &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Node</span> <span class="title">node1</span> = new <span class="keyword">Node</span><span class="title">(1</span>, <span class="string">"吕布"</span>);</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">node2</span> = new <span class="keyword">Node</span><span class="title">(2</span>, <span class="string">"赵子龙"</span>);</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">node3</span> = new <span class="keyword">Node</span><span class="title">(3</span>, <span class="string">"典卫"</span>);</span><br><span class="line"></span><br><span class="line">        LinkedList linkedList = new LinkedList();</span><br><span class="line">        linkedList.add(node1);</span><br><span class="line">        linkedList.add(node2);</span><br><span class="line">        linkedList.add(node3);</span><br><span class="line">        linkedList.show();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Node</span> <span class="title">node</span> = new <span class="keyword">Node</span><span class="title">(2</span>, <span class="string">"张三"</span>);</span><br><span class="line">        linkedList.set(<span class="keyword">node</span><span class="title">);</span></span><br><span class="line"><span class="title">        linkedList</span>.show();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------"</span>);</span><br><span class="line">        linkedList.remove(<span class="keyword">node</span><span class="title">);</span></span><br><span class="line"><span class="title">        linkedList</span>.show();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class LinkedList &#123;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">Node</span> <span class="title">head</span> = new <span class="keyword">Node</span><span class="title">(0</span>, null);</span><br><span class="line"></span><br><span class="line">    public void add(<span class="keyword">Node</span> <span class="title">node</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Node</span> <span class="title">temp</span> = head;</span><br><span class="line">        while(temp.hasNext()) &#123;</span><br><span class="line">            temp = temp.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        temp.setNext(<span class="keyword">node</span><span class="title">);</span></span><br><span class="line"><span class="title">    &#125;</span></span><br><span class="line"><span class="title"></span></span><br><span class="line"><span class="title">    public</span> void remove(<span class="keyword">Node</span> <span class="title">node</span>) &#123;</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">temp</span> = head;</span><br><span class="line">        while(temp.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">Node</span> <span class="title">next</span> = temp.getNext();</span><br><span class="line">            if(next.getNo() == <span class="keyword">node</span>.<span class="title">getNo</span>()) &#123;</span><br><span class="line">                temp.setNext(next.getNext());</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"没有找到节点:"</span> + <span class="keyword">node</span>.<span class="title">getNo</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void set(<span class="keyword">Node</span> <span class="title">node</span>) &#123;</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">temp</span> = head;</span><br><span class="line">        while(temp.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">Node</span> <span class="title">next</span> = temp.getNext();</span><br><span class="line">            if(next.getNo() == <span class="keyword">node</span>.<span class="title">getNo</span>()) &#123;</span><br><span class="line">                next.setName(<span class="keyword">node</span>.<span class="title">getName</span>());</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"没有找到节点:"</span> + <span class="keyword">node</span>.<span class="title">getNo</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">Node</span> <span class="title">find</span>(<span class="keyword">Node</span> <span class="title">node</span>) &#123;</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">temp</span> = head;</span><br><span class="line">        while(temp.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">Node</span> <span class="title">next</span> = temp.getNext();</span><br><span class="line">            if(next.getNo() == <span class="keyword">node</span>.<span class="title">getNo</span>()) &#123;</span><br><span class="line">                next.setName(<span class="keyword">node</span>.<span class="title">getName</span>());</span><br><span class="line">                return next;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = next;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void show() &#123;</span><br><span class="line">        <span class="keyword">Node</span> <span class="title">temp</span> = head;</span><br><span class="line">        while(temp.hasNext()) &#123;</span><br><span class="line">            temp = temp.getNext();</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class <span class="keyword">Node</span> <span class="title">&#123;</span></span><br><span class="line"><span class="title">    private</span> int no;</span><br><span class="line">    private <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">Node</span> <span class="title">next</span>;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">Node</span><span class="title">(int</span> no, <span class="keyword">String</span> name) &#123;</span><br><span class="line">        this.no = no;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getNo() &#123;</span><br><span class="line">        return no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setNo(int no) &#123;</span><br><span class="line">        this.no = no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">String</span> getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(<span class="keyword">String</span> name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">Node</span> <span class="title">getNext</span>() &#123;</span><br><span class="line">        return next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setNext(<span class="keyword">Node</span> <span class="title">next</span>) &#123;</span><br><span class="line">        this.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean hasNext() &#123;</span><br><span class="line">        return null != next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public <span class="keyword">String</span> toString() &#123;</span><br><span class="line">        return <span class="string">"Node&#123;"</span> +</span><br><span class="line">                <span class="string">"no="</span> + no +</span><br><span class="line">                <span class="string">", name='"</span> + name + '\'' +</span><br><span class="line">                '&#125;';</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> datastruct </category>
          
      </categories>
      
      
        <tags>
            
            <tag> datastruct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>稀疏数组</title>
      <link href="/post/a6455d41.html"/>
      <url>/post/a6455d41.html</url>
      
        <content type="html"><![CDATA[<h1 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h1><p>稀疏数组就是数组中大部分的内容值都未被使用（或都为零），在数组中仅有少部分的空间使用。因此造成内存空间的浪费，为了节省内存空间，并且不影响数组中原有的内容值，我们可以采用一种压缩的方式来表示稀疏数组的内容。</p><a id="more"></a><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>假设有一个9*7的数组，其内容如下：</p><p><img src="https://gitee.com/morris131/morris-book/raw/master/back/datastruct/images/20191104191453698_31019.png" alt="数组"></p><p>在此数组中，共有63个空间，但却只使用了5个元素，造成58个元素空间的浪费。以下我们就使用稀疏数组重新来定义这个数组：</p><p><img src="https://gitee.com/morris131/morris-book/raw/master/back/datastruct/images/20191104191518553_12615.png" alt="稀疏数组"></p><p>稀疏数组的处理方法是:</p><ul><li>第一部分所记录的是原数组的列数和行数以及元素使用的个数</li><li>第二部分所记录的是原数组中元素的位置和内容。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.data.struct.<span class="built_in">array</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">SparseArrayExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 二位数组</span></span><br><span class="line">        <span class="built_in">int</span>[][] <span class="built_in">array</span> = new <span class="built_in">int</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">        <span class="built_in">array</span>[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">array</span>[<span class="number">2</span>][<span class="number">4</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">array</span>[<span class="number">4</span>][<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">array</span>.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">array</span>[i].length; j++) &#123;</span><br><span class="line">                System.<span class="keyword">out</span>.printf(<span class="string">"%d \t"</span>, <span class="built_in">array</span>[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 二位数组转稀疏数组</span></span><br><span class="line">        <span class="built_in">int</span> count = <span class="number">0</span>; <span class="comment">// 有值元素个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">array</span>.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">array</span>[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">0</span> != <span class="built_in">array</span>[i][j]) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 稀疏数组</span></span><br><span class="line">        <span class="built_in">int</span>[][] sparseArray = new <span class="built_in">int</span>[count + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        sparseArray[<span class="number">0</span>][<span class="number">0</span>] = <span class="built_in">array</span>.length;</span><br><span class="line">        sparseArray[<span class="number">0</span>][<span class="number">1</span>] = <span class="built_in">array</span>[<span class="number">0</span>].length;</span><br><span class="line">        sparseArray[<span class="number">0</span>][<span class="number">2</span>] = count;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> count2 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">array</span>.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">array</span>[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">0</span> != <span class="built_in">array</span>[i][j]) &#123;</span><br><span class="line">                    sparseArray[count2][<span class="number">0</span>] = i;</span><br><span class="line">                    sparseArray[count2][<span class="number">1</span>] = j;</span><br><span class="line">                    sparseArray[count2++][<span class="number">2</span>] = <span class="built_in">array</span>[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"--------------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; sparseArray.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; sparseArray[i].length; j++) &#123;</span><br><span class="line">                System.<span class="keyword">out</span>.printf(<span class="string">"%d \t"</span>, sparseArray[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 稀疏数组转二位数组</span></span><br><span class="line">        <span class="built_in">int</span>[][] <span class="built_in">array</span>2 = new <span class="built_in">int</span>[sparseArray[<span class="number">0</span>][<span class="number">0</span>]][sparseArray[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; sparseArray.length; i++) &#123;</span><br><span class="line">            <span class="built_in">array</span>2[sparseArray[i][<span class="number">0</span>]][sparseArray[i][<span class="number">1</span>]] = sparseArray[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"--------------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">array</span>2.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">array</span>2[i].length; j++) &#123;</span><br><span class="line">                System.<span class="keyword">out</span>.printf(<span class="string">"%d \t"</span>, <span class="built_in">array</span>2[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> datastruct </category>
          
      </categories>
      
      
        <tags>
            
            <tag> datastruct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列</title>
      <link href="/post/b6c47025.html"/>
      <url>/post/b6c47025.html</url>
      
        <content type="html"><![CDATA[<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>队列是一个有序列表，可以用数组和链表来实现。</p><p>队列遵循先进先出（FIFO）原则。</p><a id="more"></a><h2 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h2><p><img src="https://gitee.com/morris131/morris-book/raw/master/back/datastruct/images/20191104195056188_15950.png" alt="数组实现队列"></p><h2 id="采用数组代码实现"><a href="#采用数组代码实现" class="headerlink" title="采用数组代码实现"></a>采用数组代码实现</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.data.struct.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class ArrayQueueExample &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        ArrayQueue queue = <span class="keyword">new</span> ArrayQueue(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">boolean</span> isRun = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(isRun) &#123;</span><br><span class="line">            System.out.<span class="built_in">print</span>(<span class="string">"a-添加元素 "</span>);</span><br><span class="line">            System.out.<span class="built_in">print</span>(<span class="string">"g-获取元素 "</span>);</span><br><span class="line">            System.out.<span class="built_in">print</span>(<span class="string">"h-获取队头元素 "</span>);</span><br><span class="line">            System.out.<span class="built_in">print</span>(<span class="string">"s-显示队列所有元素 "</span>);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"e-退出"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">char</span> <span class="built_in">key</span> = scanner.next().charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (<span class="built_in">key</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"请输入一个整数："</span>);</span><br><span class="line">                    <span class="built_in">int</span> n = scanner.nextInt();</span><br><span class="line">                    queue.<span class="built_in">add</span>(n);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'g'</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="built_in">int</span> i = queue.<span class="built_in">get</span>();</span><br><span class="line">                        System.out.<span class="built_in">println</span>(<span class="string">"获取一个元素："</span> + i);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        System.out.<span class="built_in">println</span>(<span class="string">"获取一个元素："</span> + e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="built_in">int</span> i = queue.head();</span><br><span class="line">                        System.out.<span class="built_in">println</span>(<span class="string">"获取队首元素："</span> + i);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        System.out.<span class="built_in">println</span>(<span class="string">"获取队首元素："</span> + e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">                    queue.show();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">                    isRun = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ArrayQueue &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> <span class="built_in">size</span>; <span class="comment">// 数组大小</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> front; <span class="comment">// 队头，指向队列第一个元素的前一个位置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> rear; <span class="comment">// 队尾 只需队列最后一个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span>[] data; <span class="comment">// 队列元素采用数组存储</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ArrayQueue(<span class="built_in">int</span> <span class="built_in">size</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">size</span> = <span class="built_in">size</span>;</span><br><span class="line">        <span class="keyword">this</span>.front = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">this</span>.rear = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">this</span>.data = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="built_in">size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断队列是否已满</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> isFull() &#123;</span><br><span class="line">        <span class="keyword">return</span> rear == <span class="built_in">size</span> - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断队列是否为空</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> isEmpty() &#123;</span><br><span class="line">        <span class="keyword">return</span> front == rear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加一个元素</span></span><br><span class="line"><span class="comment">     * @param n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">add</span>(<span class="built_in">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(isFull()) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"队列已满"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        data[++rear] = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取队头元素，并从队列移除</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">get</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data[++front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取队头元素，不从队列移除元素</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> head() &#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data[front+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示队列所有元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> show() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"队列为空"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = front + <span class="number">1</span>; i &lt;= rear; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"%d "</span> , data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="built_in">println</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在的缺陷：</p><ol><li>队列只能使用一次，无法复用。</li></ol><h2 id="用数组实现循环队列"><a href="#用数组实现循环队列" class="headerlink" title="用数组实现循环队列"></a>用数组实现循环队列</h2><h3 id="示意图-1"><a href="#示意图-1" class="headerlink" title="示意图"></a>示意图</h3><p><img src="https://gitee.com/morris131/morris-book/raw/master/back/datastruct/images/20191104195246228_11695.png" alt="循环队列为空"></p><p><img src="https://gitee.com/morris131/morris-book/raw/master/back/datastruct/images/20191104195326075_32074.png" alt="循环队列满"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.data.struct.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class CircularArrayQueueExample &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        CircularArray queue = <span class="keyword">new</span> CircularArray(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">boolean</span> isRun = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (isRun) &#123;</span><br><span class="line">            System.out.<span class="built_in">print</span>(<span class="string">"a-添加元素 "</span>);</span><br><span class="line">            System.out.<span class="built_in">print</span>(<span class="string">"g-获取元素 "</span>);</span><br><span class="line">            System.out.<span class="built_in">print</span>(<span class="string">"h-获取队头元素 "</span>);</span><br><span class="line">            System.out.<span class="built_in">print</span>(<span class="string">"s-显示队列所有元素 "</span>);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"e-退出"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">char</span> <span class="built_in">key</span> = scanner.next().charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (<span class="built_in">key</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"请输入一个整数："</span>);</span><br><span class="line">                    <span class="built_in">int</span> n = scanner.nextInt();</span><br><span class="line">                    queue.<span class="built_in">add</span>(n);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'g'</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="built_in">int</span> i = queue.<span class="built_in">get</span>();</span><br><span class="line">                        System.out.<span class="built_in">println</span>(<span class="string">"获取一个元素："</span> + i);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        System.out.<span class="built_in">println</span>(<span class="string">"获取一个元素："</span> + e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="built_in">int</span> i = queue.head();</span><br><span class="line">                        System.out.<span class="built_in">println</span>(<span class="string">"获取队首元素："</span> + i);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        System.out.<span class="built_in">println</span>(<span class="string">"获取队首元素："</span> + e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">                    queue.show();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">                    isRun = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class CircularArray &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> <span class="built_in">size</span>; <span class="comment">// 数组大小，实际可存储大小=size-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> front; <span class="comment">// 指向队列第一个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> rear; <span class="comment">// 指向队列最后一个元素的下一个位置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span>[] data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CircularArray(<span class="built_in">int</span> <span class="built_in">size</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">size</span> = <span class="built_in">size</span>;</span><br><span class="line">        <span class="keyword">this</span>.data = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="built_in">size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断队列是否已满</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> isFull() &#123;</span><br><span class="line">        <span class="keyword">return</span> (rear + <span class="built_in">size</span> + <span class="number">1</span>) % <span class="built_in">size</span> == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断队列是否为空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> isEmpty() &#123;</span><br><span class="line">        <span class="keyword">return</span> front == rear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加一个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">add</span>(<span class="built_in">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"队列已满"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        data[rear] = n;</span><br><span class="line">        rear = (rear + <span class="number">1</span>) % <span class="built_in">size</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取队头元素，并从队列移除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">get</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> value = data[front];</span><br><span class="line">        <span class="comment">// 移动front</span></span><br><span class="line">        front = (front + <span class="number">1</span>) % <span class="built_in">size</span>;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取队头元素，不从队列移除元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> head() &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示队列所有元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> show() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"队列为空"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = front; i &lt; front + <span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">"array[%d]=%d "</span>, i % <span class="built_in">size</span>, data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="built_in">println</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">size</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> (rear + <span class="built_in">size</span> - front) % <span class="built_in">size</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个循环队列会浪费掉一个元素。</p>]]></content>
      
      
      <categories>
          
          <category> datastruct </category>
          
      </categories>
      
      
        <tags>
            
            <tag> datastruct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义git</title>
      <link href="/post/ffae633b.html"/>
      <url>/post/ffae633b.html</url>
      
        <content type="html"><![CDATA[<h1 id="自定义git"><a href="#自定义git" class="headerlink" title="自定义git"></a>自定义git</h1><h2 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h2><p>例如在IDEA下进行Java开发，IDEA会自动生成.idea文件夹，maven打包会自动生成target文件夹，但是这些文件是不需要提交到git上的。那怎么忽略这些文件不提交到git呢？</p><a id="more"></a><p>在Git工作区的根目录下创建一个特殊的<code>.gitignore</code>文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。</p><p>编写.gitignore文件，内容如下：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">.idea/</span></span><br><span class="line">target/</span><br><span class="line">*<span class="strong">*/*</span><span class="strong">*.class</span></span><br></pre></td></tr></table></figure><p>最后需要将.gitignore文件提交到git。</p><p>有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被.gitignore忽略了：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add <span class="module-access"><span class="module"><span class="identifier">App</span>.</span></span><span class="keyword">class</span></span><br><span class="line">The following paths are ignored by one <span class="keyword">of</span> your .gitignore files:</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">App</span>.</span></span><span class="keyword">class</span></span><br><span class="line">Use -f <span class="keyword">if</span> you really want <span class="keyword">to</span> add them.</span><br></pre></td></tr></table></figure><p>如果你确实想添加该文件，可以用-f强制添加到Git：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add -f <span class="module-access"><span class="module"><span class="identifier">App</span>.</span></span><span class="keyword">class</span></span><br></pre></td></tr></table></figure><p>或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> check-ignore </span>-v App.class</span><br><span class="line"><span class="keyword">.gitignore</span>:3:*.classApp.class</span><br></pre></td></tr></table></figure><p>Git会告诉我们，.gitignore的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。</p><p>如果被忽略的文件比.gitignore先提交到git，那么这个文件的修改不会被git忽略。</p><h2 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global alias.st status</span><br><span class="line">$ git<span class="built_in"> config </span>--global alias.co checkout</span><br><span class="line">$ git<span class="built_in"> config </span>--global alias.ci commit</span><br><span class="line">$ git<span class="built_in"> config </span>--global alias.br branch</span><br><span class="line">$ git<span class="built_in"> config </span>--global alias.lg <span class="string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</span></span><br></pre></td></tr></table></figure><p>命令的执行都会修改用户目录下的.gitconfig文件，也可以直接手动修改此文件来配置别名。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[alias]</span><br><span class="line">st = status</span><br><span class="line">co = checkout</span><br><span class="line">ci = commit -<span class="keyword">m</span> </span><br><span class="line">br = branch</span><br><span class="line">lg = <span class="string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</span></span><br></pre></td></tr></table></figure><h2 id="设置比较工具"><a href="#设置比较工具" class="headerlink" title="设置比较工具"></a>设置比较工具</h2><p>可以设置BeyondCompare作为git的比较和合并的可视化工具,方便操作。</p><p>设置如下:</p><ol><li>先下载并安装BeyondCompare</li><li>命令输入如下配置</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#difftool 配置</span></span><br><span class="line">git<span class="built_in"> config </span>--global diff.tool bc4</span><br><span class="line">git<span class="built_in"> config </span>--global difftool.bc4.cmd <span class="string">"\"C:/Program Files/Beyond Compare 4/BComp.exe\" \"<span class="variable">$LOCAL</span>\" \"<span class="variable">$REMOTE</span>\""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mergeftool 配置</span></span><br><span class="line">git<span class="built_in"> config </span>--global merge.tool bc4</span><br><span class="line">git<span class="built_in"> config </span>--global mergetool.bc4.cmd  <span class="string">"\"C:/Program Files/Beyond Compare 4/BComp.exe\" \"<span class="variable">$LOCAL</span>\" \"<span class="variable">$REMOTE</span>\" \"<span class="variable">$BASE</span>\" \"<span class="variable">$MERGED</span>\""</span></span><br><span class="line">git<span class="built_in"> config </span>--global mergetool.bc4.trustExitCode <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#让git mergetool不再生成备份文件（*.orig）</span></span><br><span class="line">git<span class="built_in"> config </span>--global mergetool.keepBackup <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>若未生效，直接修改用户目录下.gitconfig文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[diff]</span><br><span class="line">tool = bc4</span><br><span class="line">[difftool <span class="string">"bc4"</span>]</span><br><span class="line"><span class="keyword">cmd</span><span class="bash"> = \"C:/Program Files/Beyond Compare 4/BComp.exe\" \"<span class="variable">$LOCAL</span>\" \"<span class="variable">$REMOTE</span>\"</span></span><br><span class="line">[merge]</span><br><span class="line">tool = bc4</span><br><span class="line">[mergetool <span class="string">"bc4"</span>]</span><br><span class="line"><span class="keyword">cmd</span><span class="bash"> = \"C:/Program Files/Beyond Compare 4/BComp.exe\" \"<span class="variable">$LOCAL</span>\" \"<span class="variable">$REMOTE</span>\" \"<span class="variable">$BASE</span>\" \"<span class="variable">$MERGED</span>\"</span></span><br><span class="line">trustExitCode = true</span><br><span class="line">[mergetool]</span><br><span class="line">keepBackup = false</span><br></pre></td></tr></table></figure><p>使用方法如下:</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># diff使用方法:</span></span><br><span class="line">git difftool HEAD <span class="comment">// 比较当前修改情况</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># merge使用方法</span></span><br><span class="line">git mergetool</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lambda与匿名内部类</title>
      <link href="/post/9c3c3621.html"/>
      <url>/post/9c3c3621.html</url>
      
        <content type="html"><![CDATA[<h1 id="lambda与匿名内部类"><a href="#lambda与匿名内部类" class="headerlink" title="lambda与匿名内部类"></a>lambda与匿名内部类</h1><p>从表面上看到Lambda表达式似乎只是为了简化匿名内部类书写，这看起来仅仅通过语法糖在编译阶段把所有的Lambda表达式替换成匿名内部类就可以了。但实时并非如此。在JVM层面，Lambda表达式和匿名内部类有着明显的差别。</p><a id="more"></a><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>匿名内部类仍然是一个类，只是不需要程序员显示指定类名，编译器会自动为该类取名。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AnonymousClassDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="string">"this is an Anonymous class demo"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此上面的代码，编译之后将会产生两个class文件：<br><img src="https://gitee.com/morris131/morris-book/raw/master/back/java/java8/images/20191105173228626_17557.png" alt="匿名内部类"></p><p>进一步分析主类AnonymousClassDemo.class的字节码，可发现其创建了匿名内部类的对象：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ javap -v -p AnonymousClassDemo.class</span><br><span class="line">...</span><br><span class="line">  <span class="keyword">public</span> static <span class="built_in">void</span> main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">4</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: new           #<span class="number">2</span>                  <span class="comment">// class java/lang/Thread</span></span><br><span class="line">         <span class="number">3</span>: dup</span><br><span class="line">         <span class="number">4</span>: new           #<span class="number">3</span>                  <span class="comment">// class AnonymousClassDemo$1 创建匿名内部类</span></span><br><span class="line">         <span class="number">7</span>: dup</span><br><span class="line">         <span class="number">8</span>: invokespecial #<span class="number">4</span>                  <span class="comment">// Method AnonymousClassDemo$1."&lt;init&gt;":()V</span></span><br><span class="line">        <span class="number">11</span>: invokespecial #<span class="number">5</span>                  <span class="comment">// Method java/lang/Thread."&lt;init&gt;":(Ljava/lang/Runnable;)V</span></span><br><span class="line">        <span class="number">14</span>: pop</span><br><span class="line">        <span class="number">15</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">11</span>: <span class="number">15</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">"AnonymousClassDemo.java"</span></span><br><span class="line">InnerClasses:</span><br><span class="line">     static #<span class="number">3</span>; <span class="comment">//class AnonymousClassDemo$1</span></span><br></pre></td></tr></table></figure><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><p>Lambda表达式通过invokedynamic指令实现，不会产生新的类。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LambdaDemo</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; System.<span class="keyword">out</span>.println(<span class="string">"this is a lambda demo"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码编译之后只有一个class文件。<br><img src="https://gitee.com/morris131/morris-book/raw/master/back/java/java8/images/20191105174053611_11684.png" alt="lambda表达式"></p><p>通过javap查看LambdaDemo.class的字节码，我们更能看出Lambda表达式内部表示的不同。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">$ javap -v -p LambdaDemo.class</span><br><span class="line">...</span><br><span class="line">  <span class="keyword">public</span> static <span class="built_in">void</span> main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">3</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: new           #<span class="number">2</span>                  <span class="comment">// class java/lang/Thread</span></span><br><span class="line">         <span class="number">3</span>: dup</span><br><span class="line">         <span class="number">4</span>: invokedynamic #<span class="number">3</span>,  <span class="number">0</span>              <span class="comment">// InvokeDynamic #0:run:()Ljava/lang/Runnable; 使用invokedynamic指令调用</span></span><br><span class="line">         <span class="number">9</span>: invokespecial #<span class="number">4</span>                  <span class="comment">// Method java/lang/Thread."&lt;init&gt;":(Ljava/lang/Runnable;)V</span></span><br><span class="line">        <span class="number">12</span>: pop</span><br><span class="line">        <span class="number">13</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">4</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">5</span>: <span class="number">13</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> static <span class="built_in">void</span> lambda$main$<span class="number">0</span>(); <span class="comment">// Lambda表达式被封装成主类的私有方法</span></span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">0</span>, args_size=<span class="number">0</span></span><br><span class="line">         <span class="number">0</span>: getstatic     #<span class="number">5</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">         <span class="number">3</span>: ldc           #<span class="number">6</span>                  <span class="comment">// String this is a lambda demo</span></span><br><span class="line">         <span class="number">5</span>: invokevirtual #<span class="number">7</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">         <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">4</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">"LambdaDemo.java"</span></span><br><span class="line">InnerClasses:</span><br><span class="line">     <span class="keyword">public</span> static <span class="keyword">final</span> #<span class="number">51</span>= #<span class="number">50</span> of #<span class="number">54</span>; <span class="comment">//Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles</span></span><br><span class="line">BootstrapMethods:</span><br><span class="line">  <span class="number">0</span>: #<span class="number">22</span> invokestatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span><br><span class="line">    Method arguments:</span><br><span class="line">      #<span class="number">23</span> ()V</span><br><span class="line">      #<span class="number">24</span> invokestatic LambdaDemo.lambda$main$<span class="number">0</span>:()V</span><br><span class="line">      #<span class="number">23</span> ()V</span><br></pre></td></tr></table></figure><p>反编译之后我们发现Lambda表达式被封装成了主类的一个私有方法，并通过invokedynamic指令进行调用。</p><p>既然Lambda表达式不是内部类的简写，那么Lambda内部的this引用也就跟内部类对象没什么关系了。在Lambda表达式中this的意义跟在表达式外部完全一样。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><ul><li>都可以直接访问“effectively final”的局部变量（不需要加final关键字，但实际上是final，编译器编译时会自动加上），以及外部类的成员变量（包括实例变量和类变量）。</li><li>都可以直接调用从接口继承得到的默认方法。</li></ul><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ul><li>匿名内部类可以为任意接口创建实例——不管接口包含多少个抽象方法，只要匿名内部类实现所有的抽象方法即可。但Lambda表达式只能为函数式接口创建实例。</li><li>匿名内部类可以为抽象类、甚至普通类创建实例，但Lambda表达式只能为函数式接口创建实例。</li><li>匿名内部类实现的抽象方法的方法体允许调用接口中定义的默认方法；但Lambda表达式的代码块不允许调用接口中定义的默认方法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态方法与默认方法</title>
      <link href="/post/ff904cea.html"/>
      <url>/post/ff904cea.html</url>
      
        <content type="html"><![CDATA[<h1 id="静态方法与默认方法"><a href="#静态方法与默认方法" class="headerlink" title="静态方法与默认方法"></a>静态方法与默认方法</h1><p>静态方法和默认方法都必须有自己的实现，如果一个类既有静态方法，又有默认方法，还有一个抽象方法，那么它还是一个函数式接口。</p><a id="more"></a><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>Java8为接口引入了静态方法功能。静态方法必须有自己的实现，而不能仅仅是一个接口声明，不然编译是会报错的。</p><p>以前为一个接口编写一个工具类，需另外写一个工具类如XxxUtil，现在可以直接将工具类的方法直接写在接口的静态方法中了。后面我们会看到JDK为我们提供的工具方法大部分都在函数式接口中，如java.util.function.Function。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; Function&lt;V, R&gt; compose(Function&lt;? <span class="keyword">super</span> V, ? <span class="keyword">extends</span> T&gt; <span class="keyword">before</span>) &#123;</span><br><span class="line">        Objects.requireNonNull(<span class="keyword">before</span>);</span><br><span class="line">        <span class="keyword">return</span> (V v) -&gt; apply(<span class="keyword">before</span>.<span class="title">apply</span>(v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; Function&lt;T, V&gt; andThen(Function&lt;? <span class="keyword">super</span> R, ? <span class="keyword">extends</span> V&gt; <span class="keyword">after</span>) &#123;</span><br><span class="line">        Objects.requireNonNull(<span class="keyword">after</span>);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; <span class="keyword">after</span>.<span class="title">apply</span>(<span class="title">apply</span>(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; Function&lt;T, T&gt; identity() &#123;</span><br><span class="line">        <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数式接口Function提供一个抽象方法（apply），两个默认方法（compose和andThen），一个静态方法（identity）。</p><p>接口中的方法默认都是抽象的和public的。</p><h2 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h2><p>问题：java 8之前接口增加一个新的方法，所有的实现类都得实现此方法。</p><p>为了解决这个问题，java8为接口引入了默认方法，如果接口新增了一个默认方法，所有的实现类无需实现此方法（像继承类的方法一样继承了默认方法的具体实现）。</p><h3 id="默认方法的使用"><a href="#默认方法的使用" class="headerlink" title="默认方法的使用"></a>默认方法的使用</h3><p>默认方法由default修饰符修饰，并像类中声明的其他方法一样包含方法体。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.java8.defaultmethod;</span><br><span class="line"></span><br><span class="line">public class DefaultMethodExample &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        A a = () -&gt; 10;</span><br><span class="line"></span><br><span class="line">        System.out.println(a.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @FunctionalInterface</span><br><span class="line">   <span class="built_in"> interface </span>A &#123;</span><br><span class="line"></span><br><span class="line">        int size();</span><br><span class="line"></span><br><span class="line">       <span class="built_in"> default </span>boolean isEmpty() &#123;</span><br><span class="line">            return 0 == size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决多继承冲突的三条原则"><a href="#解决多继承冲突的三条原则" class="headerlink" title="解决多继承冲突的三条原则"></a>解决多继承冲突的三条原则</h3><p>如果一个类使用相同的函数签名从多个地方（比如另一个类或接口）继承了方法，通过三条规则可以进行判断。</p><ul><li>类中的方法优先级最高。类或父类中声明的方法的优先级高于任何声明为默认方法的优先级。</li><li>如果无法依据第一条进行判断，那么子接口的优先级更高：函数签名相同时，优先选择拥有最具体实现的默认方法的接口，即如果B继承了A，那么B就比A更加具体。</li><li>最后，如果还是无法判断，继承了多个接口的类必须通过显式覆盖和调用期望的方法，显式地选择使用哪一个默认方法的实现。</li></ul><h4 id="类的方法优先级最高"><a href="#类的方法优先级最高" class="headerlink" title="类的方法优先级最高"></a>类的方法优先级最高</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.java8.defaultmethod;</span><br><span class="line"></span><br><span class="line">public class MultiExtendExample &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new C().hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public<span class="built_in"> interface </span>A &#123;</span><br><span class="line">       <span class="built_in"> default </span>void hello() &#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello from A"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public<span class="built_in"> interface </span>B extends A &#123;</span><br><span class="line">        @Override</span><br><span class="line">       <span class="built_in"> default </span>void hello() &#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello from B"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static class C implements B, A &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void hello() &#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello from C"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最具体的实现优先"><a href="#最具体的实现优先" class="headerlink" title="最具体的实现优先"></a>最具体的实现优先</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.java8.defaultmethod;</span><br><span class="line"></span><br><span class="line">public class MultiExtendExample1 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new C().hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public<span class="built_in"> interface </span>A &#123;</span><br><span class="line">       <span class="built_in"> default </span>void hello() &#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello from A"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public<span class="built_in"> interface </span>B extends A &#123;</span><br><span class="line">        @Override</span><br><span class="line">       <span class="built_in"> default </span>void hello() &#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello from B"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static class C implements B, A &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="冲突依旧无法解决，只能在类中覆盖该默认方法"><a href="#冲突依旧无法解决，只能在类中覆盖该默认方法" class="headerlink" title="冲突依旧无法解决，只能在类中覆盖该默认方法"></a>冲突依旧无法解决，只能在类中覆盖该默认方法</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.java8.defaultmethod;</span><br><span class="line"></span><br><span class="line">public class MultiExtendExample2 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new D().hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public<span class="built_in"> interface </span>A &#123;</span><br><span class="line">        void hello();</span><br><span class="line">    &#125;</span><br><span class="line">    public<span class="built_in"> interface </span>B extends A &#123;</span><br><span class="line">        @Override</span><br><span class="line">       <span class="built_in"> default </span>void hello() &#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello from B"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public<span class="built_in"> interface </span>C extends A &#123;</span><br><span class="line">        @Override</span><br><span class="line">       <span class="built_in"> default </span>void hello() &#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello from C"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static class D implements B, C &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void hello() &#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello from D"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式接口</title>
      <link href="/post/84773e6.html"/>
      <url>/post/84773e6.html</url>
      
        <content type="html"><![CDATA[<h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><h2 id="函数式接口-1"><a href="#函数式接口-1" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>有且只包含一个抽象方法的接口，称为函数式接口。</p><a id="more"></a><p>可以通过Lambda表达式来创建函数式接口的对象（只有函数式接口才能用Lambda表达式）。</p><p>可以使用@FunctionalInterface来声明是一个函数式接口。</p><p>常见的函数式接口：java.lang.Runnable、java.util.Comparator。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.java8.lamdba;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> RunnableExample &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 匿名内部类</span></span><br><span class="line">        <span class="keyword">new</span> <span class="constructor">Thread(<span class="params">new</span> Runnable()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run<span class="literal">()</span> &#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span> + <span class="string">" is running."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// lamdba</span></span><br><span class="line">        <span class="keyword">new</span> <span class="constructor">Thread(()</span> -&gt; &#123;</span><br><span class="line">           <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span> + <span class="string">" is running."</span>);</span><br><span class="line">        &#125;).start<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进一步简化</span></span><br><span class="line">        <span class="keyword">new</span> <span class="constructor">Thread(()</span> -&gt; <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span> + <span class="string">" is running."</span>)).start<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDK提供的函数式接口"><a href="#JDK提供的函数式接口" class="headerlink" title="JDK提供的函数式接口"></a>JDK提供的函数式接口</h2><p>java.util.function 包中定义了大量的函数接口，下表列出了这些接口，并对其做一些简单的介绍。</p><table><thead><tr><th>接口名</th><th>说明</th></tr></thead><tbody><tr><td>BiConsumer&lt;T,U&gt;</td><td>接受两个不同类型的参数，但不返回任何结果的操作</td></tr><tr><td>BiFunction&lt;T,U,R&gt;</td><td>接受两个不同类型的参数，并返回一个其它类型的结果的操作</td></tr><tr><td>BinaryOperator<t></t></td><td>接受两个相同类型的参数，并返回一个同一类型的结果的操作</td></tr><tr><td>BiPredicate&lt;T,U&gt;</td><td>接受两个不同诶行的参数，且返回布尔类型的结果的操作</td></tr><tr><td>BooleanSupplier</td><td>不接受任何参数，且返回一个布尔类型的结果的操作</td></tr><tr><td>Consumer<t></t></td><td>接受一个参数，但不返回任何结果的操作</td></tr><tr><td>DoubleBinaryOperator</td><td>接受两个double类型的参数，并返回double类型结果的操作</td></tr><tr><td>DoubleConsumer</td><td>接受一个 double 类型的参数，但不返回任何结果的操作</td></tr><tr><td>DoubleFunction<r></r></td><td>接受一个double类型的参数，且返回一个 R 类型的结果的操作</td></tr><tr><td>DoublePredicate</td><td>接受两个double类型的参数， 且返回一个布尔类型的结果的操作</td></tr><tr><td>DoubleSupplier</td><td>不接受任何参数，但返回布尔类型的结果的操作</td></tr><tr><td>DoubleToIntFunction</td><td>接受两个double类型的参数，但返回一个int类型的结果的操作</td></tr><tr><td>DoubleToLongFunction</td><td>接受两个double类型的参数，但返回一个long类型的结果的操作</td></tr><tr><td>DoubleUnaryOperator</td><td>接受一个double类型的参数，且返回一个double类型的结果的操作</td></tr><tr><td>Function&lt;T,R&gt;</td><td>接受T类型的参数，且返回一个R类型结果的函数</td></tr><tr><td>IntBinaryOperator</td><td>接受两个int类型的参数，且返回一个int类型的结果的操作</td></tr><tr><td>IntConsumer</td><td>接受一个int类型的参数，但不返回任何结果的操作</td></tr><tr><td>IntFunction<r></r></td><td>接受一个int类型的参数，但返回一个 R 类型的结果的操作</td></tr><tr><td>IntPredicate</td><td>接受一个int类型的参数，但返回布尔类型的结果的操作</td></tr><tr><td>IntSupplier</td><td>不接受任何参数，但返回一个int类型的结果的操作</td></tr><tr><td>IntToDoubleFunction</td><td>接受一个int类型的参数，但返回一个double类型的结果的操作</td></tr><tr><td>IntToLongFunction</td><td>接受一个int类型的参数，但返回一long类型的结果的操作</td></tr><tr><td>IntUnaryOperator</td><td>接受一个int类型的参数，且返回一个int类型的结果的操作</td></tr><tr><td>LongBinaryOperator</td><td>接受两个long类型的参数，且返回一个long类型的结果的操作</td></tr><tr><td>LongConsumer</td><td>不接受任何参数，但返回一个long类型的结果的操作</td></tr><tr><td>LongFunction<r></r></td><td>接受一个long类型的参数，但返回一个R类型的结果的操作</td></tr><tr><td>LongPredicate</td><td>接受一个long类型的参数，但返回布尔类型的结果的操作</td></tr><tr><td>LongSupplier</td><td>不接受任何参数，但返回一个lon 类型的结果的操作</td></tr><tr><td>LongToDoubleFunction</td><td>接受一个long类型的参数，但返回一个double类型的结果的函数</td></tr><tr><td>LongToIntFunction</td><td>接受一个long类型的参数，但返回int类型的结果的函数</td></tr><tr><td>LongUnaryOperator</td><td>接受一个long类型的参数，并返回一个long类型的结果的操作</td></tr><tr><td>ObjDoubleConsumer<t></t></td><td>接受两个参数，一个为T类型的对象，另一个double类型，但不返回任何结果的操作</td></tr><tr><td>ObjIntConsumer<t></t></td><td>接受两个参数，一个为T类型的对象，另一个int类型，但不返回任何结果的操作</td></tr><tr><td>ObjLongConsumer<t></t></td><td>接受两个参数，一个为T类型的对象，另一个double类型，但不返回任何结果的操作</td></tr><tr><td>Predicate<t></t></td><td>接受一个指定类型T的参数，但返回布尔类型的结果的操作</td></tr><tr><td>Supplier<t></t></td><td>不接受任何参数，但返回一个T类型的结果的操作</td></tr><tr><td>ToDoubleBiFunction&lt;T,U&gt;</td><td>接受两个不同类型的参数，但返回一个double类型的结果的操作</td></tr><tr><td>ToDoubleFunction<t></t></td><td>一个接受指定类型T的参数，并返回一个double类型的结果的操作</td></tr><tr><td>ToIntBiFunction&lt;T,U&gt;</td><td>接受两个不同类型的参数，但返回一个int类型的结果的操作</td></tr><tr><td>ToIntFunction<t></t></td><td>接受指定类型T的参数，并返回一个int类型的结果的操作</td></tr><tr><td>ToLongBiFunction&lt;T,U&gt;</td><td>接受两个不同类型的参数，但返回一个long类型的结果的操作</td></tr><tr><td>ToLongFunction<t></t></td><td>接受指定类型的参数，并返回一个long类型的结果的操作</td></tr><tr><td>UnaryOperator<t></t></td><td>接受一个参数，并返回一个与参数类型相同的结果的操作</td></tr></tbody></table><h2 id="函数式接口的使用"><a href="#函数式接口的使用" class="headerlink" title="函数式接口的使用"></a>函数式接口的使用</h2><h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.java8.lamdba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">function</span>.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> PredicatExample &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;<span class="type">Integer</span>&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;<span class="type">Integer</span>&gt; result = filterEvenNumber(integerList, i -&gt; i % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static List&lt;<span class="type">Integer</span>&gt; filterEvenNumber(List&lt;<span class="type">Integer</span>&gt; integerList, Predicate&lt;<span class="type">Integer</span>&gt; predicate) &#123;</span><br><span class="line">        List&lt;<span class="type">Integer</span>&gt; result = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Integer</span> <span class="type">integer</span> : integerList) &#123;</span><br><span class="line">            <span class="keyword">if</span>(predicate.test(<span class="type">integer</span>)) &#123;</span><br><span class="line">                result.<span class="keyword">add</span>(<span class="type">integer</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.java8.lamdba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">ComsumerExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">        List&lt;Integer&gt; <span class="built_in">int</span>egerList = Arrays.asList(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">        <span class="built_in">int</span>egerList.forEach(System.<span class="keyword">out</span>::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.java8.lamdba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="built_in">List</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.function.<span class="built_in">Function</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">FunctionExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; stringList = Arrays.asList(<span class="string">"java"</span>, <span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"function"</span>);</span><br><span class="line">        <span class="built_in">List</span>&lt;Integer&gt; result = getLength(stringList, <span class="built_in">String</span>::length);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="built_in">List</span>&lt;Integer&gt; getLength(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; stringList, <span class="built_in">Function</span>&lt;<span class="built_in">String</span>, Integer&gt; function) &#123;</span><br><span class="line">        <span class="built_in">List</span>&lt;Integer&gt; integerList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">String</span> s : stringList) &#123;</span><br><span class="line">            integerList.add(function.apply(s));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> integerList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数式接口复合使用"><a href="#函数式接口复合使用" class="headerlink" title="函数式接口复合使用"></a>函数式接口复合使用</h2><h3 id="Predicate复合"><a href="#Predicate复合" class="headerlink" title="Predicate复合"></a>Predicate复合</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.java8.lamdba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.morris.java8.collector.Dish;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.file.DirectoryStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PredicateComplexExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="type">String</span>[] args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">List</span>&lt;<span class="type">Dish</span>&gt; dishList = <span class="type">Dish</span>.createList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 与-and</span></span><br><span class="line">        <span class="comment">// 找出卡路里&gt;300的蔬菜</span></span><br><span class="line">        <span class="type">Predicate</span>&lt;<span class="type">Dish</span>&gt; vegetablePredicate = <span class="type">Dish</span>::isVegetarian;</span><br><span class="line">        <span class="type">Predicate</span>&lt;<span class="type">Dish</span>&gt; moreThan300Predicate = d -&gt; d.getCalories() &gt;= <span class="number">300</span>;</span><br><span class="line">        <span class="type">List</span>&lt;<span class="type">Dish</span>&gt; <span class="built_in">filter</span> = <span class="built_in">filter</span>(dishList, vegetablePredicate.and(moreThan300Predicate));</span><br><span class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="built_in">filter</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 非-negate</span></span><br><span class="line">        <span class="comment">// 找出荤菜</span></span><br><span class="line">        <span class="type">List</span>&lt;<span class="type">Dish</span>&gt; filter1 = <span class="built_in">filter</span>(dishList, vegetablePredicate.negate());</span><br><span class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(filter1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 或-or</span></span><br><span class="line">        <span class="comment">// 找出卡路里大于300或者荤菜</span></span><br><span class="line">        <span class="type">List</span>&lt;<span class="type">Dish</span>&gt; filter2 = <span class="built_in">filter</span>(dishList, vegetablePredicate.or(moreThan300Predicate));</span><br><span class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(filter2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">List</span>&lt;<span class="type">Dish</span>&gt; <span class="built_in">filter</span>(<span class="type">List</span>&lt;<span class="type">Dish</span>&gt; dishList, <span class="type">Predicate</span>&lt;<span class="type">Dish</span>&gt; predicate) &#123;</span><br><span class="line">        <span class="type">List</span>&lt;<span class="type">Dish</span>&gt; result = new <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Dish</span> dish : dishList) &#123;</span><br><span class="line">            <span class="keyword">if</span>(predicate.test(dish)) &#123;</span><br><span class="line">                result.add(dish);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Function复合"><a href="#Function复合" class="headerlink" title="Function复合"></a>Function复合</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.morris.java8.lamdba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">function</span>.<span class="function"><span class="keyword">Function</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> FunctionComplexExample &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        // andThen</span><br><span class="line">        <span class="function"><span class="keyword">Function</span></span>&lt;<span class="keyword">Integer</span>, <span class="keyword">Integer</span>&gt; f = x -&gt; x + <span class="number">1</span>; // f(x)</span><br><span class="line">        <span class="function"><span class="keyword">Function</span></span>&lt;<span class="keyword">Integer</span>, <span class="keyword">Integer</span>&gt; g = x -&gt; x * <span class="number">2</span>; // g(x)</span><br><span class="line">        <span class="function"><span class="keyword">Function</span></span>&lt;<span class="keyword">Integer</span>, <span class="keyword">Integer</span>&gt; andThen =  f.andThen(g); // g(f)=g(f(x))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Integer</span> apply = andThen.apply(<span class="number">1</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(apply);</span><br><span class="line"></span><br><span class="line">        // compose</span><br><span class="line">        <span class="function"><span class="keyword">Function</span></span>&lt;<span class="keyword">Integer</span>, <span class="keyword">Integer</span>&gt; y = x -&gt; x + <span class="number">1</span>; // y(x)</span><br><span class="line">        <span class="function"><span class="keyword">Function</span></span>&lt;<span class="keyword">Integer</span>, <span class="keyword">Integer</span>&gt; z = x -&gt; x * <span class="number">2</span>; // z(x)</span><br><span class="line">        <span class="function"><span class="keyword">Function</span></span>&lt;<span class="keyword">Integer</span>, <span class="keyword">Integer</span>&gt; compose =  y.compose(z); // y(z)=y(z(x))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Integer</span> apply2 = compose.apply(<span class="number">1</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(apply2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lambda简介</title>
      <link href="/post/128488bd.html"/>
      <url>/post/128488bd.html</url>
      
        <content type="html"><![CDATA[<h1 id="lambda简介"><a href="#lambda简介" class="headerlink" title="lambda简介"></a>lambda简介</h1><p>Lambda表达式类似匿名函数，简单地说，它是没有声明的方法，也即没有访问修饰符、返回值声明和名字。</p><a id="more"></a><p>Lambda允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><h2 id="Lambda表达式的语法"><a href="#Lambda表达式的语法" class="headerlink" title="Lambda表达式的语法"></a>Lambda表达式的语法</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="params">(parameters)</span> -&gt;</span> expression</span><br><span class="line">或</span><br><span class="line"><span class="function"><span class="params">(parameters)</span> -&gt;</span>&#123; statements; &#125;</span><br></pre></td></tr></table></figure><ul><li>可选类型声明：不需要声明参数类型，编译器可以统一识别参数值。</li><li>可选的参数圆括号：一个参数无需定义圆括号，但多个参数需要定义圆括号。</li><li>可选的大括号：如果主体包含了一个语句，就不需要使用大括号。</li><li>可选的返回关键字：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。</li></ul><p>举例说明：</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 不需要参数,返回值为5</span></span><br><span class="line">() -&gt; <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 接收一个参数(数字类型),返回其2倍的值</span></span><br><span class="line"><span class="symbol">x</span> -&gt; <span class="number">2</span> * <span class="symbol">x</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 接受2个参数(数字),并返回他们的差值</span></span><br><span class="line">(<span class="symbol">x</span>, <span class="symbol">y</span>) -&gt; <span class="symbol">x</span> – <span class="symbol">y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 接收2个int型整数,返回他们的和</span></span><br><span class="line">(int <span class="symbol">x</span>, int <span class="symbol">y</span>) -&gt; <span class="symbol">x</span> + <span class="symbol">y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)</span></span><br><span class="line">(String s) -&gt; System.out.print(s)</span><br></pre></td></tr></table></figure><h2 id="Lambda表达式作用域"><a href="#Lambda表达式作用域" class="headerlink" title="Lambda表达式作用域"></a>Lambda表达式作用域</h2><p>lambda表达式中可以引用任何外部的变量或者常量。但是对这些外部的变量是有要求的： 它们必须是Effectively final的。</p><p>局部内部类和匿名内部类访问的局部变量必须由final修饰，java8开始，可以不加final修饰符，由系统默认添加。java将这个功能称为：Effectively final 功能。</p><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><h3 id="指向静态方法的方法引用"><a href="#指向静态方法的方法引用" class="headerlink" title="指向静态方法的方法引用"></a>指向静态方法的方法引用</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt; function1 = <span class="built_in">Integer</span>::parseInt; // 等价于下面</span><br><span class="line"><span class="built_in">Function</span>&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>&gt; function2 = (<span class="built_in">String</span> i) -&gt; <span class="built_in">Integer</span>.parseInt(i);</span><br></pre></td></tr></table></figure><h3 id="指向任意类型实例方法的方法引用"><a href="#指向任意类型实例方法的方法引用" class="headerlink" title="指向任意类型实例方法的方法引用"></a>指向任意类型实例方法的方法引用</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; function3 = <span class="built_in">String</span><span class="type">::toLowerCase</span>; <span class="comment">// 等价于下面</span></span><br><span class="line">Function&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; function4 = (<span class="built_in">String</span> i) -&gt; i.toLowerCase();</span><br><span class="line"></span><br><span class="line">BiFunction&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>, <span class="built_in">String</span>&gt; biFunction = (<span class="built_in">String</span> s, <span class="built_in">Integer</span> i) -&gt; s.substring(i);</span><br><span class="line">BiFunction&lt;<span class="built_in">String</span>, <span class="built_in">Integer</span>, <span class="built_in">String</span>&gt; biFunction2 = <span class="built_in">String</span><span class="type">::substring</span>;</span><br></pre></td></tr></table></figure><h3 id="指向现有对象的实例方法的方法引用"><a href="#指向现有对象的实例方法的方法引用" class="headerlink" title="指向现有对象的实例方法的方法引用"></a>指向现有对象的实例方法的方法引用</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> <span class="built_in">str</span> = <span class="string">"hello"</span>;</span><br><span class="line">Supplier&lt;Integer&gt; supplier = () -&gt; <span class="built_in">str</span>.length();</span><br><span class="line">Supplier&lt;Integer&gt; supplier2 = <span class="built_in">str</span>::length;</span><br><span class="line"></span><br><span class="line">Function&lt;Integer, <span class="built_in">String</span>&gt; function5 = (Integer i) -&gt; <span class="built_in">str</span>.substring(i);</span><br><span class="line">Function&lt;Integer, <span class="built_in">String</span>&gt; function6 = <span class="built_in">str</span>::substring;</span><br></pre></td></tr></table></figure><h3 id="构造方法引用"><a href="#构造方法引用" class="headerlink" title="构造方法引用"></a>构造方法引用</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.java8.lamdba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">function</span>.BiFunction;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">function</span>.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">function</span>.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodReferenceExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造函数引用</span></span><br><span class="line">        Supplier&lt;<span class="keyword">String</span>&gt; stringSupplier = () -&gt; <span class="keyword">new</span> <span class="type">String</span>();</span><br><span class="line">        Supplier&lt;<span class="keyword">String</span>&gt; stringSupplier2 = <span class="keyword">String</span>:<span class="type"></span>:<span class="keyword">new</span><span class="type"></span>;</span><br><span class="line"></span><br><span class="line">        Function&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; stringFunction = (<span class="keyword">String</span> s)-&gt;<span class="keyword">new</span> <span class="type">String</span>(s);</span><br><span class="line">        Function&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; stringFunction2 = <span class="keyword">String</span>:<span class="type"></span>:<span class="keyword">new</span><span class="type"></span>;</span><br><span class="line"></span><br><span class="line">        BiFunction&lt;Runnable, <span class="keyword">String</span>, Thread&gt; stringBiFunction = (Runnable r, <span class="keyword">String</span> b)-&gt; <span class="keyword">new</span> <span class="type">Thread</span>(r, b);</span><br><span class="line">        BiFunction&lt;Runnable, <span class="keyword">String</span>, Thread&gt; stringBiFunction2 = Thread:<span class="type"></span>:<span class="keyword">new</span><span class="type"></span>;</span><br><span class="line"></span><br><span class="line">        ThreeFunction&lt;ThreadGroup, Runnable, <span class="keyword">String</span>, Thread&gt; threeFunction = (ThreadGroup g, Runnable r, <span class="keyword">String</span> b)-&gt; <span class="keyword">new</span> <span class="type">Thread</span>(g, r, b);</span><br><span class="line">        ThreeFunction&lt;ThreadGroup, Runnable, <span class="keyword">String</span>, Thread&gt; threeFunction2 = Thread:<span class="type"></span>:<span class="keyword">new</span><span class="type"></span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">ThreeFunction</span>&lt;<span class="title">A</span>, <span class="title">B</span>, <span class="title">C</span>, <span class="title">D</span>&gt; </span>&#123;</span><br><span class="line">        D triple(A a, B b, C c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git分支的使用</title>
      <link href="/post/bc04b79d.html"/>
      <url>/post/bc04b79d.html</url>
      
        <content type="html"><![CDATA[<h1 id="git分支的使用"><a href="#git分支的使用" class="headerlink" title="git分支的使用"></a>git分支的使用</h1><p>使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。 在很多版本控制系统中，这是一个略微低效的过程——常常需要完全创建一个源代码目录的副本。对于大项目来说，这样的过程会耗费很多时间。而Git 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。</p><a id="more"></a><h2 id="git分支图解"><a href="#git分支图解" class="headerlink" title="git分支图解"></a>git分支图解</h2><p>在版本回退里，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。<br>一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：</p><p><img src="https://gitee.com/morris131/morris-book/raw/master/tools/git/images/20191031140137225_23247.png" alt="master"></p><p>每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长：<br>当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：</p><p><img src="https://gitee.com/morris131/morris-book/raw/master/tools/git/images/20191031140201341_30972.png" alt="dev"></p><p>你看，Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！<br>不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：</p><p><img src="https://gitee.com/morris131/morris-book/raw/master/tools/git/images/20191031140233271_8186.png" alt="dev"></p><p>假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：</p><p><img src="https://gitee.com/morris131/morris-book/raw/master/tools/git/images/20191031140252696_28700.png" alt="master-dev"></p><p>所以Git合并分支也很快！就改改指针，工作区内容也不变！<br>合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支：</p><p><img src="https://gitee.com/morris131/morris-book/raw/master/tools/git/images/20191031140324842_4948.png" alt="master"></p><h2 id="分支的使用"><a href="#分支的使用" class="headerlink" title="分支的使用"></a>分支的使用</h2><h3 id="创建并切换分支"><a href="#创建并切换分支" class="headerlink" title="创建并切换分支"></a>创建并切换分支</h3><p>首先，我们创建dev分支，然后切换到dev分支：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -<span class="selector-tag">b</span> dev</span><br><span class="line">Switched to <span class="selector-tag">a</span> new branch <span class="string">'dev'</span></span><br></pre></td></tr></table></figure><p><code>git checkout</code>命令加上-b参数表示创建并切换，相当于以下两条命令：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">branch </span>dev</span><br><span class="line">$ git checkout dev</span><br><span class="line"><span class="keyword">Switched </span>to <span class="keyword">branch </span><span class="string">'dev'</span></span><br></pre></td></tr></table></figure><p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个*号。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> git branch</span><br><span class="line"><span class="comment">* dev</span></span><br><span class="line">  master</span><br></pre></td></tr></table></figure><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>修改readme.txt的内容并提交：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> cat readme.txt</span><br><span class="line">version1</span><br><span class="line"><span class="symbol">$</span> git add .</span><br><span class="line"><span class="symbol">$</span> git commit -m <span class="string">'add version2'</span></span><br><span class="line">[dev b74906a] add version2</span><br><span class="line"> <span class="number">1</span> <span class="keyword">file</span> changed, <span class="number">2</span> insertions(+), <span class="number">1</span> deletion(-)</span><br><span class="line"></span><br><span class="line"><span class="symbol">$</span> cat readme.txt</span><br><span class="line">version1</span><br><span class="line">version2</span><br></pre></td></tr></table></figure><p>现在要将dev的代码合并到master分支上，首先切换回master分支：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched <span class="keyword">to</span> branch <span class="string">'master'</span></span><br><span class="line">Your branch <span class="keyword">is</span> up <span class="keyword">to</span> <span class="type">date</span> <span class="keyword">with</span> <span class="string">'origin/master'</span>.</span><br></pre></td></tr></table></figure><p>然后把dev分支的代码合并到master分支上：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> cat readme.txt</span><br><span class="line">version1</span><br><span class="line"><span class="symbol">$</span> git merge dev</span><br><span class="line"><span class="function"><span class="title">Updating</span></span> <span class="number">19</span>ea396..b74906a</span><br><span class="line">Fast-forward</span><br><span class="line"> readme.txt | <span class="number">3</span> ++-</span><br><span class="line"> <span class="number">1</span> <span class="keyword">file</span> changed, <span class="number">2</span> insertions(+), <span class="number">1</span> deletion(-)</span><br><span class="line"></span><br><span class="line"><span class="symbol">$</span> cat readme.txt</span><br><span class="line">version1</span><br><span class="line">version2</span><br></pre></td></tr></table></figure><p>如果dev和master分支的代码没有冲突，就会快速合并（Fast-forward），有冲突需手动解决冲突后才能合并。</p><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>dev的代码合并到master完成后，就可以放心地删除dev分支了：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">branch </span>-d dev</span><br><span class="line"><span class="symbol">Deleted</span> <span class="keyword">branch </span>dev (was <span class="keyword">b74906a).</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">$ </span>git <span class="keyword">branch</span></span><br><span class="line"><span class="keyword">* </span>master</span><br></pre></td></tr></table></figure><p>如果dev的代码没有合并到master，直接删除会提示一个错误</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d dev</span><br><span class="line"><span class="keyword">error: </span>The branch 'dev' is not fully merged.</span><br><span class="line">If you are sure you want to delete it, run 'git branch -D dev'.</span><br></pre></td></tr></table></figure><p>这时可以使用<code>git branch -D dev</code>强制删除。</p><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>开一个新的分支来演示冲突的出现与解决办法。<br>在readme.txt文件中加了一行内容并提交。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">cat</span> readme.txt</span><br><span class="line">version1</span><br><span class="line">version2</span><br><span class="line"></span><br><span class="line">$ git checkout -<span class="keyword">b</span> feature1</span><br><span class="line">Switched <span class="keyword">to</span> <span class="keyword">a</span> <span class="keyword">new</span> branch <span class="string">'feature1'</span></span><br><span class="line"></span><br><span class="line">$ git <span class="built_in">add</span> .</span><br><span class="line">$ git commit -<span class="keyword">m</span> <span class="string">'add version-feature'</span></span><br><span class="line">[feature1 c133411] <span class="built_in">add</span> <span class="keyword">version</span>-feature</span><br><span class="line"> <span class="number">1</span> <span class="keyword">file</span> changed, <span class="number">2</span> insertions(+), <span class="number">1</span> deletion(-)</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">cat</span> readme.txt</span><br><span class="line">version1</span><br><span class="line">version2</span><br><span class="line"><span class="keyword">version</span>-feature</span><br></pre></td></tr></table></figure><p>切换回master分支，然后在readme.txt文件中加了一行内容并提交。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ cat readme.txt</span><br><span class="line">version1</span><br><span class="line">version2</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line">$ git commit -m 'add <span class="keyword">version</span>-<span class="literal">master</span>'</span><br><span class="line">[<span class="keyword">master</span> <span class="title">4e1781a</span>] add <span class="keyword">version</span>-<span class="literal">master</span></span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">2</span> insertions(+), <span class="number">1</span> deletion(-)</span><br><span class="line"></span><br><span class="line">$ cat readme.txt</span><br><span class="line">version1</span><br><span class="line">version2</span><br><span class="line"><span class="keyword">version</span>-<span class="literal">master</span></span><br></pre></td></tr></table></figure><p>现在，master分支和feature1分支各自都分别有新的提交，变成了这样：</p><p><img src="https://gitee.com/morris131/morris-book/raw/master/tools/git/images/20191031145137775_6796.png" alt="解决冲突"></p><p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git merge feature1</span><br><span class="line">Auto-merging readme.txt</span><br><span class="line"><span class="keyword">CONFLICT</span> (content): Merge <span class="keyword">conflict</span> <span class="keyword">in</span> readme.txt</span><br><span class="line">Automatic merge failed; fix conflicts <span class="keyword">and</span> <span class="keyword">then</span> <span class="keyword">commit</span> the result.</span><br></pre></td></tr></table></figure><p>果然冲突了！Git告诉我们，readme.txt文件存在冲突，必须手动解决冲突后再提交。git status也可以告诉我们冲突的文件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of 'origin/master' by 2 commits.</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git push"</span> <span class="keyword">to</span> publish your <span class="keyword">local</span> commits)</span><br><span class="line"></span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts <span class="keyword">and</span> run <span class="string">"git commit"</span>)</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git merge --abort"</span> <span class="keyword">to</span> <span class="keyword">abort</span> the <span class="keyword">merge</span>)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> mark resolution)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">both</span> modified:   readme.txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure><p>git提示我们可以用<code>git merge --abort</code>撤销本次合并。也可以手动解决冲突后提交。</p><p>我们可以直接查看readme.txt的内容：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat readme.txt</span><br><span class="line">version1</span><br><span class="line">version2</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">version-master</span><br><span class="line">=======</span><br><span class="line">version-feature</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br></pre></td></tr></table></figure><p>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，我们修改如下后保存：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">version</span>-<span class="literal">master</span></span><br></pre></td></tr></table></figure><p>再提交：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br><span class="line"></span><br><span class="line">$ git <span class="keyword">commit</span> -m <span class="string">'merge from feature1'</span></span><br><span class="line">[<span class="keyword">master</span> e763995] <span class="keyword">merge</span> <span class="keyword">from</span> feature1</span><br></pre></td></tr></table></figure><p>现在，master分支和feature1分支变成了下图所示：</p><p><img src="https://gitee.com/morris131/morris-book/raw/master/tools/git/images/20191031145837188_16640.png" alt="解决冲突后"></p><p>用带参数的git log也可以看到分支的合并情况：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> <span class="comment">--graph --pretty=oneline --abbrev-commit</span></span><br><span class="line">*   e763995 (HEAD -&gt; master) <span class="built_in">merge</span> <span class="built_in">from</span> feature1</span><br><span class="line">|\</span><br><span class="line">| * c133411 (feature1) <span class="built_in">add</span> <span class="built_in">version</span>-feature</span><br><span class="line">* | <span class="number">4e1781</span><span class="keyword">a</span> <span class="built_in">add</span> <span class="built_in">version</span>-master</span><br><span class="line">|/</span><br><span class="line">* b74906a (origin/dev) <span class="built_in">add</span> version2</span><br><span class="line">* <span class="number">19</span>ea396 (origin/master) <span class="built_in">add</span> version1</span><br></pre></td></tr></table></figure><p>最后，删除feature1分支：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">branch </span>-d feature1</span><br><span class="line"><span class="symbol">Deleted</span> <span class="keyword">branch </span>feature1 (was c133411).</span><br></pre></td></tr></table></figure><p>工作完成。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的使用</title>
      <link href="/post/2e742d51.html"/>
      <url>/post/2e742d51.html</url>
      
        <content type="html"><![CDATA[<h1 id="git的使用"><a href="#git的使用" class="headerlink" title="git的使用"></a>git的使用</h1><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>仓库又叫版本库（repository），可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p><a id="more"></a><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><p>找一个合适的地方，创建一个空目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> d:</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir gittest</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> gittest</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">/d/gittest</span><br></pre></td></tr></table></figure><h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in D:<span class="string">/gittest/.git/</span></span><br><span class="line">$ <span class="keyword">ls</span> -a</span><br><span class="line"><span class="string">./</span>  <span class="string">../</span>  <span class="string">.git/</span></span><br></pre></td></tr></table></figure><p>打开gittest目录下会发现多了一个.git的目录，这个目录是Git来跟踪管理版本库的，不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p><h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><p>工作区（Working Directory）就是仓库所在目录，比如上面gittest文件夹就是一个工作区。</p><p>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</p><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。</p><p><img src="https://gitee.com/morris131/morris-book/raw/master/tools/git/images/1574244591375.png" alt></p><p>把文件往Git版本库里添加的时候，是分两步执行的：</p><ol><li>用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</li><li>是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</li></ol><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，<code>git commit</code>就是往master分支上提交更改。</p><h3 id="添加文件到暂存区"><a href="#添加文件到暂存区" class="headerlink" title="添加文件到暂存区"></a>添加文件到暂存区</h3><p>用文本工具如Notepad++编写一个readme.txt文件，内容如下</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">versio<span class="symbol">n1</span></span><br></pre></td></tr></table></figure><p>将readme.txt添加到暂存区。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">add</span><span class="bash"> readme.txt</span></span><br></pre></td></tr></table></figure><p>上面的写法只能添加一个，下面的命令更常用：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">add</span><span class="bash"> .</span></span><br></pre></td></tr></table></figure><p>.代表当前目录，命令意思为将当前目录的修改添加到暂存区。</p><h3 id="提交到版本库"><a href="#提交到版本库" class="headerlink" title="提交到版本库"></a>提交到版本库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">commit</span> -m <span class="string">'add version1'</span></span><br><span class="line">[<span class="keyword">master</span> (root-<span class="keyword">commit</span>) e52c7b8] <span class="keyword">add</span> version1</span><br><span class="line"> <span class="number">1</span> <span class="keyword">file</span> <span class="keyword">changed</span>, <span class="number">1</span> insertion(+)</span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">mode</span> <span class="number">100644</span> readme.txt</span><br></pre></td></tr></table></figure><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><p>修改readme.txt的内容如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">versio<span class="symbol">n1</span></span><br><span class="line">versio<span class="symbol">n2</span></span><br></pre></td></tr></table></figure><p>使用<code>git status</code>命令可以查看仓库当前的状态。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for <span class="keyword">commit</span>:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</span><br><span class="line"></span><br><span class="line">        modified:   readme.txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure><h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><p>使用<code>git diff</code>命令可以查看文件具体修改了什么内容。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git diff readme.txt</span><br><span class="line">diff --git a/readme<span class="selector-class">.txt</span> b/readme.txt</span><br><span class="line">index <span class="number">5</span>bdcfc1..<span class="number">60211</span>be <span class="number">100644</span></span><br><span class="line">--- a/readme.txt</span><br><span class="line">+++ b/readme.txt</span><br><span class="line">@@ -<span class="number">1</span> +<span class="number">1</span>,<span class="number">2</span> @@</span><br><span class="line"> version1</span><br><span class="line">+version2</span><br></pre></td></tr></table></figure><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><p>先将上面对readme.txt的修改添加到暂存区，然后提交到版本库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">commit</span> -m <span class="string">'add version2'</span></span><br><span class="line">[<span class="keyword">master</span> <span class="number">5e16</span>c39] <span class="keyword">add</span> version2</span><br><span class="line"> <span class="number">1</span> <span class="keyword">file</span> <span class="keyword">changed</span>, <span class="number">1</span> insertion(+)</span><br></pre></td></tr></table></figure><p>使用<code>git log</code>命令显示从最近到最远的提交日志。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit <span class="number">5e16</span>c39863fb9af5b7be61fcfda0b89d3247dcdb (HEAD -&gt; master)</span><br><span class="line">Author: morris &lt;<span class="symbol">morris131@</span><span class="number">126.</span>com&gt;</span><br><span class="line">Date:   Tue Oct <span class="number">29</span> <span class="number">17</span>:<span class="number">26</span>:<span class="number">24</span> <span class="number">2019</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    add version2</span><br><span class="line"></span><br><span class="line">commit e52c7b8b6063a3046ae73e9c44cbd6b90ab1e532</span><br><span class="line">Author: morris &lt;<span class="symbol">morris131@</span><span class="number">126.</span>com&gt;</span><br><span class="line">Date:   Tue Oct <span class="number">29</span> <span class="number">17</span>:<span class="number">23</span>:<span class="number">50</span> <span class="number">2019</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    add version1</span><br></pre></td></tr></table></figure><p>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上<code>--pretty=oneline</code>参数：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git log <span class="attribute">--pretty</span>=oneline</span><br><span class="line">5e16c39863fb9af5b7be61fcfda0b89d3247dcdb (HEAD -&gt; master) <span class="builtin-name">add</span> version2</span><br><span class="line">e52c7b8b6063a3046ae73e9c44cbd6b90ab1e532 <span class="builtin-name">add</span> version1</span><br></pre></td></tr></table></figure><p>a563c242949eae94e8bb2bee6aa2396c918c4d4f类似这样一长串是每次commit的commit_id，后面如果要回滚的话，这个commit_id就能派上用场了。</p><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><p>为了方便测试再提交点内容。<br>修改readme.txt内容如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">versio<span class="symbol">n1</span></span><br><span class="line">versio<span class="symbol">n2</span></span><br><span class="line">versio<span class="symbol">n3</span></span><br></pre></td></tr></table></figure><p>将readme.txt的修改添加到暂存区，然后提交到版本库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git <span class="keyword">commit</span> -m <span class="string">'add version3'</span></span><br><span class="line">[<span class="keyword">master</span> a7b4ddc] <span class="keyword">add</span> version3</span><br><span class="line"> <span class="number">1</span> <span class="keyword">file</span> <span class="keyword">changed</span>, <span class="number">1</span> insertion(+)</span><br></pre></td></tr></table></figure><p>现在准备把readme.txt回退到上一个版本，也就是version2的那个版本，怎么做呢？</p><p>首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，可以写成HEAD~100。</p><p>现在，我们要把当前版本version3回退到上一个版本version2，就可以使用<code>git reset</code>命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard HEAD^</span></span><br><span class="line"><span class="keyword">HEAD</span> <span class="keyword">is</span> <span class="keyword">now</span> <span class="keyword">at</span> <span class="number">5e16</span>c39 <span class="keyword">add</span> version2</span><br></pre></td></tr></table></figure><p>看看readme.txt的内容是不是version2</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat readme.txt</span><br><span class="line">versio<span class="symbol">n1</span></span><br><span class="line">versio<span class="symbol">n2</span></span><br></pre></td></tr></table></figure><p>果然被还原了。</p><p>还可以继续回退到上一个版本version1，不过且慢，然我们用git log再看看现在版本库的状态：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">commit <span class="number">5e16</span>c39863fb9af5b7be61fcfda0b89d3247dcdb (HEAD -&gt; master)</span><br><span class="line">Author: morris &lt;<span class="symbol">morris131@</span><span class="number">126.</span>com&gt;</span><br><span class="line">Date:   Tue Oct <span class="number">29</span> <span class="number">17</span>:<span class="number">26</span>:<span class="number">24</span> <span class="number">2019</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    add version2</span><br><span class="line"></span><br><span class="line">commit e52c7b8b6063a3046ae73e9c44cbd6b90ab1e532</span><br><span class="line">Author: morris &lt;<span class="symbol">morris131@</span><span class="number">126.</span>com&gt;</span><br><span class="line">Date:   Tue Oct <span class="number">29</span> <span class="number">17</span>:<span class="number">23</span>:<span class="number">50</span> <span class="number">2019</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    add version1</span><br></pre></td></tr></table></figure><p>最新的那个版本version3已经看不到了！现在想回到version3，肿么办？</p><p>办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个version3的commit id是a7b4ddc，于是就可以指定回到未来的某个版本：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard a7b4ddc</span></span><br><span class="line"><span class="keyword">HEAD</span> <span class="keyword">is</span> <span class="keyword">now</span> <span class="keyword">at</span> a7b4ddc <span class="keyword">add</span> version3</span><br></pre></td></tr></table></figure><p>再看看readme.txt的内容：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat readme.txt</span><br><span class="line">versio<span class="symbol">n1</span></span><br><span class="line">versio<span class="symbol">n2</span></span><br><span class="line">versio<span class="symbol">n3</span></span><br></pre></td></tr></table></figure><p>果然，又回到version3了。</p><p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向version3</p><p>现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的commit id怎么办？</p><p>Git提供了一个命令git reflog用来记录你的每一次命令：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">ref</span>log</span><br><span class="line">a7b4ddc (HEAD -&gt; master) <span class="symbol">HEAD@</span>&#123;<span class="number">0</span>&#125;: reset: moving to a7b4ddc</span><br><span class="line"><span class="number">5e16</span>c39 <span class="symbol">HEAD@</span>&#123;<span class="number">1</span>&#125;: reset: moving to HEAD^</span><br><span class="line">a7b4ddc (HEAD -&gt; master) <span class="symbol">HEAD@</span>&#123;<span class="number">2</span>&#125;: commit: add version3</span><br><span class="line"><span class="number">5e16</span>c39 <span class="symbol">HEAD@</span>&#123;<span class="number">3</span>&#125;: commit: add version2</span><br><span class="line">e52c7b8 <span class="symbol">HEAD@</span>&#123;<span class="number">4</span>&#125;: commit (initial): add version1</span><br></pre></td></tr></table></figure><p>终于命令的输出可知，version3的commit id是a7b4ddc，现在，你又可以使用<code>git reset</code>回到version3了。</p><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><h3 id="丢弃工作区的修改"><a href="#丢弃工作区的修改" class="headerlink" title="丢弃工作区的修改"></a>丢弃工作区的修改</h3><p>修改readme.txt的内容如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">versio<span class="symbol">n1</span></span><br><span class="line">versio<span class="symbol">n2</span></span><br><span class="line">versio<span class="symbol">n3</span></span><br><span class="line">versio<span class="symbol">n4</span></span><br></pre></td></tr></table></figure><p>想放弃刚刚对readme.txt的修改，怎么办？</p><p>用git status查看一下当前的状态：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for <span class="keyword">commit</span>:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</span><br><span class="line"></span><br><span class="line">        modified:   readme.txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure><p>Git会告诉你，<code>git checkout -- file</code>可以丢弃工作区的修改：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout <span class="comment">-- readme.txt</span></span><br></pre></td></tr></table></figure><h3 id="丢弃对暂存区的修改"><a href="#丢弃对暂存区的修改" class="headerlink" title="丢弃对暂存区的修改"></a>丢弃对暂存区的修改</h3><p>如果上面的修改已经通过<code>git add</code>添加到暂存区了，想放弃对readme.txt的修改，怎么办？</p><p>用<code>git status</code>查看一下，修改只是添加到了暂存区，还没有提交：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line"><span class="keyword">On</span> branch master</span><br><span class="line">Changes <span class="keyword">to</span> be committed:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git reset HEAD &lt;file&gt;..."</span> <span class="keyword">to</span> unstage)</span><br><span class="line"></span><br><span class="line">        modified:   readme.txt</span><br></pre></td></tr></table></figure><p>Git同样告诉我们，用命令<code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">reset</span> <span class="keyword">HEAD</span> readme.txt</span><br><span class="line">Unstaged changes <span class="keyword">after</span> <span class="keyword">reset</span>:</span><br><span class="line">M       readme.txt</span><br></pre></td></tr></table></figure><p>git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。</p><p>再用git status查看一下，现在暂存区是干净的，工作区有修改：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for <span class="keyword">commit</span>:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</span><br><span class="line"></span><br><span class="line">        modified:   readme.txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure><p>还记得如何丢弃工作区的修改吗？</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout <span class="comment">-- readme.txt</span></span><br><span class="line">$ git status</span><br><span class="line"><span class="keyword">On</span> branch master</span><br><span class="line"><span class="keyword">nothing</span> <span class="keyword">to</span> <span class="keyword">commit</span>, working tree clean</span><br></pre></td></tr></table></figure><p>整个世界终于清静了！</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git简介及安装</title>
      <link href="/post/9362e2f9.html"/>
      <url>/post/9362e2f9.html</url>
      
        <content type="html"><![CDATA[<h1 id="git简介及安装"><a href="#git简介及安装" class="headerlink" title="git简介及安装"></a>git简介及安装</h1><h2 id="Git是什么？"><a href="#Git是什么？" class="headerlink" title="Git是什么？"></a>Git是什么？</h2><p>Git是一款免费、开源的<strong>分布式</strong>版本控制系统，用于敏捷高效地处理任何大小的项目。</p><a id="more"></a><h2 id="集中式-VS-分布式"><a href="#集中式-VS-分布式" class="headerlink" title="集中式 VS 分布式"></a>集中式 VS 分布式</h2><p>集中式版本控制系统中版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。</p><p><img src="https://gitee.com/morris131/morris-book/raw/master/tools/git/images/1574244516052.png" alt></p><p>分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><p><img src="https://gitee.com/morris131/morris-book/raw/master/tools/git/images/1574244525310.png" alt></p><p>和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。</p><p>在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p><h2 id="git的安装"><a href="#git的安装" class="headerlink" title="git的安装"></a>git的安装</h2><ol><li>前往<a href="https://git-scm.com" target="_blank" rel="noopener">git官网</a>下载与系统对应的版本进行安装。</li><li>查看是否安装成功<br>双击桌面Git Bash图标，弹出一个类似命令行的窗口，就说明Git安装成功！<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">git version <span class="number">2.17</span><span class="number">.0</span>.windows<span class="number">.1</span></span><br></pre></td></tr></table></figure></li><li>配置用户名与邮箱<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global user.name <span class="string">"morris"</span></span><br><span class="line">$ git<span class="built_in"> config </span>--global user.email <span class="string">"morris131@126.com"</span></span><br></pre></td></tr></table></figure></li></ol><p>配置完之后会在用户目录下生成一个.gitconfig文件，文件内容如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">name = morris</span><br><span class="line">eamil = <span class="symbol">morris131@</span><span class="number">126.</span>com</span><br></pre></td></tr></table></figure><p>也可以直接修改此文件，无需命令配置。</p><p>如果不配置用户名和邮箱，在提交到版本库时会报错。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m 'test'</span><br><span class="line"></span><br><span class="line">*** Please tell me who you are.</span><br><span class="line"></span><br><span class="line">Run</span><br><span class="line"></span><br><span class="line">  git config --global <span class="keyword">user</span>.email <span class="string">"you@example.com"</span></span><br><span class="line">  git config --global <span class="keyword">user</span>.name <span class="string">"Your Name"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">to</span> <span class="built_in">set</span> your account's <span class="keyword">default</span> identity.</span><br><span class="line">Omit --global <span class="keyword">to</span> <span class="built_in">set</span> the identity only <span class="keyword">in</span> this repository.</span><br><span class="line"></span><br><span class="line">fatal: unable <span class="keyword">to</span> auto-detect email address (got 'Morris@Morris-PC.(<span class="keyword">none</span>)')</span><br></pre></td></tr></table></figure><p>这里设置的用户名和邮箱将会显示在提交日志中的作者字段。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">commit e52c7b8b6063a3046ae73e9c44cbd6b90ab1e532</span><br><span class="line">Author: morris &lt;<span class="symbol">morris131@</span><span class="number">126.</span>com&gt;</span><br><span class="line">Date:   Tue Oct <span class="number">29</span> <span class="number">17</span>:<span class="number">23</span>:<span class="number">50</span> <span class="number">2019</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    add version1</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/morris131/morris-book/raw/master/tools/git/images/1574244546193.gif" alt></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git远程仓库的使用</title>
      <link href="/post/9fa19065.html"/>
      <url>/post/9fa19065.html</url>
      
        <content type="html"><![CDATA[<h1 id="git远程仓库的使用"><a href="#git远程仓库的使用" class="headerlink" title="git远程仓库的使用"></a>git远程仓库的使用</h1><p>在继续阅读后续内容前，请自行注册GitHub账号。</p><a id="more"></a><h2 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h2><ol><li><p>创建SSH Key。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"morris131@126.com"</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/Morris/.ssh/id_rsa):</span><br><span class="line">Created directory '/c/Users/Morris/.ssh'.</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /c/Users/Morris/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /c/Users/Morris/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:dxrmwVKbtxX3X3OkkcCSFuRR0yT0mvhHaBYYbOb0TnI morris131<span class="meta">@126.com</span></span><br><span class="line">The key's randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|<span class="string">         o=**o.  </span>|</span><br><span class="line">|<span class="string">         .O+.=.. </span>|</span><br><span class="line">|<span class="string">         *+o. = o</span>|</span><br><span class="line">|<span class="string">         oo+E= *.</span>|</span><br><span class="line">|<span class="string">        S X=O +.+</span>|</span><br><span class="line">|<span class="string">         = X.+  =</span>|</span><br><span class="line">|<span class="string">          o o . .</span>|</span><br><span class="line">|<span class="string">             .   </span>|</span><br><span class="line">|<span class="string">                 </span>|</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p>一路回车，使用默认值即可，在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p></li><li><p>在github配置页面添加公钥<br>登陆GitHub，打开<a href="https://github.com/settings/keys" target="_blank" rel="noopener">github配置页面</a>页面，然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容<br><img src="https://gitee.com/morris131/morris-book/raw/master/tools/git/images/1574244376668.png" alt></p></li></ol><h2 id="本地有仓库，提交远程仓库"><a href="#本地有仓库，提交远程仓库" class="headerlink" title="本地有仓库，提交远程仓库"></a>本地有仓库，提交远程仓库</h2><p>场景描述：在本地创建了一个Git仓库后，想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作。</p><ol><li>首先，登陆GitHub，然后，在右上角找到“new repository”按钮，创建一个新的仓库：<br><img src="https://gitee.com/morris131/morris-book/raw/master/tools/git/images/1574244455564.png" alt></li></ol><p>点击Create respository就会创建一个仓库，在创建完成页面复制出仓库地址（一般使用git协议，速度快）。</p><ol start="2"><li>关联远程仓库<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote <span class="keyword">add</span><span class="bash"> origin git@github.com:morris131/gittest.git</span></span><br></pre></td></tr></table></figure>添加后远程库的名字就是origin，这是Git默认的叫法，也可以改成别的。</li></ol><p>要查看远程库的信息，用<code>git remote -v</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  git@github<span class="selector-class">.com</span>:morris131/gittest<span class="selector-class">.git</span> (fetch)</span><br><span class="line">origin  git@github<span class="selector-class">.com</span>:morris131/gittest<span class="selector-class">.git</span> (push)</span><br></pre></td></tr></table></figure><ol start="3"><li>把本地库的所有内容推送到远程库上。</li></ol><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br><span class="line">The authenticity <span class="keyword">of</span> host <span class="symbol">'github</span>.com (<span class="number">13.250</span>.<span class="number">177.223</span>)' can<span class="symbol">'t</span> be established.</span><br><span class="line">RSA key fingerprint <span class="keyword">is</span> SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span><br><span class="line">Are you sure you want <span class="keyword">to</span> continue connecting (yes/no)? yes</span><br><span class="line"><span class="literal">Warning</span>: Permanently added <span class="symbol">'github</span>.com,<span class="number">13.250</span>.<span class="number">177.223</span>' (RSA) <span class="keyword">to</span> the list <span class="keyword">of</span> known hosts.</span><br><span class="line">Counting objects: <span class="number">3</span>, done.</span><br><span class="line">Writing objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), <span class="number">216</span> bytes | <span class="number">6.00</span> KiB/s, done.</span><br><span class="line">Total <span class="number">3</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line"><span class="keyword">To</span> github.com:morris131/gittest.git</span><br><span class="line"> * [<span class="keyword">new</span> branch]      master -&gt; master</span><br><span class="line">Branch <span class="symbol">'master</span>' set up <span class="keyword">to</span> track remote branch <span class="symbol">'master</span>' from <span class="symbol">'origin</span>'.</span><br></pre></td></tr></table></figure><p>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>现在起，只要本地作了提交，就可以通过下面的命令把本地master分支的最新修改推送至GitHub</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">push</span></span><br></pre></td></tr></table></figure><p>如果要推送其他分支，比如dev，就改成：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">push</span> <span class="built_in">origin</span> dev</span><br></pre></td></tr></table></figure><p>远程仓库有新的代码更新，可以通过下面的命令拉取：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git pull</span><br></pre></td></tr></table></figure><h2 id="本地无仓库，从远程仓库克隆"><a href="#本地无仓库，从远程仓库克隆" class="headerlink" title="本地无仓库，从远程仓库克隆"></a>本地无仓库，从远程仓库克隆</h2><p>场景描述：本地没有仓库，GitHub上已经存在仓库。</p><p>为了演示本地没有仓库，换个目录操作：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cd /e</span><br><span class="line">$ git clone <span class="symbol">git@</span>github.com:morris131/gittest.git</span><br><span class="line">Cloning <span class="built_in">int</span>o <span class="string">'gittest'</span>...</span><br><span class="line">remote: Enumerating objects: <span class="number">3</span>, done.</span><br><span class="line">remote: Counting objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), done.</span><br><span class="line">remote: Total <span class="number">3</span> (delta <span class="number">0</span>), reused <span class="number">3</span> (delta <span class="number">0</span>), pack-reused <span class="number">0</span></span><br><span class="line">Receiving objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), done.</span><br></pre></td></tr></table></figure><p>Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入用户名和密码。</p><h2 id="分支的基本操作"><a href="#分支的基本操作" class="headerlink" title="分支的基本操作"></a>分支的基本操作</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git branch <span class="comment">//查看本地所有分支 </span></span><br><span class="line">git branch -r <span class="comment">//查看远程所有分支</span></span><br><span class="line">git branch -a <span class="comment">//查看本地和远程的所有分支</span></span><br><span class="line">git branch <span class="params">&lt;branchname&gt;</span> <span class="comment">//新建分支</span></span><br><span class="line">git branch -d <span class="params">&lt;branchname&gt;</span> <span class="comment">//删除本地分支</span></span><br><span class="line">git branch -d -r <span class="params">&lt;branchname&gt;</span> <span class="comment">//删除远程分支，删除后还需推送到服务器</span></span><br><span class="line">git push origin:<span class="params">&lt;branchname&gt;</span>  <span class="comment">//删除后推送至服务器</span></span><br><span class="line">git branch -m <span class="params">&lt;oldbranch&gt;</span> <span class="params">&lt;newbranch&gt;</span> <span class="comment">//重命名本地分支</span></span><br></pre></td></tr></table></figure><h2 id="切换远程分支"><a href="#切换远程分支" class="headerlink" title="切换远程分支"></a>切换远程分支</h2><p>本地没有这个分支，如果要切换远程origin的dev分支，可以使用下面的命令：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b <span class="built_in">dev</span> origin/<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><h2 id="推送远程分支"><a href="#推送远程分支" class="headerlink" title="推送远程分支"></a>推送远程分支</h2><p>本地新建了一个分支，推送到远程</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -<span class="keyword">b</span> dev</span><br><span class="line">Switched <span class="keyword">to</span> <span class="keyword">a</span> <span class="keyword">new</span> branch <span class="string">'dev'</span></span><br><span class="line"></span><br><span class="line">$ git push</span><br><span class="line">fata<span class="variable">l:</span> The current branch dev <span class="built_in">has</span> <span class="keyword">no</span> upstream branch.</span><br><span class="line">To push the current branch <span class="built_in">and</span> <span class="keyword">set</span> the remote <span class="keyword">as</span> upstream, use</span><br><span class="line"></span><br><span class="line">    git push --<span class="keyword">set</span>-upstream origin dev</span><br><span class="line"></span><br><span class="line">$ git push --<span class="keyword">set</span>-upstream origin dev</span><br><span class="line">Counting object<span class="variable">s:</span> <span class="number">3</span>, done.</span><br><span class="line">Writing object<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), <span class="number">248</span> bytes | <span class="number">49.00</span> KiB/s, done.</span><br><span class="line">Total <span class="number">3</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">remote:</span><br><span class="line">remote: Create <span class="keyword">a</span> pull request <span class="keyword">for</span> <span class="string">'dev'</span> <span class="keyword">on</span> GitHub by visitin<span class="variable">g:</span></span><br><span class="line">remote:      http<span class="variable">s:</span>//github.<span class="keyword">com</span>/morris131/gittest/pull/<span class="keyword">new</span>/dev</span><br><span class="line">remote:</span><br><span class="line">To github.<span class="keyword">com</span>:morris131/gittest.git</span><br><span class="line"> * [<span class="keyword">new</span> branch]      dev -&gt; dev</span><br><span class="line">Branch <span class="string">'dev'</span> <span class="keyword">set</span> <span class="keyword">up</span> <span class="keyword">to</span> track remote branch <span class="string">'dev'</span> from <span class="string">'origin'</span>.</span><br></pre></td></tr></table></figure><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><p>git fetch是将远程主机的最新内容拉到本地，用户在检查了以后决定是否合并到工作本机分支中。</p><p>而git pull 则是将远程主机的最新内容拉下来后直接合并，即：git pull = git fetch + git merge，这样可能会产生冲突，需要手动解决。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的安装与发布github</title>
      <link href="/post/46654a1a.html"/>
      <url>/post/46654a1a.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo的安装与发布github"><a href="#hexo的安装与发布github" class="headerlink" title="hexo的安装与发布github"></a>hexo的安装与发布github</h1><h2 id="hexo的安装"><a href="#hexo的安装" class="headerlink" title="hexo的安装"></a>hexo的安装</h2><ol><li>准备工作</li></ol><ul><li>安装git</li><li>安装node.js</li></ul><a id="more"></a><ol start="2"><li><p>安装hexo</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="selector-tag">i</span> -g hexo</span><br></pre></td></tr></table></figure><p>i是install的简写，-g是表示全局安装（global）。<br>查看是否安装成功。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v</span><br><span class="line">hexo-cli: <span class="number">3.1</span><span class="number">.0</span></span><br><span class="line">os: Windows_NT <span class="number">6.1</span><span class="number">.7601</span> win32 x64</span><br><span class="line">node: <span class="number">12.13</span><span class="number">.0</span></span><br><span class="line">v8: <span class="number">7.7</span><span class="number">.299</span><span class="number">.13</span>-node<span class="number">.12</span></span><br><span class="line">uv: <span class="number">1.32</span><span class="number">.0</span></span><br><span class="line">zlib: <span class="number">1.2</span><span class="number">.11</span></span><br><span class="line">brotli: <span class="number">1.0</span><span class="number">.7</span></span><br><span class="line">ares: <span class="number">1.15</span><span class="number">.0</span></span><br><span class="line">modules: <span class="number">72</span></span><br><span class="line">nghttp2: <span class="number">1.39</span><span class="number">.2</span></span><br><span class="line">napi: <span class="number">5</span></span><br><span class="line">llhttp: <span class="number">1.1</span><span class="number">.4</span></span><br><span class="line">http_parser: <span class="number">2.8</span><span class="number">.0</span></span><br><span class="line">openssl: <span class="number">1.1</span><span class="number">.1</span>d</span><br><span class="line">cldr: <span class="number">35.1</span></span><br><span class="line">icu: <span class="number">64.2</span></span><br><span class="line">tz: <span class="number">2019</span>a</span><br><span class="line">unicode: <span class="number">12.1</span></span><br></pre></td></tr></table></figure></li><li><p>初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo init</span></span><br></pre></td></tr></table></figure></li><li><p>生成静态文件</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo g</span><br></pre></td></tr></table></figure><p>也可以用<code>hexo generate</code></p></li><li><p>启动服务</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br><span class="line"><span class="keyword">INFO</span>  <span class="keyword">Start</span> processing</span><br><span class="line"><span class="keyword">INFO</span>  Hexo <span class="keyword">is</span> running at http://localhost:<span class="number">4000</span> . Press Ctrl+C <span class="keyword">to</span> stop.</span><br></pre></td></tr></table></figure><p>也可以用<code>hexo server</code></p></li></ol><p>浏览器输入<code>http://localhost:4000</code>查看网站是否启动成功。</p><h2 id="发布github"><a href="#发布github" class="headerlink" title="发布github"></a>发布github</h2><ol><li>新增git仓库<br>github上新建一个以注册的昵称开头的repository。 比如演示用的昵称是morris131， repository的名称是morris131 。</li></ol><p>2、配置deploy的地址<br>修改hexo中的站点配置文件_config.yml，type为git， repository配置为新增的git仓库地址</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Deployment</span></span><br><span class="line"><span class="meta">## Docs: https:<span class="comment">//hexo.io/docs/deployment.html</span></span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span> </span><br><span class="line"><span class="symbol">    github:</span> git@github.com:morris131/morris131.github.io.git</span><br><span class="line"><span class="symbol">    gitee:</span> git@gitee.com:morris131/morris131.git</span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure><ol start="3"><li><p>安装hexo deploy插件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li><li><p>上传到github</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo d</span><br></pre></td></tr></table></figure><p>也可以用命令 <code>hexo deploy</code></p></li></ol><p>5、查看github的博客，看下效果<br>浏览器打开 <a href="https://morris131.github.io/">https://morris131.github.io/</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo next主题的安装与配置</title>
      <link href="/post/e216760c.html"/>
      <url>/post/e216760c.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-next主题的安装与配置"><a href="#hexo-next主题的安装与配置" class="headerlink" title="hexo next主题的安装与配置"></a>hexo next主题的安装与配置</h1><h2 id="主题的安装"><a href="#主题的安装" class="headerlink" title="主题的安装"></a>主题的安装</h2><p>下载主题</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/theme</span>-<span class="keyword">next</span>/hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>然后设置站点配置文件_config.yml：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: <span class="keyword">next</span></span><br></pre></td></tr></table></figure><h2 id="站点配置文件"><a href="#站点配置文件" class="headerlink" title="站点配置文件"></a>站点配置文件</h2><p>修改hexo_config.xml，文件过长，只列出了修改的配置，其他都是默认值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">枪手的博客</span> <span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">知识改变命运，编程照亮人生</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">你现在所得到的安逸将来要双倍偿还</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Morris</span> <span class="comment"># 作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># 主题语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span> <span class="comment">#中国的时区，不要乱改城市</span></span><br><span class="line"></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> <span class="comment">#是否开启代码高亮</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span> <span class="comment">#是否增加代码行号</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">true</span> <span class="comment">#自动判断代码语言</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span> <span class="comment"># 主题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span></span><br><span class="line"><span class="attr">    github:</span> <span class="string">git@github.com:morris131/morris131.github.io.git</span></span><br><span class="line"><span class="attr">    gitee:</span> <span class="string">git@gitee.com:morris131/morris131.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h2 id="主题配置文件"><a href="#主题配置文件" class="headerlink" title="主题配置文件"></a>主题配置文件</h2><p>hexo\themes\next_config.xml，文件过长，只列出了修改的配置，其他都是默认值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line"><span class="attr">  powered:</span></span><br><span class="line">    <span class="comment"># Hexo link (Powered by Hexo).</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">false</span> <span class="comment"># 底部底部Powered设置</span></span><br><span class="line">    <span class="comment"># Version info of Hexo after Hexo link (vX.X.X).</span></span><br><span class="line"><span class="attr">    version:</span> <span class="literal">false</span> <span class="comment"># 底部版本设置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  theme:</span></span><br><span class="line">    <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class="line"><span class="attr">    version:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span> <span class="comment"># 选择喜欢的主题样式</span></span><br><span class="line"></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span> <span class="comment"># 这里只是显示导航地址，具体页面得自己实现</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span> <span class="comment"># 这里只是显示导航地址，具体页面得自己实现</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable / Disable menu icons / item badges.</span></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line"><span class="attr">  icons:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  badges:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line"><span class="attr">  url:</span> <span class="string">/https://gitee.com/morris131/morris-book/raw/master/tools/hexo/images/morris.png</span> <span class="comment"># 将头像图片放置在hexo/themes/next/source/https://gitee.com/morris131/morris-book/raw/master/tools/hexo/images目录下</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be dispalyed in circle.</span></span><br><span class="line"><span class="attr">  rounded:</span> <span class="literal">true</span> <span class="comment">#鼠标放在头像上时是否旋转</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be rotated with the cursor.</span></span><br><span class="line"><span class="attr">  rotated:</span> <span class="literal">true</span> <span class="comment">#头像是否设为圆形，否则为矩形</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Posts / Categories / Tags in sidebar.</span></span><br><span class="line"><span class="attr">site_state:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatically excerpt (Not recommend).</span></span><br><span class="line"><span class="comment"># Use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></span><br><span class="line"><span class="attr">auto_excerpt:</span>  <span class="comment"># 自动截取文章，显示阅读全文按钮</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  length:</span> <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use icon instead of the symbol # to indicate the tag at the bottom of the post</span></span><br><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span> <span class="comment"># 显示tag的按钮图标</span></span><br></pre></td></tr></table></figure><h2 id="设置标签和目录类"><a href="#设置标签和目录类" class="headerlink" title="设置标签和目录类"></a>设置标签和目录类</h2><p>在主题配置文件配置了显示tags和categories，主页只会显示导航链接，点击会报错，需自己手动实现。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  tags:</span> <span class="meta-keyword">/tags/</span> || tags <span class="meta"># 这里只是显示导航地址，具体页面得自己实现</span></span><br><span class="line"><span class="symbol">  categories:</span> <span class="meta-keyword">/categories/</span> || th <span class="meta"># 这里只是显示导航地址，具体页面得自己实现</span></span><br></pre></td></tr></table></figure><p>在hexo\source\categories目录下新建index.md，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-09</span><span class="bullet">-12</span> <span class="number">16</span><span class="string">:52:37</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>在hexo\source\tags目录下新建index.md，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-09</span><span class="bullet">-12</span> <span class="number">16</span><span class="string">:53:27</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="实现站内搜索"><a href="#实现站内搜索" class="headerlink" title="实现站内搜索"></a>实现站内搜索</h2><ol><li>安装插件<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> <span class="comment">--save hexo-generator-search</span></span><br></pre></td></tr></table></figure></li><li>配置主题配置文件开启搜索<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="增加阅读次数"><a href="#增加阅读次数" class="headerlink" title="增加阅读次数"></a>增加阅读次数</h2><ol><li><p>去<a href="https://leancloud.cn/" target="_blank" rel="noopener">leancloud官网</a>注册一个账号</p></li><li><p>进入控制台创建一个开发版应用<br><img src="_v_https://gitee.com/morris131/morris-book/raw/master/tools/hexo/images/20191108145446335_5976.png" alt="创建应用"><br><img src="_v_https://gitee.com/morris131/morris-book/raw/master/tools/hexo/images/20191108145513703_4853.png" alt="点击存储"></p></li><li><p>创建Class，class名称为：Comment<br><img src="_v_https://gitee.com/morris131/morris-book/raw/master/tools/hexo/images/20191108145609936_29874.png" alt="创建类"></p></li><li><p>在LeanCloud-设置-把除数据存储其他选项都关闭，安全域名中添加域名。<br><img src="_v_https://gitee.com/morris131/morris-book/raw/master/tools/hexo/images/20191108145903926_22000.png" alt="设置"></p></li><li><p>在设置-&gt;应用 Keys中找到api和key，填在next主题配置文件中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  app_id:</span> <span class="string">****</span></span><br><span class="line"><span class="attr">  app_key:</span> <span class="string">****</span></span><br><span class="line">  <span class="comment"># Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span></span><br><span class="line">  <span class="comment"># If you don't care about security in leancloud counter and just want to use it directly</span></span><br><span class="line">  <span class="comment"># (without hexo-leancloud-counter-security plugin), set `security` to `false`.</span></span><br><span class="line"><span class="attr">  security:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  betterPerformance:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="增加阅读评论"><a href="#增加阅读评论" class="headerlink" title="增加阅读评论"></a>增加阅读评论</h2><ol><li><p>还是使用的leancloud，创建一个名为Counter的class。</p></li><li><p>在设置-&gt;应用 Keys中找到api和key（与上面增加阅读次数的值一样），填在next主题配置文件中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> <span class="comment"># When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version</span></span><br><span class="line"><span class="attr">  appid:</span> <span class="string">****</span></span><br><span class="line"><span class="attr">  appkey:</span> <span class="string">****</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">false</span> <span class="comment"># Mail notifier. See: https://github.com/xCss/Valine/wiki</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">来呀！吐槽一番吧！</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">mm</span> <span class="comment"># Gravatar style</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># Custom comment header</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line"><span class="attr">  language:</span> <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line"><span class="attr">  visitor:</span> <span class="literal">false</span> <span class="comment"># leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors' for counter compatibility. Article reading statistic https://valine.js.org/visitor.html</span></span><br><span class="line"><span class="attr">  comment_count:</span> <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line"><span class="attr">  recordIP:</span> <span class="literal">false</span> <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line"><span class="attr">  serverURLs:</span> <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="文章链接持久化"><a href="#文章链接持久化" class="headerlink" title="文章链接持久化"></a>文章链接持久化</h2><p>安装插件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-abbrlink <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>站点配置文件里配置:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">permalink:</span> post/:abbrlink.html</span><br><span class="line"><span class="symbol">abbrlink:</span></span><br><span class="line"><span class="symbol">  alg:</span> <span class="keyword">crc32</span>  # 算法：crc16(<span class="meta">default</span>) <span class="keyword">and</span> <span class="keyword">crc32</span></span><br><span class="line"><span class="symbol">  rep:</span> hex    # 进制：<span class="keyword">dec</span>(<span class="meta">default</span>) <span class="keyword">and</span> hex</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC启动流程及源码分析</title>
      <link href="/post/afc97d52.html"/>
      <url>/post/afc97d52.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-MVC启动流程及源码分析"><a href="#Spring-MVC启动流程及源码分析" class="headerlink" title="Spring MVC启动流程及源码分析"></a>Spring MVC启动流程及源码分析</h1><h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">"3.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--全局变量配置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--监听器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--解决乱码问题的filter--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--Restful前端控制器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="WEB应用初始化流程"><a href="#WEB应用初始化流程" class="headerlink" title="WEB应用初始化流程"></a>WEB应用初始化流程</h2><p>下面是一个web应用启动后初始化的步骤：</p><ol><li>创建和初始化<listener>元素标记的listener</listener></li><li>对于所有事件监听器，如果实现了ServletContextListener接口，将会执行其实现的contextInitialized()方法</li><li>创建和初始化<filter>元素标记的filter，并调用其init()方法</filter></li><li>根据<load-on-startup>的权值按顺序创建和初始化<servlet>元素标记的servlet，并调用其init()方法</servlet></load-on-startup></li></ol><h2 id="Listener的初始化过程"><a href="#Listener的初始化过程" class="headerlink" title="Listener的初始化过程"></a>Listener的初始化过程</h2><p>web.xml中首先定义了<context-param>标签，用于配置一个全局变量，<context-param>标签的内容读取后会被放进application中，做为Web应用的全局变量使用，接下来创建listener时会使用到这个全局变量，因此，Web应用在容器中部署后，进行初始化时会先读取这个全局变量，之后再进行上述讲解的初始化启动过程。</context-param></context-param></p><p>接着定义了一个ContextLoaderListener类的listener。查看ContextLoaderListener的类声明源码如下:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ContextLoaderListener</span> <span class="keyword">extends</span> <span class="title">ContextLoader</span> <span class="title">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br></pre></td></tr></table></figure><p> ContextLoaderListener类继承了ContextLoader类并实现了ServletContextListener接口，再看一下ServletContextListener接口源码:<br> <figure class="highlight plain"><figcaption><span>interface ServletContextListener extends EventListener &#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    default public void contextInitialized(ServletContextEvent sce) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    default public void contextDestroyed(ServletContextEvent sce) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br> 该接口只有两个方法contextInitialized和contextDestroyed，这里采用的是观察者模式，也称为为订阅-发布模式，实现了该接口的listener会向发布者进行订阅，当Web应用初始化或销毁时会分别调用上述两个方法。</p><p> 继续看ContextLoaderListener，该listener实现了ServletContextListener接口，因此在Web应用初始化时会调用该方法，该方法的具体实现如下：<br> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void contextInitialized(ServletContextEvent event) &#123;</span><br><span class="line">initWebApplicationContext(event.getServletContext());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> WebApplicationContext initWebApplicationContext(ServletContext servletContext) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">              首先通过WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE</span></span><br><span class="line"><span class="comment">              这个String类型的静态变量获取一个根IoC容器，根IoC容器作为全局变量</span></span><br><span class="line"><span class="comment">              存储在application对象中，如果存在则有且只能有一个</span></span><br><span class="line"><span class="comment">              如果在初始化根WebApplicationContext即根IoC容器时发现已经存在</span></span><br><span class="line"><span class="comment">              则直接抛出异常，因此web.xml中只允许存在一个ContextLoader类或其子类的对象</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">          </span><br><span class="line">  <span class="keyword">if</span> (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> new IllegalStateException(</span><br><span class="line">  <span class="string">"Cannot initialize context because there is already a root application context present - "</span> +</span><br><span class="line">  <span class="string">"check whether you have multiple ContextLoader* definitions in your web.xml!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Log logger = LogFactory.getLog(ContextLoader.<span class="keyword">class</span>);</span><br><span class="line">  servletContext.log(<span class="string">"Initializing Spring root WebApplicationContext"</span>);</span><br><span class="line">  <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">  logger.info(<span class="string">"Root WebApplicationContext: initialization started"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  long startTime = System.currentTimeMillis();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// Store context in local instance variable, to guarantee that</span></span><br><span class="line">  <span class="comment">// it is available on ServletContext shutdown.</span></span><br><span class="line">  <span class="comment">// 如果当前成员变量中不存在WebApplicationContext则创建一个根WebApplicationContext</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.context == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.context = createWebApplicationContext(servletContext);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.context instanceof ConfigurableWebApplicationContext) &#123;</span><br><span class="line">  ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) <span class="keyword">this</span>.context;</span><br><span class="line">  <span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line">  <span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line">  <span class="comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line">  <span class="keyword">if</span> (cwac.getParent() == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="comment">// The context instance was injected without an explicit parent -&gt;</span></span><br><span class="line">  <span class="comment">// determine parent for root web application context, if any.</span></span><br><span class="line">  ApplicationContext parent = loadParentContext(servletContext);</span><br><span class="line">  <span class="comment">//为根WebApplicationContext设置一个父容器</span></span><br><span class="line">  cwac.setParent(parent);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//配置并刷新整个根IoC容器，在这里会进行Bean的创建和初始化</span></span><br><span class="line">  configureAndRefreshWebApplicationContext(cwac, servletContext);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//将创建好的IoC容器放入到application对象中，并设置key为WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE</span></span><br><span class="line">  servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="keyword">this</span>.context);</span><br><span class="line">  </span><br><span class="line">  ClassLoader ccl = Thread.currentThread().getContextClassLoader();</span><br><span class="line">  <span class="keyword">if</span> (ccl == ContextLoader.<span class="keyword">class</span>.getClassLoader()) &#123;</span><br><span class="line">  currentContext = <span class="keyword">this</span>.context;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (ccl != <span class="literal">null</span>) &#123;</span><br><span class="line">  currentContextPerThread.put(ccl, <span class="keyword">this</span>.context);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">  logger.debug(<span class="string">"Published root WebApplicationContext as ServletContext attribute with name ["</span> +</span><br><span class="line">  WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + <span class="string">"]"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">  long elapsedTime = System.currentTimeMillis() - startTime;</span><br><span class="line">  logger.info(<span class="string">"Root WebApplicationContext: initialization completed in "</span> + elapsedTime + <span class="string">" ms"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.context;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">  logger.error(<span class="string">"Context initialization failed"</span>, ex);</span><br><span class="line">  servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex);</span><br><span class="line">  <span class="keyword">throw</span> ex;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Error err) &#123;</span><br><span class="line">  logger.error(<span class="string">"Context initialization failed"</span>, err);</span><br><span class="line">  servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err);</span><br><span class="line">  <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br> initWebApplicationContext()方法如上注解讲述，主要目的就是创建root WebApplicationContext对象即根IoC容器，其中比较重要的就是，整个Web应用如果存在根IoC容器则有且只能有一个，根IoC容器作为全局变量存储在ServletContext即application对象中。将根IoC容器放入到application对象之前进行了IoC容器的配置和刷新操作，调用了configureAndRefreshWebApplicationContext()方法，该方法源码如下:</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">protected void <span class="built_in">configureAndRefreshWebApplicationContext</span>(ConfigurableWebApplicationContext wac, ServletContext sc) &#123;</span><br><span class="line"><span class="keyword">if</span> (ObjectUtils.identityToString(wac).<span class="built_in">equals</span>(wac.<span class="built_in">getId</span>())) &#123;</span><br><span class="line"><span class="comment">// The application context id is still set to its original default value</span></span><br><span class="line"><span class="comment">// -&gt; assign a more useful id based on available information</span></span><br><span class="line"><span class="keyword">String</span> idParam = sc.getInitParameter(CONTEXT_ID_PARAM);</span><br><span class="line"><span class="keyword">if</span> (idParam != <span class="built_in">null</span>) &#123;</span><br><span class="line">wac.setId(idParam);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Generate default id...</span></span><br><span class="line">wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX +</span><br><span class="line">ObjectUtils.getDisplayString(sc.getContextPath()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wac.setServletContext(sc);</span><br><span class="line"><span class="comment">//获取web.xml中&lt;context-param&gt;标签配置的全局变量，也就是获取spring.xml，并将其放入到WebApplicationContext中</span></span><br><span class="line"><span class="keyword">String</span> configLocationParam = sc.getInitParameter(CONFIG_LOCATION_PARAM);</span><br><span class="line"><span class="keyword">if</span> (configLocationParam != <span class="built_in">null</span>) &#123;</span><br><span class="line">wac.setConfigLocation(configLocationParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The wac environment's #initPropertySources will be called in any case when the context</span></span><br><span class="line"><span class="comment">// is refreshed; do it eagerly here to ensure servlet property sources are in place for</span></span><br><span class="line"><span class="comment">// use in any post-processing or initialization that occurs below prior to #refresh</span></span><br><span class="line">ConfigurableEnvironment env = wac.getEnvironment();</span><br><span class="line"><span class="keyword">if</span> (env instanceof ConfigurableWebEnvironment) &#123;</span><br><span class="line">((ConfigurableWebEnvironment) env).<span class="built_in">initPropertySources</span>(sc, <span class="built_in">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">customizeContext</span>(sc, wac);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用父类AbstractApplicationContext创建并初始化spring.xml中的Bean</span></span><br><span class="line">wac.refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Filter的初始化"><a href="#Filter的初始化" class="headerlink" title="Filter的初始化"></a>Filter的初始化</h2><p>在监听器listener初始化完成后，按照文章开始的讲解，接下来会进行filter的初始化操作，filter的创建和初始化中没有涉及IoC容器的相关操作，因此不是本文讲解的重点，本文举例的filter是一个用于编码用户请求和响应的过滤器，采用utf-8编码用于适配中文。</p><h2 id="Servlet的初始化"><a href="#Servlet的初始化" class="headerlink" title="Servlet的初始化"></a>Servlet的初始化</h2><p>Web应用启动的最后一个步骤就是创建和初始化相关Servlet，在开发中常用的Servlet就是DispatcherServlet类前端控制器，前端控制器作为中央控制器是整个Web应用的核心，用于获取分发用户请求并返回响应。</p><p>通过类的继承关系可以看出DispatcherServlet类间接实现了Servlet接口，因此其本质上依旧是一个Servlet。DispatcherServlet类的设计很巧妙，上层父类不同程度的实现了相关接口的部分方法，并留出了相关方法用于子类覆盖，将不变的部分统一实现，将变化的部分预留方法用于子类实现。<br>在Web应用部署到容器后进行Servlet初始化时会调用相关的init(ServletConfig)方法，此方法的实现实在父类HttpServletBean中，源码如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public final void init<span class="literal">()</span> throws ServletException &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.is<span class="constructor">DebugEnabled()</span>) &#123;</span><br><span class="line">logger.debug(<span class="string">"Initializing servlet '"</span> + get<span class="constructor">ServletName()</span> + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set bean properties from init parameters.</span></span><br><span class="line">PropertyValues pvs = <span class="keyword">new</span> <span class="constructor">ServletConfigPropertyValues(<span class="params">getServletConfig</span>()</span>, this.requiredProperties);</span><br><span class="line"><span class="keyword">if</span> (!pvs.is<span class="constructor">Empty()</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BeanWrapper bw = <span class="module-access"><span class="module"><span class="identifier">PropertyAccessorFactory</span>.</span></span>for<span class="constructor">BeanPropertyAccess(<span class="params">this</span>)</span>;</span><br><span class="line">ResourceLoader resourceLoader = <span class="keyword">new</span> <span class="constructor">ServletContextResourceLoader(<span class="params">getServletContext</span>()</span>);</span><br><span class="line">bw.register<span class="constructor">CustomEditor(Resource.<span class="params">class</span>, <span class="params">new</span> ResourceEditor(<span class="params">resourceLoader</span>, <span class="params">getEnvironment</span>()</span>));</span><br><span class="line">init<span class="constructor">BeanWrapper(<span class="params">bw</span>)</span>;</span><br><span class="line">bw.set<span class="constructor">PropertyValues(<span class="params">pvs</span>, <span class="params">true</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">catch (BeansException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.is<span class="constructor">ErrorEnabled()</span>) &#123;</span><br><span class="line">logger.error(<span class="string">"Failed to set bean properties on servlet '"</span> + get<span class="constructor">ServletName()</span> + <span class="string">"'"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">throw ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Let subclasses do whatever initialization they like.</span></span><br><span class="line">init<span class="constructor">ServletBean()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logger.is<span class="constructor">DebugEnabled()</span>) &#123;</span><br><span class="line">logger.debug(<span class="string">"Servlet '"</span> + get<span class="constructor">ServletName()</span> + <span class="string">"' configured successfully"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>init()中调用了子类FrameworkServlet的initServletBean()方法，</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">initServletBean</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">getServletContext().log(<span class="string">"Initializing Spring FrameworkServlet '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.info(<span class="string">"FrameworkServlet '"</span> + getServletName() + <span class="string">"': initialization started"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.webApplicationContext = initWebApplicationContext();</span><br><span class="line">initFrameworkServlet();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ServletException | RuntimeException ex) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.<span class="keyword">error</span>(<span class="string">"Context initialization failed"</span>, ex);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line"><span class="keyword">long</span> elapsedTime = System.currentTimeMillis() - startTime;</span><br><span class="line"><span class="keyword">this</span>.logger.info(<span class="string">"FrameworkServlet '"</span> + getServletName() + <span class="string">"': initialization completed in "</span> +</span><br><span class="line">elapsedTime + <span class="string">" ms"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法中比较重要的就是initWebApplicationContext()方法的调用，该方法仍由FrameworkServlet抽象类实现，继续查看其源码如下所示:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">protected WebApplicationContext init<span class="constructor">WebApplicationContext()</span> &#123;</span><br><span class="line">       <span class="comment">// 获取之前由ContextLoaderListener创建的根IoC容器</span></span><br><span class="line">WebApplicationContext rootContext =</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">WebApplicationContextUtils</span>.</span></span>get<span class="constructor">WebApplicationContext(<span class="params">getServletContext</span>()</span>);</span><br><span class="line">WebApplicationContext wac = null;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (this.webApplicationContext != null) &#123;</span><br><span class="line"><span class="comment">// A context instance was injected at construction time -&gt; use it</span></span><br><span class="line">wac = this.webApplicationContext;</span><br><span class="line"><span class="keyword">if</span> (wac instanceof ConfigurableWebApplicationContext) &#123;</span><br><span class="line">ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;</span><br><span class="line"><span class="keyword">if</span> (!cwac.is<span class="constructor">Active()</span>) &#123;</span><br><span class="line"><span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line"><span class="comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line"><span class="keyword">if</span> (cwac.get<span class="constructor">Parent()</span><span class="operator"> == </span>null) &#123;</span><br><span class="line"><span class="comment">// The context instance was injected without an explicit parent -&gt; set</span></span><br><span class="line"><span class="comment">// the root application context (if any; may be null) as the parent</span></span><br><span class="line"></span><br><span class="line">                       <span class="comment">// 如果当前Servelt存在一个WebApplicationContext即子IoC容器,则将根IoC容器作为子IoC容器的父容器</span></span><br><span class="line">cwac.set<span class="constructor">Parent(<span class="params">rootContext</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 读取spring-mvc.xml文件，配置并刷新当前的子IoC容器，功能与前文讲解根IoC容器时的配置刷新一致，用于构建相关Bean</span></span><br><span class="line">configure<span class="constructor">AndRefreshWebApplicationContext(<span class="params">cwac</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (wac<span class="operator"> == </span>null) &#123;</span><br><span class="line"><span class="comment">// No context instance was injected at construction time -&gt; see if one</span></span><br><span class="line"><span class="comment">// has been registered in the servlet context. If one exists, it is assumed</span></span><br><span class="line"><span class="comment">// that the parent context (if any) has already been set and that the</span></span><br><span class="line"><span class="comment">// user has performed any initialization such as setting the context id</span></span><br><span class="line"><span class="comment">// 如果当前Servlet不存在一个子IoC容器则去查找一下</span></span><br><span class="line">wac = find<span class="constructor">WebApplicationContext()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (wac<span class="operator"> == </span>null) &#123;</span><br><span class="line"><span class="comment">// No context instance is defined for this servlet -&gt; create a local one</span></span><br><span class="line"><span class="comment">// 如果仍旧没有查找到子IoC容器则创建一个子IoC容器</span></span><br><span class="line">wac = create<span class="constructor">WebApplicationContext(<span class="params">rootContext</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!this.refreshEventReceived) &#123;</span><br><span class="line"><span class="comment">// Either the context is not a ConfigurableApplicationContext with refresh</span></span><br><span class="line"><span class="comment">// support or the context injected at construction time had already been</span></span><br><span class="line"><span class="comment">// refreshed -&gt; trigger initial onRefresh manually here.</span></span><br><span class="line"><span class="comment">//调用子类DispatcherServlet覆盖的onRefresh方法完成“可变”的初始化过程</span></span><br><span class="line">on<span class="constructor">Refresh(<span class="params">wac</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (this.publishContext) &#123;</span><br><span class="line"><span class="comment">// Publish the context as a servlet context attribute.</span></span><br><span class="line">String attrName = get<span class="constructor">ServletContextAttributeName()</span>;</span><br><span class="line">get<span class="constructor">ServletContext()</span>.set<span class="constructor">Attribute(<span class="params">attrName</span>, <span class="params">wac</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (this.logger.is<span class="constructor">DebugEnabled()</span>) &#123;</span><br><span class="line">this.logger.debug(<span class="string">"Published WebApplicationContext of servlet '"</span> + get<span class="constructor">ServletName()</span> +</span><br><span class="line"><span class="string">"' as ServletContext attribute with name ["</span> + attrName + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当IoC子容器构造完成后调用了onRefresh()方法，</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This implementation calls &#123;@link #initStrategies&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Override</span><br><span class="line">protected void on<span class="constructor">Refresh(ApplicationContext <span class="params">context</span>)</span> &#123;</span><br><span class="line">init<span class="constructor">Strategies(<span class="params">context</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize the strategy objects that this servlet uses.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">protected void init<span class="constructor">Strategies(ApplicationContext <span class="params">context</span>)</span> &#123;</span><br><span class="line">init<span class="constructor">MultipartResolver(<span class="params">context</span>)</span>;</span><br><span class="line">init<span class="constructor">LocaleResolver(<span class="params">context</span>)</span>;</span><br><span class="line">init<span class="constructor">ThemeResolver(<span class="params">context</span>)</span>;</span><br><span class="line">init<span class="constructor">HandlerMappings(<span class="params">context</span>)</span>;</span><br><span class="line">init<span class="constructor">HandlerAdapters(<span class="params">context</span>)</span>;</span><br><span class="line">init<span class="constructor">HandlerExceptionResolvers(<span class="params">context</span>)</span>;</span><br><span class="line">init<span class="constructor">RequestToViewNameTranslator(<span class="params">context</span>)</span>;</span><br><span class="line">init<span class="constructor">ViewResolvers(<span class="params">context</span>)</span>;</span><br><span class="line">init<span class="constructor">FlashMapManager(<span class="params">context</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>onRefresh()方法直接调用了initStrategies()方法，源码如上，通过函数名可以判断，该方法用于初始化创建multipartResovle来支持图片等文件的上传、本地化解析器、主题解析器、HandlerMapping处理器映射器、HandlerAdapter处理器适配器、异常解析器、视图解析器、flashMap管理器等，这些组件都是SpringMVC开发中的重要组件，九大组件的初始化创建过程均在此完成。</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC HandlerMapping的初始化</title>
      <link href="/post/3085de39.html"/>
      <url>/post/3085de39.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-MVC-HandlerMapping的初始化"><a href="#Spring-MVC-HandlerMapping的初始化" class="headerlink" title="Spring MVC HandlerMapping的初始化"></a>Spring MVC HandlerMapping的初始化</h1><h2 id="mvc-annotation-driven"><a href="#mvc-annotation-driven" class="headerlink" title="mvc:annotation-driven"></a><a href="mvc:annotation-driven" target="_blank" rel="noopener">mvc:annotation-driven</a></h2><a id="more"></a><p>在spring-mvc.xml中有这样一个配置：<a href="mvc:annotation-driven" target="_blank" rel="noopener">mvc:annotation-driven</a>。</p><p><a href="mvc:annotation-driven" target="_blank" rel="noopener">mvc:annotation-driven</a>会自动注册RequestMappingHandlerMapping与RequestMappingHandlerAdapter两个Bean,这是Spring MVC为@Controller分发请求所必需的，并且提供了数据绑定支持，@NumberFormatannotation支持，@DateTimeFormat支持,@Valid支持读写XML的支持（JAXB）和读写JSON的支持（默认Jackson）等功能。</p><h2 id="RequestMappingHandlerMapping"><a href="#RequestMappingHandlerMapping" class="headerlink" title="RequestMappingHandlerMapping"></a>RequestMappingHandlerMapping</h2><p>RequestMappingHandlerMapping的父类AbstractHandlerMethodMapping类实现了InitializingBean接口，在属性初始化完成后会调用afterPropertiesSet()方法，在该方法中调用initHandlerMethods();进行HandlerMethod初始化。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public void after<span class="constructor">PropertiesSet()</span> &#123;</span><br><span class="line">init<span class="constructor">HandlerMethods()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扫描ApplicationContext中的Bean，查找并注册 handlerMethod </span></span><br><span class="line">protected void init<span class="constructor">HandlerMethods()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.is<span class="constructor">DebugEnabled()</span>) &#123;</span><br><span class="line">logger.debug(<span class="string">"Looking for request mappings in application context: "</span> + get<span class="constructor">ApplicationContext()</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从ApplicationContext中获取所有Bean名称  </span></span><br><span class="line">String<span class="literal">[]</span> beanNames = (this.detectHandlerMethodsInAncestorContexts ?</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">BeanFactoryUtils</span>.</span></span>bean<span class="constructor">NamesForTypeIncludingAncestors(<span class="params">obtainApplicationContext</span>()</span>, <span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span><span class="keyword">class</span>) :</span><br><span class="line">obtain<span class="constructor">ApplicationContext()</span>.get<span class="constructor">BeanNamesForType(Object.<span class="params">class</span>)</span>);</span><br><span class="line"></span><br><span class="line">for (String beanName : beanNames) &#123;</span><br><span class="line"><span class="keyword">if</span> (!beanName.starts<span class="constructor">With(SCOPED_TARGET_NAME_PREFIX)</span>) &#123;</span><br><span class="line">Class&lt;?&gt; beanType = null;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">beanType = obtain<span class="constructor">ApplicationContext()</span>.get<span class="constructor">Type(<span class="params">beanName</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">catch (Throwable ex) &#123;</span><br><span class="line"><span class="comment">// An unresolvable bean type, probably from a lazy bean - let's ignore it.</span></span><br><span class="line"><span class="keyword">if</span> (logger.is<span class="constructor">DebugEnabled()</span>) &#123;</span><br><span class="line">logger.debug(<span class="string">"Could not resolve target class for bean with name '"</span> + beanName + <span class="string">"'"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (beanType != null<span class="operator"> &amp;&amp; </span>is<span class="constructor">Handler(<span class="params">beanType</span>)</span>) &#123;</span><br><span class="line">    <span class="comment">//从bean中查找handler method</span></span><br><span class="line">detect<span class="constructor">HandlerMethods(<span class="params">beanName</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">handler<span class="constructor">MethodsInitialized(<span class="params">getHandlerMethods</span>()</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>detectHandlerMethods()的源代码如下：</p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">protected void detectHandlerMethods(<span class="keyword">final</span> Object handler) &#123;</span><br><span class="line"><span class="class"><span class="keyword">Class</span>&lt;?&gt; <span class="title">handlerType</span> = (<span class="title">handler</span> <span class="title">instanceof</span> <span class="title">String</span> ?</span></span><br><span class="line">obtainApplicationContext().getType((String) handler) : handler.getClass());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (handlerType != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">Class</span>&lt;?&gt; <span class="title">userType</span> = <span class="title">ClassUtils</span>.<span class="title">getUserClass</span>(<span class="title">handlerType</span>);</span></span><br><span class="line"></span><br><span class="line">// value为RequestingMappingInfo</span><br><span class="line">Map&lt;<span class="function"><span class="keyword">Method</span>, <span class="title">T</span>&gt; <span class="title">methods</span> =</span> MethodIntrospector.selectMethods(userType,</span><br><span class="line">(MethodIntrospector.MetadataLookup&lt;T&gt;) <span class="function"><span class="keyword">method</span> -&gt; &#123;</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    // 调用RequestMappingHandlerMapping中的getMappingForMethod</span><br><span class="line"><span class="keyword">return</span> getMappingForMethod(<span class="function"><span class="keyword">method</span>, <span class="title">userType</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Invalid mapping on handler class ["</span> +</span><br><span class="line">userType.getName() + <span class="string">"]: "</span> + <span class="function"><span class="keyword">method</span>, <span class="title">ex</span>);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(methods.size() + <span class="string">" request handler methods found on "</span> + userType + <span class="string">": "</span> + methods);</span><br><span class="line">&#125;</span><br><span class="line">methods.forEach((<span class="function"><span class="keyword">method</span>, <span class="title">mapping</span>) -&gt; &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">Method</span> <span class="title">invocableMethod</span> =</span> AopUtils.selectInvocableMethod(<span class="function"><span class="keyword">method</span>, <span class="title">userType</span>);</span></span><br><span class="line">registerHandlerMethod(handler, invocableMethod, mapping);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用RequestMappingHandlerMapping中的getMappingForMethod：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">protected RequestMappingInfo get<span class="constructor">MappingForMethod(Method <span class="params">method</span>, Class&lt;?&gt; <span class="params">handlerType</span>)</span> &#123;</span><br><span class="line">RequestMappingInfo info = create<span class="constructor">RequestMappingInfo(<span class="params">method</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (info != null) &#123;</span><br><span class="line">RequestMappingInfo typeInfo = create<span class="constructor">RequestMappingInfo(<span class="params">handlerType</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (typeInfo != null) &#123;</span><br><span class="line">    <span class="comment">// 类和方法的@RequestMapping注解都存在的话，进行组合</span></span><br><span class="line">info = typeInfo.combine(info);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> RequestMappingInfo create<span class="constructor">RequestMappingInfo(AnnotatedElement <span class="params">element</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 寻找RequestMapping注解</span></span><br><span class="line">RequestMapping requestMapping = <span class="module-access"><span class="module"><span class="identifier">AnnotatedElementUtils</span>.</span></span>find<span class="constructor">MergedAnnotation(<span class="params">element</span>, RequestMapping.<span class="params">class</span>)</span>;</span><br><span class="line">RequestCondition&lt;?&gt; condition = (element instanceof Class ?</span><br><span class="line">get<span class="constructor">CustomTypeCondition((Class&lt;?&gt;)</span> element) : get<span class="constructor">CustomMethodCondition((Method)</span> element));</span><br><span class="line">return (requestMapping != null ? create<span class="constructor">RequestMappingInfo(<span class="params">requestMapping</span>, <span class="params">condition</span>)</span> : null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> mvc </tag>
            
            <tag> handlerMapping </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC工作原理</title>
      <link href="/post/a155b976.html"/>
      <url>/post/a155b976.html</url>
      
        <content type="html"><![CDATA[<h1 id="MVC工作原理"><a href="#MVC工作原理" class="headerlink" title="MVC工作原理"></a>MVC工作原理</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>mvc是一种程序开发设计模式,它实现了显示模块与功能模块的分离。提高了程序的可维护性、可移植性、可扩展性与可重用性，降低了程序的开发难度。它主要分模型、视图、控制器三层。 </p><a id="more"></a><ol><li>模型(model)它是应用程序的主体部分，主要包括业务逻辑模块（web项目中的Action,dao类）和数据模块（pojo类）。模型 与数据格式无关，这样一个模型能为多个视图提供数据。由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性 </li><li>视图(view) 用户与之交互的界面、在web中视图一般由jsp,html组成 </li><li>控制器(controller)接收来自界面的请求 并交给模型进行处理 在这个过程中控制器不做任何处理只是起到了一个连接的做用</li></ol>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bean的生命周期</title>
      <link href="/post/48c92662.html"/>
      <url>/post/48c92662.html</url>
      
        <content type="html"><![CDATA[<h1 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h1><h2 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h2><ul><li>PO（Persistent Object）：持久对象，与数据库中的表相映射的Java对象，对应数据库中某个表中的一条记录。PO不包含业务逻辑和数据逻辑，就是一个Entity。</li><li>VO（Value Object）：值对象,通常用于业务层之间的数据传递，和PO一样也是仅仅包含数据而已。但应是抽象出的业务对象，可以和表对应，也可以不，这根据业务的需要。</li><li>BO（Business Object）：业务对象层，封装业务逻辑的java对象，通过调用DAO方法，结合PO,VO进行业务操作。它就是一个对PO的组合，也可以就是PO，只是出发点是满足业务的传输对象。</li><li>DTO（Data Transfer Object）：数据传输对象，单纯用来数据传输的对象。</li><li>POJO（Plain Ordinary Java Object）：简单的Java对象，实际就是普通JavaBeans。包含DTO、VO 、BO、PO等。</li></ul><a id="more"></a><h2 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h2><p>在Spring中，那些组成应用程序的主体及由Spring IoC容器所管理的对象，被称之为Bean。简单地讲，bean就是由IoC容器初始化、装配及管理的对象，除此之外，bean就与应用程序中的其他对象没有什么区别了。而bean的定义以及bean相互间的依赖关系将通过配置元数据来描述。</p><p>下面就是Spring直接支持的五种作用域了，当然开发者也可以自己定制作用域。</p><ul><li>singleton：容器中仅存在一个对象，默认值</li><li>prototype：每调用一次getBean()，都返回一个新的对象</li><li>request：每一个HTTP请求会产生一个Bean对象</li><li>session：同一个Http Session共用一个Bean    </li><li>global session：类似于seesion作用域，仅在portletweb应用中有意义</li></ul><p>说明：request,session以及global session这三个作用域都是只有在基于web的SpringApplicationContext实现的（比如XmlWebApplicationContext）中才能使用。 如果开发者仅仅在常规的Spring IoC容器中比如ClassPathXmlApplicationContext中使用这些作用域，那么将会抛出一个IllegalStateException来说明使用了未知的作用域。</p><h2 id="Bean的生命周期-1"><a href="#Bean的生命周期-1" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h2><p>下面是Spring中Bean的完整生命周期：<br><img src="https://github.com/morris131/morris-bookwiki/raw/master/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/Java/spring/https://gitee.com/morris131/morris-book/raw/master/back/java/spring/images/Spring%20bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="Alt text"></p><p>Bean实例生命周期的执行过程如下：</p><ol><li>Spring对bean进行实例化；</li><li>Spring将值和bean的引用注入到bean对应的属性中；</li><li>如果bean实现了BeanNameAware接口，Spring将bean的ID传递给setBean-Name()方法；</li><li>如果bean实现了BeanFactoryAware接口，Spring将调用setBeanFactory()方法，将BeanFactory容器实例传入；</li><li>如果bean实现了ApplicationContextAware接口，Spring将调用setApplicationContext()方法，将bean所在的应用上下文的引用传入进来；</li><li>如果有BeanPostProcessors和Bean关联，那么其postProcessBeforeInitialization()方法将被调用。</li><li>如果bean实现了InitializingBean接口，Spring将调用它们的after-PropertiesSet()方法。</li><li>如果bean使用init-method声明了初始化方法，该方法也会被调用；</li><li>如果有BeanPostProcessors与Bean关联，那么其postProcessAfterInitialization()方法将被调用。</li><li>此时，bean已经准备就绪，可以被应用程序使用了，它们将一直驻留在应用上下文中，直到该应用上下文被销毁；</li><li>如果bean实现了DisposableBean接口，Spring将调用它的destroy()接口方法。</li><li>如果bean使用destroy-method声明了销毁方法，该方法也会被调用。</li></ol><p>说明：Spring是不会完全管理原型Bean的生命周期的：Spring容器只会初始化，配置以及装载这些Bean，传递给Client。但是之后就不会再去管原型Bean之后的动作了。<br>也就是说，初始化生命周期回调方法在所有作用域的Bean是都会调用的，但是销毁生命周期回调方法在原型Bean是不会调用的。所以，客户端代码必须注意清理原型Bean以及释放原型Bean所持有的一些资源。可以通过使用自定义的bean post-processor来让Spring释放掉原型Bean所持有的资源。</p><h2 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h2><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanFactoryAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanNameAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">BeanNameAware</span>, <span class="title">BeanFactoryAware</span>, <span class="title">ApplicationContextAware</span>, <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"invoke Person init()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"invoke Person myDestroy()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"invoke DisposableBean destroy()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"invoke InitializingBean afterPropertiesSet()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext arg0)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"invoke ApplicationContextAware setApplicationContext(): "</span> + arg0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory arg0)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"invoke BeanFactoryAware setBeanFactory(): "</span> + arg0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String arg0)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"invoke BeanNameAware setBeanName(): "</span> + arg0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyBeanPostProcessor.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean,</span></span></span><br><span class="line"><span class="function"><span class="params">            String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;       </span><br><span class="line">        System.out.println(<span class="string">"invoke MyBeanPostProcessor postProcessBeforeInitialization,bean:"</span> + bean+<span class="string">",beanName:"</span>+beanName);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean,</span></span></span><br><span class="line"><span class="function"><span class="params">            String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"invoke MyBeanPostProcessor postProcessAfterInitialization,bean:"</span> + bean+<span class="string">",beanName:"</span>+beanName);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring-lifecycle.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context/spring-context-4.3.xsd"</span>&gt;</span></span><br><span class="line">                    </span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">destroy-method</span>=<span class="string">"myDestroy"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.bean.Person"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>jack<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置自定义的后置处理器 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"postProcessor"</span> <span class="attr">class</span>=<span class="string">"com.morris.spring.bean.MyBeanPostProcessor"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>BeanLifeCycleTest.java</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.morris.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanLifeCycleTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span> <span class="type">ClassPathXmlApplicationContext</span>(<span class="string">"spring-lifecycle.xml"</span>);</span><br><span class="line"></span><br><span class="line">Person person = (Person) context.getBean(<span class="string">"person"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(person.getName());</span><br><span class="line"></span><br><span class="line">context.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">"D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\b</span>in<span class="symbol">\j</span>ava.exe" "-javaagent:D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>etBrains<span class="symbol">\I</span>ntelliJ IDEA 2018.1.4<span class="symbol">\l</span>ib<span class="symbol">\i</span>dea_rt.jar=61410:D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>etBrains<span class="symbol">\I</span>ntelliJ IDEA 2018.1.4<span class="symbol">\b</span>in" -Dfile.encoding=UTF-8 -classpath "D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\c</span>harsets.jar;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\d</span>eploy.jar;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\a</span>ccess-bridge-64.jar;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\c</span>ldrdata.jar;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\d</span>nsns.jar;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\j</span>access.jar;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\j</span>fxrt.jar;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\l</span>ocaledata.jar;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\n</span>ashorn.jar;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\s</span>unec.jar;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\s</span>unjce_provider.jar;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\s</span>unmscapi.jar;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\s</span>unpkcs11.jar;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\z</span>ipfs.jar;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\j</span>avaws.jar;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\j</span>ce.jar;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\j</span>fr.jar;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\j</span>fxswt.jar;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\j</span>sse.jar;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\m</span>anagement-agent.jar;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\p</span>lugin.jar;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\r</span>esources.jar;D:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_172<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\r</span>t.jar;D:<span class="symbol">\g</span>itPrj<span class="symbol">\m</span>orris-book<span class="symbol">\后</span>端开发<span class="symbol">\J</span>ava<span class="symbol">\s</span>pring<span class="symbol">\s</span>pringDemo<span class="symbol">\t</span>arget<span class="symbol">\c</span>lasses;C:<span class="symbol">\U</span>sers<span class="symbol">\w</span>j65651<span class="symbol">\.</span>m2<span class="symbol">\r</span>epository<span class="symbol">\o</span>rg<span class="symbol">\s</span>pringframework<span class="symbol">\s</span>pring-context<span class="symbol">\5</span>.0.8.RELEASE<span class="symbol">\s</span>pring-context-5.0.8.RELEASE.jar;C:<span class="symbol">\U</span>sers<span class="symbol">\w</span>j65651<span class="symbol">\.</span>m2<span class="symbol">\r</span>epository<span class="symbol">\o</span>rg<span class="symbol">\s</span>pringframework<span class="symbol">\s</span>pring-aop<span class="symbol">\5</span>.0.8.RELEASE<span class="symbol">\s</span>pring-aop-5.0.8.RELEASE.jar;C:<span class="symbol">\U</span>sers<span class="symbol">\w</span>j65651<span class="symbol">\.</span>m2<span class="symbol">\r</span>epository<span class="symbol">\o</span>rg<span class="symbol">\s</span>pringframework<span class="symbol">\s</span>pring-beans<span class="symbol">\5</span>.0.8.RELEASE<span class="symbol">\s</span>pring-beans-5.0.8.RELEASE.jar;C:<span class="symbol">\U</span>sers<span class="symbol">\w</span>j65651<span class="symbol">\.</span>m2<span class="symbol">\r</span>epository<span class="symbol">\o</span>rg<span class="symbol">\s</span>pringframework<span class="symbol">\s</span>pring-core<span class="symbol">\5</span>.0.8.RELEASE<span class="symbol">\s</span>pring-core-5.0.8.RELEASE.jar;C:<span class="symbol">\U</span>sers<span class="symbol">\w</span>j65651<span class="symbol">\.</span>m2<span class="symbol">\r</span>epository<span class="symbol">\o</span>rg<span class="symbol">\s</span>pringframework<span class="symbol">\s</span>pring-jcl<span class="symbol">\5</span>.0.8.RELEASE<span class="symbol">\s</span>pring-jcl-5.0.8.RELEASE.jar;C:<span class="symbol">\U</span>sers<span class="symbol">\w</span>j65651<span class="symbol">\.</span>m2<span class="symbol">\r</span>epository<span class="symbol">\o</span>rg<span class="symbol">\s</span>pringframework<span class="symbol">\s</span>pring-expression<span class="symbol">\5</span>.0.8.RELEASE<span class="symbol">\s</span>pring-expression-5.0.8.RELEASE.jar;C:<span class="symbol">\U</span>sers<span class="symbol">\w</span>j65651<span class="symbol">\.</span>m2<span class="symbol">\r</span>epository<span class="symbol">\j</span>unit<span class="symbol">\j</span>unit<span class="symbol">\4</span>.11<span class="symbol">\j</span>unit-4.11.jar;C:<span class="symbol">\U</span>sers<span class="symbol">\w</span>j65651<span class="symbol">\.</span>m2<span class="symbol">\r</span>epository<span class="symbol">\o</span>rg<span class="symbol">\h</span>amcrest<span class="symbol">\h</span>amcrest-core<span class="symbol">\1</span>.3<span class="symbol">\h</span>amcrest-core-1.3.jar;C:<span class="symbol">\U</span>sers<span class="symbol">\w</span>j65651<span class="symbol">\.</span>m2<span class="symbol">\r</span>epository<span class="symbol">\o</span>rg<span class="symbol">\a</span>spectj<span class="symbol">\a</span>spectjrt<span class="symbol">\1</span>.9.1<span class="symbol">\a</span>spectjrt-1.9.1.jar;C:<span class="symbol">\U</span>sers<span class="symbol">\w</span>j65651<span class="symbol">\.</span>m2<span class="symbol">\r</span>epository<span class="symbol">\o</span>rg<span class="symbol">\a</span>spectj<span class="symbol">\a</span>spectjweaver<span class="symbol">\1</span>.9.1<span class="symbol">\a</span>spectjweaver-1.9.1.jar" com.morris.spring.bean.BeanLifeCycleTest</span><br><span class="line">九月 12, 2018 4:32:13 下午 org.springframework.context.support.AbstractApplicationContext prepareRefresh</span><br><span class="line">信息: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@7ab2bfe1: startup date [Wed Sep 12 16:32:13 CST 2018]; root of context hierarchy</span><br><span class="line">九月 12, 2018 4:32:13 下午 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions</span><br><span class="line">信息: Loading XML bean definitions from class path resource [spring-lifecycle.xml]</span><br><span class="line">invoke BeanNameAware setBeanName(): person</span><br><span class="line">invoke BeanFactoryAware setBeanFactory(): org.springframework.beans.factory.support.DefaultListableBeanFactory@6b2fad11: defining beans [person,postProcessor]; root of factory hierarchy</span><br><span class="line">invoke ApplicationContextAware setApplicationContext(): org.springframework.context.support.ClassPathXmlApplicationContext@7ab2bfe1: startup date [Wed Sep 12 16:32:13 CST 2018]; root of context hierarchy</span><br><span class="line">invoke MyBeanPostProcessor postProcessBeforeInitialization,bean:com.morris.spring.bean.Person@7085bdee,beanName:person</span><br><span class="line">invoke InitializingBean afterPropertiesSet()</span><br><span class="line">invoke Person init()</span><br><span class="line">invoke MyBeanPostProcessor postProcessAfterInitialization,bean:com.morris.spring.bean.Person@7085bdee,beanName:person</span><br><span class="line">jack</span><br><span class="line">九月 12, 2018 4:32:13 下午 org.springframework.context.support.AbstractApplicationContext doClose</span><br><span class="line">invoke DisposableBean destroy()</span><br><span class="line">invoke Person myDestroy()</span><br><span class="line">信息: Closing org.springframework.context.support.ClassPathXmlApplicationContext@7ab2bfe1: startup date [Wed Sep 12 16:32:13 CST 2018]; root of context hierarchy</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
